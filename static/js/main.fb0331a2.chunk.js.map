{"version":3,"sources":["lib/utility.js","scenes/ColoredSquareScene.js","models/Model.js","models/ColoredModel.js","scenes/ColoredCubeScene.js","models/TexturedCubeModel.js","scenes/TexturedCubeScene.js","models/LightedCubeModel.js","scenes/LightedCubeScene.js","models/MazeModel.js","scenes/MazeScene.js","models/BrickWallModel.js","scenes/BrickWallScene.js","models/MaterialModel.js","scenes/MaterialScene.js","components/App.js","serviceWorker.js","index.js"],"names":["initShaderProgram","gl","vsSource","fsSource","vertexShader","_loadShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","alert","getProgramInfoLog","_typeToString","type","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","loadTexture","url","texture","createTexture","bindTexture","TEXTURE_2D","internalFormat","RGBA","srcFormat","srcType","UNSIGNED_BYTE","pixel","Uint8Array","texImage2D","image","Image","onload","_isPowerOf2","width","height","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","src","value","clearScreen","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","_directions","x","y","generateMaze","windiness","carve","pos","data","canCarve","dir","isInBounds","addDir","nxt","len","push","Array","fill","lastDir","start","cells","length","cell","posCells","i","includes","Math","random","floor","pop","getShape","shape","s3","sqrt","s6","vertices","faces","r","a","phi","b","c","_materials","emerald","ambient","diffuse","specular","shininess","jade","obsidian","pearl","ruby","turquoise","brass","bronze","chrome","copper","gold","silver","blackPlastic","cyanPlastic","greenPlastic","redPlastic","whitePlastic","yellowPlastic","blackRubber","cyanRubber","greenRubber","redRubber","whiteRubber","yellowRubber","getMaterial","name","ColoredSquareScene","this","initScene","bind","drawScene","programInfo","program","attribLocations","vertexPosition","getAttribLocation","vertexColor","uniformLocations","projectionMatrix","getUniformLocation","modelViewMatrix","buffers","_initBuffers","scene","squareRotation","deltaTime","bindBuffer","ARRAY_BUFFER","color","vertexAttribPointer","enableVertexAttribArray","position","fieldOfView","PI","aspect","canvas","clientWidth","clientHeight","mat4","useProgram","uniformMatrix4fv","drawArrays","TRIANGLE_STRIP","createBuffer","bufferData","Float32Array","STATIC_DRAW","Model","options","geometry","normal","Promise","all","fetch","vertex","then","response","text","fragment","shaderParameters","attributeCount","ACTIVE_ATTRIBUTES","attributes","attribute","getActiveAttrib","uniformCount","ACTIVE_UNIFORMS","uniforms","uniform","getActiveUniform","getShaderParameters","forEach","location","vertexNormal","vertexTangent","vertexBitangent","vertexTextureCoord","modelMatrix","viewMatrix","normalMatrix","textureDiffuse","textureNormal","textureHeight","showDiffuseMap","showNormalMap","perPixel","parallaxHeightScale","parallaxSteps","cameraPosition","ambientLight","directionalLight","direction","pointLight","lights","material","model","positions","normals","tangents","bitangents","textureCoordinates","colors","indices","vec3","tangent","bitangent","offset","addSquare","c0","c1","c2","c3","addFace","face","addTriangle","c4","addPentagon","addFaces","option","positionBuffer","indexBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","vertexCount","normalBuffer","tangentBuffer","bitangentBuffer","textureCoordBuffer","textureCoord","colorBuffer","uniform1i","uniform1f","uniform3fv","light","activeTexture","TEXTURE0","TEXTURE1","TEXTURE2","UNSIGNED_SHORT","drawElements","TRIANGLES","ColoredModel","shapeName","draw","_initModel","_drawModel","ColoredCubeScene","model6","model12","actors","scale","rotations","angle","axis","speed","camera","actor","_renderActor","_animateActor","rotation","TexturedCubeModel","_geometry","f0","f1","f2","f3","b0","b1","b2","b3","TexturedCubeScene","LightedCubeModel","LightedCubeScene","rotationSpeed","cameraDir","MazeModel","maze","_initShaders","_freeBuffers","UNSIGNED_INT","addSquareXY","left","right","top","bottom","base","j","addSquareXZ","addSquareYZ","floorColor","ceilingColor","wallColor_Top","wallColor_Bottom","wallColor_Left","wallColor_Right","ofs_x","ofs_y","Uint32Array","deleteBuffer","MazeScene","totalDelta","size","update","BrickWallModel","BrickWallScene","MaterialModel","MaterialScene","model4","model8","model10","model20","App","props","onClickCanvas","renderCanvas","scenes","init","render","sceneIndex","rect","getBoundingClientRect","getContext","CULL_FACE","cullFace","BACK","getExtension","frame","window","requestAnimationFrame","cancelAnimationFrame","event","preventDefault","timeStamp","className","ref","elem","onClick","React","Component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8PAKO,SAASA,EAAkBC,EAAIC,EAAUC,GAC9C,IAAMC,EAAeC,EAAYJ,EAAIA,EAAGK,cAAeJ,GACjDK,EAAiBF,EAAYJ,EAAIA,EAAGO,gBAAiBL,GACrDM,EAAgBR,EAAGS,gBAIzB,OAHAT,EAAGU,aAAaF,EAAeL,GAC/BH,EAAGU,aAAaF,EAAeF,GAC/BN,EAAGW,YAAYH,GACVR,EAAGY,oBAAoBJ,EAAeR,EAAGa,aAIvCL,GAHLM,MAAM,4CAA8Cd,EAAGe,kBAAkBP,IAClE,MAwBX,SAASQ,EAAchB,EAAIiB,GACzB,OAAQA,GACN,KAAKjB,EAAGkB,MACN,MAAO,QACT,KAAKlB,EAAGmB,WACN,MAAO,aACT,KAAKnB,EAAGoB,WACN,MAAO,aACT,KAAKpB,EAAGqB,WACN,MAAO,aACT,KAAKrB,EAAGsB,IACN,MAAO,MACT,KAAKtB,EAAGuB,SACN,MAAO,WACT,KAAKvB,EAAGwB,SACN,MAAO,WACT,KAAKxB,EAAGyB,SACN,MAAO,WACT,KAAKzB,EAAG0B,KACN,MAAO,OACT,KAAK1B,EAAG2B,UACN,MAAO,YACT,KAAK3B,EAAG4B,UACN,MAAO,YACT,KAAK5B,EAAG6B,UACN,MAAO,YACT,KAAK7B,EAAG8B,WACN,MAAO,aACT,KAAK9B,EAAG+B,WACN,MAAO,aACT,KAAK/B,EAAGgC,WACN,MAAO,aACT,KAAKhC,EAAGiC,WACN,MAAO,aACT,KAAKjC,EAAGkC,aACN,MAAO,eACT,QACE,MAAO,WAIb,SAAS9B,EAAYJ,EAAIiB,EAAMkB,GAC7B,IAAMC,EAASpC,EAAGqC,aAAapB,GAG/B,OAFAjB,EAAGsC,aAAaF,EAAQD,GACxBnC,EAAGuC,cAAcH,GACZpC,EAAGwC,mBAAmBJ,EAAQpC,EAAGyC,gBAK/BL,GAJLtB,MAAM,4CAA8Cd,EAAG0C,iBAAiBN,IACxEpC,EAAG2C,aAAaP,GACT,MAKJ,SAASQ,EAAY5C,EAAI6C,GAC9B,IAAMC,EAAU9C,EAAG+C,gBACnB/C,EAAGgD,YAAYhD,EAAGiD,WAAYH,GAC9B,IACMI,EAAiBlD,EAAGmD,KAIpBC,EAAYpD,EAAGmD,KACfE,EAAUrD,EAAGsD,cACbC,EAAQ,IAAIC,WAAW,CAAC,EAAG,EAAG,IAAK,MACzCxD,EAAGyD,WAAWzD,EAAGiD,WARH,EAQsBC,EANtB,EACC,EACA,EAI4DE,EAAWC,EAASE,GAC/F,IAAMG,EAAQ,IAAIC,MAclB,OAbAD,EAAME,OAAS,WACb5D,EAAGgD,YAAYhD,EAAGiD,WAAYH,GAC9B9C,EAAGyD,WAAWzD,EAAGiD,WAZL,EAYwBC,EAClCE,EAAWC,EAASK,GAClBG,EAAYH,EAAMI,QAAUD,EAAYH,EAAMK,QAChD/D,EAAGgE,eAAehE,EAAGiD,aAErBjD,EAAGiE,cAAcjE,EAAGiD,WAAYjD,EAAGkE,eAAgBlE,EAAGmE,eACtDnE,EAAGiE,cAAcjE,EAAGiD,WAAYjD,EAAGoE,eAAgBpE,EAAGmE,eACtDnE,EAAGiE,cAAcjE,EAAGiD,WAAYjD,EAAGqE,mBAAoBrE,EAAGsE,UAG9DZ,EAAMa,IAAM1B,EACLC,EAGT,SAASe,EAAYW,GACnB,OAAiC,KAAzBA,EAASA,EAAQ,GAGpB,SAASC,EAAYzE,GAC1BA,EAAG0E,WAAW,EAAK,EAAK,EAAK,GAC7B1E,EAAG2E,WAAW,GACd3E,EAAG4E,OAAO5E,EAAG6E,YACb7E,EAAG8E,UAAU9E,EAAG+E,QAChB/E,EAAGgF,MAAMhF,EAAGiF,iBAAmBjF,EAAGkF,kBAGpC,IAAMC,EAAc,CAClB,CAAEC,GAAI,EAAGC,EAAG,GACZ,CAAED,EAAG,EAAGC,GAAI,GACZ,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,IAGN,SAASC,EAAaxB,EAAOC,GA4BlC,IA5B4D,IAAlBwB,EAAiB,uDAAL,GAChDC,EAAQ,SAACC,GACbC,EAAKD,EAAIJ,GAAGI,EAAIL,GAAK,GAGjBO,EAAW,SAACF,EAAKG,GACrB,IAAKC,EAAWC,EAAOL,EAAKG,EAAK,IAC/B,OAAO,EAET,IAAMG,EAAMD,EAAOL,EAAKG,EAAK,GAC7B,OAA8B,IAAvBF,EAAKK,EAAIV,GAAGU,EAAIX,IAGnBS,EAAa,SAACJ,GAClB,QAAIA,EAAIL,EAAI,GAAKK,EAAIJ,EAAI,GAAKI,EAAIL,GAAKtB,GAAS2B,EAAIJ,GAAKtB,IAMrD+B,EAAS,SAACL,EAAKG,EAAKI,GACxB,MAAO,CACLZ,EAAGK,EAAIL,EAAIQ,EAAIR,EAAIY,EACnBX,EAAGI,EAAIJ,EAAIO,EAAIP,EAAIW,IAIjBN,EAAO,GACJL,EAAI,EAAGA,EAAItB,EAAQsB,IAC1BK,EAAKO,KAAK,IAAIC,MAAMpC,GAAOqC,KAAK,IAGlC,IAEIC,EAFEC,EAAQ,CAAEjB,EAAG,EAAGC,EAAG,GACnBiB,EAAQ,GAId,IAFAd,EAAMa,GACNC,EAAML,KAAKI,GACJC,EAAMC,OAAS,GAAG,CAGvB,IAFA,IAAMC,EAAOF,EAAMA,EAAMC,OAAS,GAC5BE,EAAW,GACRC,EAAI,EAAGA,EAAIvB,EAAYoB,OAAQG,IAAK,CAC3C,IAAMd,EAAMT,EAAYuB,GACpBf,EAASa,EAAMZ,IACjBa,EAASR,KAAKL,GAGlB,GAAIa,EAASF,OAAS,EAAG,CACvB,IAAIX,OAAG,EAELA,EADEa,EAASE,SAASP,IAAYQ,KAAKC,SAAWtB,EAC1Ca,EAEAK,EAASG,KAAKE,MAAMF,KAAKC,SAAWJ,EAASF,SAErDf,EAAMM,EAAOU,EAAMZ,EAAK,IACxBJ,EAAMM,EAAOU,EAAMZ,EAAK,IACxBU,EAAML,KAAKH,EAAOU,EAAMZ,EAAK,IAC7BQ,EAAUR,OAEVU,EAAMS,MACNX,EAAU,KAGd,MAAO,CACLtC,QACAC,SACA2B,QAIG,SAASsB,EAASC,GACvB,GAAc,gBAAVA,EAAyB,CAC3B,IAAMC,EAAKN,KAAKO,KAAK,GACfC,EAAKR,KAAKO,KAAK,GAgBrB,MAAO,CAAEE,SAdQ,CACf,CAACH,EAAK,GAAIE,EAAK,EAAI,KAAa,KAALA,EAAY,GACvC,EAAEF,EAAK,GAAIE,EAAK,EAAI,KAAa,KAALA,EAAY,IACxC,EAAEF,EAAK,GAAIE,EAAK,EAAI,KAAa,KAALA,GAAY,IACxC,CAAC,EAAGA,EAAK,EAAI,KAAa,KAALA,EAAY,IAUhBE,MAPL,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAMX,GAAc,SAAVL,EAAkB,CACpB,IAAMM,EAAI,GAsBV,MAAO,CAAEF,SApBQ,CACf,EAAEE,GAAIA,GAAIA,GACV,EAAEA,GAAIA,EAAGA,GACT,CAACA,GAAIA,EAAGA,GACR,CAACA,GAAIA,GAAIA,GACT,EAAEA,EAAGA,GAAIA,GACT,EAAEA,EAAGA,EAAGA,GACR,CAACA,EAAGA,EAAGA,GACP,CAACA,EAAGA,GAAIA,IAYSD,MATL,CACZ,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAMd,GAAc,eAAVL,EAAwB,CAC1B,IAAMO,EAAI,GAAK,EAAIZ,KAAKO,KAAK,IAuB7B,MAAO,CAAEE,SApBQ,CACf,EAAEG,EAAG,EAAGA,GACR,CAACA,EAAG,EAAGA,GACP,CAACA,EAAG,GAAIA,GACR,EAAEA,EAAG,GAAIA,GACT,CAAC,EAPO,GAOD,GACP,CAAC,GARO,GAQA,IAcSF,MAXL,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAMX,GAAc,4BAAVL,EAAqC,CA6BvC,MAAO,CAAEI,SA5BQ,CACf,CAAC,UAAa,SAAY,WAC1B,EAAE,UAAY,SAAY,WAC1B,EAAE,UAAY,EAAY,WAC1B,CAAC,WAAc,SAAW,WAC1B,CAAC,SAAa,GAAa,WAC3B,CAAC,UAAa,SAAY,WAC1B,EAAE,UAAY,UAAa,WAC3B,EAAE,SAAY,EAAY,WAC1B,EAAE,WAAa,UAAY,WAC3B,CAAC,WAAc,UAAY,WAC3B,CAAC,UAAa,GAAa,WAC3B,EAAE,WAAa,UAAY,YAgBVC,MAbL,CACZ,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IACV,CAAC,EAAG,EAAG,GAAI,GACX,CAAC,EAAG,EAAG,GAAI,GACX,CAAC,EAAG,EAAG,GAAI,GACX,CAAC,GAAI,EAAG,GAAI,KAMhB,GAAc,iBAAVL,EAA0B,CAC5B,IAAMQ,GAAO,EAAIb,KAAKO,KAAK,IAAM,EAE3BO,EAAI,GAAUD,EACdE,EAAI,IAAO,EAAIF,GAwCrB,MAAO,CAAEJ,SAtCQ,CACf,CAACM,EAAG,EALI,IAMR,EAAEA,EAAG,EANG,IAOR,EAAED,EAAGA,EAAGA,GACR,CAAC,EARO,GAQDC,GACP,CAACD,EAAGA,EAAGA,GACP,CAACA,GAAIA,EAAGA,GACR,CAAC,GAXO,GAWAC,GACR,EAAED,GAAIA,EAAGA,GACT,CAACC,EAAG,GAbI,IAcR,EAAEA,EAAG,GAdG,IAeR,EAAED,GAAIA,GAAIA,GACV,CAAC,GAhBO,IAgBCC,GACT,CAACD,GAAIA,GAAIA,GACT,CAACA,EAAGA,GAAIA,GACR,CAAC,EAnBO,IAmBAC,GACR,EAAED,EAAGA,GAAIA,GACT,CArBQ,GAqBJC,EAAG,GACP,EAtBQ,GAsBHA,EAAG,GACR,EAvBQ,IAuBFA,EAAG,GACT,CAxBQ,IAwBHA,EAAG,IAkBSL,MAfL,CACZ,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,GAAI,GAAI,GAAI,EAAG,GAChB,CAAC,GAAI,GAAI,GAAI,EAAG,GAChB,CAAC,GAAI,EAAG,EAAG,GAAI,IACf,CAAC,EAAG,GAAI,GAAI,GAAI,GAChB,CAAC,GAAI,EAAG,EAAG,GAAI,IACf,CAAC,EAAG,GAAI,GAAI,GAAI,GAChB,CAAC,EAAG,EAAG,EAAG,GAAI,IACd,CAAC,GAAI,EAAG,GAAI,GAAI,IAChB,CAAC,GAAI,EAAG,GAAI,GAAI,IAChB,CAAC,EAAG,EAAG,EAAG,GAAI,MAMlB,GAAc,gBAAVL,EAAyB,CAC3B,IAEMS,EAAI,GAAK,IAFF,EAAId,KAAKO,KAAK,IAAM,IA0CjC,MAAO,CAAEE,SAtCQ,CACf,CAAC,EAAGK,GAJI,IAKR,CAACA,EALO,GAKD,GACP,EAAEA,EANM,GAMA,GACR,CAAC,EAAGA,EAPI,IAQR,CAAC,GAAIA,EARG,IASR,EATQ,GASH,EAAGA,GACR,CAVQ,GAUJ,EAAGA,GACP,CAAC,GAAIA,GAXG,IAYR,CAZQ,GAYJ,GAAIA,GACR,EAbQ,GAaH,GAAIA,GACT,CAACA,GAdO,GAcA,GACR,EAAEA,GAfM,GAeC,IA0BQJ,MAvBL,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,GAAI,EAAG,IACR,CAAC,GAAI,EAAG,IACR,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,GAAI,GACR,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,GAAI,GACR,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IACP,CAAC,GAAI,EAAG,GACR,CAAC,GAAI,EAAG,GACR,CAAC,EAAG,EAAG,OAOb,IAAMM,EAAa,CACjBC,QAAS,CACPC,QAAS,CAAC,MAAQ,MAAQ,OAASC,QAAS,CAAC,OAAS,OAAS,QAAUC,SAAU,CAAC,KAAO,QAAU,MAAQC,UAAW,IAE1HC,KAAM,CACJJ,QAAS,CAAC,KAAO,MAAQ,OAASC,QAAS,CAAC,IAAM,IAAM,KAAOC,SAAU,CAAC,QAAU,QAAU,SAAWC,UAAW,IAEtHE,SAAU,CACRL,QAAS,CAAC,OAAS,IAAM,QAAUC,QAAS,CAAC,OAAS,IAAM,QAAUC,SAAU,CAAC,QAAU,QAAU,SAAWC,UAAW,IAE7HG,MAAO,CACLN,QAAS,CAAC,IAAM,OAAS,QAAUC,QAAS,CAAC,EAAG,KAAO,MAAQC,SAAU,CAAC,QAAU,QAAU,SAAWC,UAAW,MAEtHI,KAAM,CACJP,QAAS,CAAC,MAAQ,OAAS,QAAUC,QAAS,CAAC,OAAS,OAAS,QAAUC,SAAU,CAAC,QAAU,QAAU,SAAWC,UAAW,IAElIK,UAAW,CACTR,QAAS,CAAC,GAAK,OAAS,OAASC,QAAS,CAAC,KAAO,OAAS,QAAUC,SAAU,CAAC,QAAU,OAAS,SAAWC,UAAW,IAE3HM,MAAO,CACLT,QAAS,CAAC,QAAU,QAAU,SAAWC,QAAS,CAAC,QAAU,QAAU,SAAWC,SAAU,CAAC,QAAU,QAAU,SAAWC,UAAW,WAEzIO,OAAQ,CACNV,QAAS,CAAC,MAAQ,MAAQ,MAAQC,QAAS,CAAC,KAAO,MAAQ,QAAUC,SAAU,CAAC,QAAU,QAAU,SAAWC,UAAW,IAE5HQ,OAAQ,CACNX,QAAS,CAAC,IAAM,IAAM,KAAOC,QAAS,CAAC,GAAK,GAAK,IAAMC,SAAU,CAAC,QAAU,QAAU,SAAWC,UAAW,IAE9GS,OAAQ,CACNZ,QAAS,CAAC,OAAS,MAAQ,OAASC,QAAS,CAAC,MAAQ,OAAS,OAASC,SAAU,CAAC,QAAU,QAAU,SAAWC,UAAW,IAE/HU,KAAM,CACJb,QAAS,CAAC,OAAS,MAAQ,OAASC,QAAS,CAAC,OAAS,OAAS,QAAUC,SAAU,CAAC,QAAU,QAAU,SAAWC,UAAW,IAEjIW,OAAQ,CACNd,QAAS,CAAC,OAAS,OAAS,QAAUC,QAAS,CAAC,OAAS,OAAS,QAAUC,SAAU,CAAC,QAAU,QAAU,SAAWC,UAAW,IAEnIY,aAAc,CACZf,QAAS,CAAC,EAAK,EAAK,GAAMC,QAAS,CAAC,IAAM,IAAM,KAAOC,SAAU,CAAC,GAAM,GAAM,IAAOC,UAAW,KAElGa,YAAa,CACXhB,QAAS,CAAC,EAAK,GAAK,KAAOC,QAAS,CAAC,EAAK,UAAY,WAAaC,SAAU,CAAC,UAAY,UAAY,WAAaC,UAAW,KAEhIc,aAAc,CACZjB,QAAS,CAAC,EAAK,EAAK,GAAMC,QAAS,CAAC,GAAK,IAAM,IAAMC,SAAU,CAAC,IAAM,IAAM,KAAOC,UAAW,KAEhGe,WAAY,CACVlB,QAAS,CAAC,EAAK,EAAK,GAAMC,QAAS,CAAC,GAAK,EAAK,GAAMC,SAAU,CAAC,GAAK,GAAK,IAAMC,UAAW,KAE5FgB,aAAc,CACZnB,QAAS,CAAC,EAAK,EAAK,GAAMC,QAAS,CAAC,IAAM,IAAM,KAAOC,SAAU,CAAC,GAAM,GAAM,IAAOC,UAAW,KAElGiB,cAAe,CACbpB,QAAS,CAAC,EAAK,EAAK,GAAMC,QAAS,CAAC,GAAK,GAAK,GAAMC,SAAU,CAAC,GAAM,GAAM,IAAOC,UAAW,KAE/FkB,YAAa,CACXrB,QAAS,CAAC,IAAM,IAAM,KAAOC,QAAS,CAAC,IAAM,IAAM,KAAOC,SAAU,CAAC,GAAK,GAAK,IAAMC,UAAW,SAElGmB,WAAY,CACVtB,QAAS,CAAC,EAAK,IAAM,KAAOC,QAAS,CAAC,GAAK,GAAK,IAAMC,SAAU,CAAC,IAAM,GAAK,IAAMC,UAAW,SAE/FoB,YAAa,CACXvB,QAAS,CAAC,EAAK,IAAM,GAAMC,QAAS,CAAC,GAAK,GAAK,IAAMC,SAAU,CAAC,IAAM,GAAK,KAAOC,UAAW,SAE/FqB,UAAW,CACTxB,QAAS,CAAC,IAAM,EAAK,GAAMC,QAAS,CAAC,GAAK,GAAK,IAAMC,SAAU,CAAC,GAAK,IAAM,KAAOC,UAAW,SAE/FsB,YAAa,CACXzB,QAAS,CAAC,IAAM,IAAM,KAAOC,QAAS,CAAC,GAAK,GAAK,IAAMC,SAAU,CAAC,GAAK,GAAK,IAAMC,UAAW,SAE/FuB,aAAc,CACZ1B,QAAS,CAAC,IAAM,IAAM,GAAMC,QAAS,CAAC,GAAK,GAAK,IAAMC,SAAU,CAAC,GAAK,GAAK,KAAOC,UAAW,UAI1F,SAASwB,EAAYC,GAC1B,OAAO9B,EAAW8B,G,IChVLC,E,WAjJb,aAAe,oBACbC,KAAKC,UAAYD,KAAKC,UAAUC,KAAKF,MACrCA,KAAKG,UAAYH,KAAKG,UAAUD,KAAKF,M,sDAG7B5J,GACR,IAuBMQ,EAAgBT,EAAkBC,EAvB1B,qUAeA,qGAURgK,EAAc,CAClBC,QAASzJ,EACT0J,gBAAiB,CACfC,eAAgBnK,EAAGoK,kBAAkB5J,EAAe,mBACpD6J,YAAarK,EAAGoK,kBAAkB5J,EAAe,iBAEnD8J,iBAAkB,CAChBC,iBAAkBvK,EAAGwK,mBAAmBhK,EAAe,qBACvDiK,gBAAiBzK,EAAGwK,mBAAmBhK,EAAe,sBAIpDkK,EAAUd,KAAKe,aAAa3K,GAElC4J,KAAKgB,MAAQ,CAAEZ,cAAaU,UAASG,eAAgB,K,gCAG7C7K,EAAI8K,GACZ,IAAMF,EAAQhB,KAAKgB,MACXZ,EAAyBY,EAAzBZ,YAAaU,EAAYE,EAAZF,QAErBjG,EAAYzE,GAGV,IACMiB,EAAOjB,EAAGkB,MAIhBlB,EAAG+K,WAAW/K,EAAGgL,aAAcN,EAAQO,OACvCjL,EAAGkL,oBACDlB,EAAYE,gBAAgBG,YAPR,EASpBpJ,GAPgB,EACH,EACA,GASfjB,EAAGmL,wBACDnB,EAAYE,gBAAgBG,aAI9B,IACMpJ,EAAOjB,EAAGkB,MAIhBlB,EAAG+K,WAAW/K,EAAGgL,aAAcN,EAAQU,UACvCpL,EAAGkL,oBACDlB,EAAYE,gBAAgBC,eAPR,EASpBlJ,GAPgB,EACH,EACA,GASfjB,EAAGmL,wBACDnB,EAAYE,gBAAgBC,gBAI9B,IAAMkB,EAAc,GAAKzE,KAAK0E,GAAK,IAC7BC,EAASvL,EAAGwL,OAAOC,YAAczL,EAAGwL,OAAOE,aAG3CnB,EAAmBoB,MACzBA,IAAiBpB,EAAkBc,EAAaE,EAHlC,GACD,KAGb,IAAMd,EAAkBkB,MACxBA,IAAelB,EAAiBA,EAAiB,EAAE,EAAK,GAAM,IAC9DkB,IAAYlB,EAAiBA,EAAiBG,EAAMC,eAAgB,CAAC,EAAG,EAAG,IAC3E7K,EAAG4L,WAAW5B,EAAYC,SAC1BjK,EAAG6L,iBACD7B,EAAYM,iBAAiBC,kBAC7B,EACAA,GACFvK,EAAG6L,iBACD7B,EAAYM,iBAAiBG,iBAC7B,EACAA,GAMFzK,EAAG8L,WAAW9L,EAAG+L,eAFF,EACK,GAItBnB,EAAMC,gBAAkBC,I,mCAGb9K,GACX,IAMMoL,EAAWpL,EAAGgM,eACpBhM,EAAG+K,WAAW/K,EAAGgL,aAAcI,GAC/BpL,EAAGiM,WAAWjM,EAAGgL,aAAc,IAAIkB,aARjB,CAChB,EAAK,GACJ,EAAK,EACN,GAAM,GACL,GAAM,IAImDlM,EAAGmM,aAE/D,IAMMlB,EAAQjL,EAAGgM,eAIjB,OAHAhM,EAAG+K,WAAW/K,EAAGgL,aAAcC,GAC/BjL,EAAGiM,WAAWjM,EAAGgL,aAAc,IAAIkB,aARpB,CACb,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,EACf,EAAK,EAAK,EAAK,IAIwClM,EAAGmM,aAErD,CAAEf,WAAUH,a,mBCqcRmB,E,mGAjlBFC,GAAU,IAEfvJ,EAaA3C,EACAG,EAhBc,OACVN,EAAiBqM,EAAjBrM,GAAIsM,EAAaD,EAAbC,SAERD,EAAQvJ,UACVA,EAAU,GACNuJ,EAAQvJ,QAAQiF,UAClBjF,EAAQiF,QAAUnF,EAAY5C,EAAIqM,EAAQvJ,QAAQiF,UAEhDsE,EAAQvJ,QAAQyJ,SAClBzJ,EAAQyJ,OAAS3J,EAAY5C,EAAIqM,EAAQvJ,QAAQyJ,SAE/CF,EAAQvJ,QAAQiB,SAClBjB,EAAQiB,OAASnB,EAAY5C,EAAIqM,EAAQvJ,QAAQiB,UAKrDyI,QAAQC,IAAI,CACVC,MAAML,EAAQjK,OAAOuK,QAAQC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAAQF,MAAK,SAACE,GAAD,OAAU3M,EAAe2M,KAC/FJ,MAAML,EAAQjK,OAAO2K,UAAUH,MAAK,SAACC,GAAD,OAAcA,EAASC,UAAQF,MAAK,SAACE,GAAD,OAAUxM,EAAiBwM,OAClGF,MAAK,WACN,IAAMpM,EAAgBT,EAAkBC,EAAIG,EAAcG,GACpD0M,EFRL,SAA6BhN,EAAIQ,GAGtC,IAFA,IAAMyM,EAAiBjN,EAAGY,oBAAoBJ,EAAeR,EAAGkN,mBAC1DC,EAAa,GACVzG,EAAI,EAAGA,EAAIuG,EAAgBvG,IAAK,CACvC,IAAM0G,EAAYpN,EAAGqN,gBAAgB7M,EAAekG,GACpDyG,EAAWlH,KAAK,CAAEyD,KAAM0D,EAAU1D,KAAMzI,KAAMD,EAAchB,EAAIoN,EAAUnM,QAI5E,IAFA,IAAMqM,EAAetN,EAAGY,oBAAoBJ,EAAeR,EAAGuN,iBACxDC,EAAW,GACR9G,EAAI,EAAGA,EAAI4G,EAAc5G,IAAK,CACrC,IAAM+G,EAAUzN,EAAG0N,iBAAiBlN,EAAekG,GACnD8G,EAASvH,KAAK,CAAEyD,KAAM+D,EAAQ/D,KAAMzI,KAAMD,EAAchB,EAAIyN,EAAQxM,QAEtE,MAAO,CACLkM,aACAK,YEP2BG,CAAoB3N,EAAIQ,GAC3C4B,EAAS,CACb6H,QAASzJ,EACT0J,gBAAiB,GACjBI,iBAAkB,IAEpB0C,EAAiBG,WAAWS,SAAQ,SAACR,GACnC,IAAMS,EAAW7N,EAAGoK,kBAAkB5J,EAAe4M,EAAU1D,MAC/D,OAAQ0D,EAAU1D,MAChB,IAAK,kBACHtH,EAAO8H,gBAAgBC,eAAiB0D,EACxC,MACF,IAAK,gBACHzL,EAAO8H,gBAAgB4D,aAAeD,EACtC,MACF,IAAK,iBACHzL,EAAO8H,gBAAgB6D,cAAgBF,EACvC,MACF,IAAK,mBACHzL,EAAO8H,gBAAgB8D,gBAAkBH,EACzC,MACF,IAAK,eACHzL,EAAO8H,gBAAgBG,YAAcwD,EACrC,MACF,IAAK,gBACHzL,EAAO8H,gBAAgB+D,mBAAqBJ,EAC5C,MACF,QACE/M,MAAM,wBAA0BsM,EAAU1D,UAGhDsD,EAAiBQ,SAASI,SAAQ,SAACH,GACjC,IAAMI,EAAW7N,EAAGwK,mBAAmBhK,EAAeiN,EAAQ/D,MAC9D,OAAQ+D,EAAQ/D,MACd,IAAK,eACHtH,EAAOkI,iBAAiB4D,YAAcL,EACtC,MACF,IAAK,cACHzL,EAAOkI,iBAAiB6D,WAAaN,EACrC,MACF,IAAK,gBACHzL,EAAOkI,iBAAiB8D,aAAeP,EACvC,MACF,IAAK,oBACHzL,EAAOkI,iBAAiBC,iBAAmBsD,EAC3C,MACF,IAAK,kBACHzL,EAAOkI,iBAAiB+D,eAAiBR,EACzC,MACF,IAAK,iBACHzL,EAAOkI,iBAAiBgE,cAAgBT,EACxC,MACF,IAAK,iBACHzL,EAAOkI,iBAAiBiE,cAAgBV,EACxC,MACF,IAAK,kBACHzL,EAAOkI,iBAAiBkE,eAAiBX,EACzC,MACF,IAAK,iBACHzL,EAAOkI,iBAAiBmE,cAAgBZ,EACxC,MACF,IAAK,YACHzL,EAAOkI,iBAAiBoE,SAAWb,EACnC,MACF,IAAK,uBACHzL,EAAOkI,iBAAiBqE,oBAAsBd,EAC9C,MACF,IAAK,iBACHzL,EAAOkI,iBAAiBsE,cAAgBf,EACxC,MACF,IAAK,aACHzL,EAAOkI,iBAAiBuE,eAAiBhB,EACzC,MACF,IAAK,gBACHzL,EAAOkI,iBAAiBwE,aAAejB,EACvC,MACF,IAAK,0BACEzL,EAAOkI,iBAAiByE,mBAC3B3M,EAAOkI,iBAAiByE,iBAAmB,IAE7C3M,EAAOkI,iBAAiByE,iBAAiB9D,MAAQ4C,EACjD,MACF,IAAK,8BACEzL,EAAOkI,iBAAiByE,mBAC3B3M,EAAOkI,iBAAiByE,iBAAmB,IAE7C3M,EAAOkI,iBAAiByE,iBAAiBC,UAAYnB,EACrD,MACF,IAAK,oBACEzL,EAAOkI,iBAAiB2E,aAC3B7M,EAAOkI,iBAAiB2E,WAAa,IAEvC7M,EAAOkI,iBAAiB2E,WAAWhE,MAAQ4C,EAC3C,MACF,IAAK,uBACEzL,EAAOkI,iBAAiB2E,aAC3B7M,EAAOkI,iBAAiB2E,WAAa,IAEvC7M,EAAOkI,iBAAiB2E,WAAW7D,SAAWyC,EAC9C,MACF,IAAK,qBAIH,IAHKzL,EAAOkI,iBAAiB4E,SAC3B9M,EAAOkI,iBAAiB4E,OAAS,IAE5B9M,EAAOkI,iBAAiB4E,OAAO3I,OAAS,GAC7CnE,EAAOkI,iBAAiB4E,OAAOjJ,KAAK,IAEtC7D,EAAOkI,iBAAiB4E,OAAO,GAAG9D,SAAWyC,EAC7C,MACF,IAAK,oBAIH,IAHKzL,EAAOkI,iBAAiB4E,SAC3B9M,EAAOkI,iBAAiB4E,OAAS,IAE5B9M,EAAOkI,iBAAiB4E,OAAO3I,OAAS,GAC7CnE,EAAOkI,iBAAiB4E,OAAOjJ,KAAK,IAEtC7D,EAAOkI,iBAAiB4E,OAAO,GAAGpH,QAAU+F,EAC5C,MACF,IAAK,oBAIH,IAHKzL,EAAOkI,iBAAiB4E,SAC3B9M,EAAOkI,iBAAiB4E,OAAS,IAE5B9M,EAAOkI,iBAAiB4E,OAAO3I,OAAS,GAC7CnE,EAAOkI,iBAAiB4E,OAAOjJ,KAAK,IAEtC7D,EAAOkI,iBAAiB4E,OAAO,GAAGnH,QAAU8F,EAC5C,MACF,IAAK,qBAIH,IAHKzL,EAAOkI,iBAAiB4E,SAC3B9M,EAAOkI,iBAAiB4E,OAAS,IAE5B9M,EAAOkI,iBAAiB4E,OAAO3I,OAAS,GAC7CnE,EAAOkI,iBAAiB4E,OAAOjJ,KAAK,IAEtC7D,EAAOkI,iBAAiB4E,OAAO,GAAGlH,SAAW6F,EAC7C,MACF,IAAK,qBAIH,IAHKzL,EAAOkI,iBAAiB4E,SAC3B9M,EAAOkI,iBAAiB4E,OAAS,IAE5B9M,EAAOkI,iBAAiB4E,OAAO3I,OAAS,GAC7CnE,EAAOkI,iBAAiB4E,OAAOjJ,KAAK,IAEtC7D,EAAOkI,iBAAiB4E,OAAO,GAAG9D,SAAWyC,EAC7C,MACF,IAAK,oBAIH,IAHKzL,EAAOkI,iBAAiB4E,SAC3B9M,EAAOkI,iBAAiB4E,OAAS,IAE5B9M,EAAOkI,iBAAiB4E,OAAO3I,OAAS,GAC7CnE,EAAOkI,iBAAiB4E,OAAOjJ,KAAK,IAEtC7D,EAAOkI,iBAAiB4E,OAAO,GAAGpH,QAAU+F,EAC5C,MACF,IAAK,oBAIH,IAHKzL,EAAOkI,iBAAiB4E,SAC3B9M,EAAOkI,iBAAiB4E,OAAS,IAE5B9M,EAAOkI,iBAAiB4E,OAAO3I,OAAS,GAC7CnE,EAAOkI,iBAAiB4E,OAAOjJ,KAAK,IAEtC7D,EAAOkI,iBAAiB4E,OAAO,GAAGnH,QAAU8F,EAC5C,MACF,IAAK,qBAIH,IAHKzL,EAAOkI,iBAAiB4E,SAC3B9M,EAAOkI,iBAAiB4E,OAAS,IAE5B9M,EAAOkI,iBAAiB4E,OAAO3I,OAAS,GAC7CnE,EAAOkI,iBAAiB4E,OAAOjJ,KAAK,IAEtC7D,EAAOkI,iBAAiB4E,OAAO,GAAGlH,SAAW6F,EAC7C,MACF,IAAK,oBACEzL,EAAOkI,iBAAiB6E,WAC3B/M,EAAOkI,iBAAiB6E,SAAW,IAErC/M,EAAOkI,iBAAiB6E,SAASrH,QAAU+F,EAC3C,MACF,IAAK,oBACEzL,EAAOkI,iBAAiB6E,WAC3B/M,EAAOkI,iBAAiB6E,SAAW,IAErC/M,EAAOkI,iBAAiB6E,SAASpH,QAAU8F,EAC3C,MACF,IAAK,qBACEzL,EAAOkI,iBAAiB6E,WAC3B/M,EAAOkI,iBAAiB6E,SAAW,IAErC/M,EAAOkI,iBAAiB6E,SAASnH,SAAW6F,EAC5C,MACF,IAAK,sBACEzL,EAAOkI,iBAAiB6E,WAC3B/M,EAAOkI,iBAAiB6E,SAAW,IAErC/M,EAAOkI,iBAAiB6E,SAASlH,UAAY4F,EAC7C,MACF,QACE/M,MAAM,sBAAwB2M,EAAQ/D,UAG5C,IAAMgB,EAAU,EAAKC,aAAa3K,EAAIoC,EAAQkK,GAC9C,EAAK8C,MAAQ,CACXhN,SACAsI,UACA5H,gB,mCAKO9C,EAAIoC,EAAQkK,GACvB,IAAM+C,EAAY,GACZC,EAAU,GACVC,EAAW,GACXC,EAAa,GACbC,EAAqB,GACrBC,EAAS,GACTC,EAAU,GACVpD,EAASqD,MACTC,EAAUD,MACVE,EAAYF,MACdG,EAAS,EAEPC,EAAY,SAACC,EAAIC,EAAIC,EAAIC,EAAI/D,GACjCgD,EAAUpJ,KAAV,MAAAoJ,EAAS,YAASY,GAAT,mBAAgBC,GAAhB,YAAuBC,GAAvB,YAA8BC,KACvCT,EAAQ1J,KAAK8J,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAAGA,EAAS,GAClFA,GAAU,GAEN3N,EAAO8H,gBAAgB4D,cAAgB1L,EAAO8H,gBAAgB6D,eAAiB3L,EAAO8H,gBAAgB8D,mBACxG4B,IAAcC,EAASK,EAAID,GAC3BL,IAAcE,EAAWM,EAAIH,GAEzB7N,EAAO8H,gBAAgB4D,eACzB8B,IAAWrD,EAAQsD,EAASC,GAC5BF,IAAerD,EAAQA,GACvB+C,EAAQrJ,KAAR,MAAAqJ,EAAO,YAAS/C,GAAT,mBAAoBA,GAApB,YAA+BA,GAA/B,YAA0CA,MAG/CnK,EAAO8H,gBAAgB6D,gBACzB6B,IAAeC,EAASA,GACxBN,EAAStJ,KAAT,MAAAsJ,EAAQ,YAASM,GAAT,mBAAqBA,GAArB,YAAiCA,GAAjC,YAA6CA,MAGnDzN,EAAO8H,gBAAgB8D,kBACzB4B,IAAeE,EAAWA,GAC1BN,EAAWvJ,KAAX,MAAAuJ,EAAU,YAASM,GAAT,mBAAuBA,GAAvB,YAAqCA,GAArC,YAAmDA,OAI7D1N,EAAO8H,gBAAgB+D,oBACzBwB,EAAmBxJ,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAG3C7D,EAAO8H,gBAAgBG,aACzBqF,EAAOzJ,KAAP,MAAAyJ,EAAM,YAASrD,EAAQpB,OAAjB,mBAA2BoB,EAAQpB,OAAnC,YAA6CoB,EAAQpB,OAArD,YAA+DoB,EAAQpB,UAkE3EoF,EAAU,SAAChJ,EAAUiJ,EAAMjE,GAC/B,OAAQiE,EAAK/J,QACX,KAAK,GAhEW,SAAC0J,EAAIC,EAAIC,EAAI9D,GAC/BgD,EAAUpJ,KAAV,MAAAoJ,EAAS,YAASY,GAAT,mBAAgBC,GAAhB,YAAuBC,KAChCR,EAAQ1J,KAAK8J,EAAS,EAAGA,EAAS,EAAGA,EAAS,GAC9CA,GAAU,GAEN3N,EAAO8H,gBAAgB4D,cAAgB1L,EAAO8H,gBAAgB6D,eAAiB3L,EAAO8H,gBAAgB8D,mBACxG4B,IAAcC,EAASK,EAAID,GAC3BL,IAAcE,EAAWK,EAAIF,GAEzB7N,EAAO8H,gBAAgB4D,eACzB8B,IAAWrD,EAAQsD,EAASC,GAC5BF,IAAerD,EAAQA,GACvB+C,EAAQrJ,KAAR,MAAAqJ,EAAO,YAAS/C,GAAT,mBAAoBA,GAApB,YAA+BA,MAGpCnK,EAAO8H,gBAAgB6D,gBACzB6B,IAAeC,EAASA,GACxBN,EAAStJ,KAAT,MAAAsJ,EAAQ,YAASM,GAAT,mBAAqBA,GAArB,YAAiCA,MAGvCzN,EAAO8H,gBAAgB8D,kBACzB4B,IAAeE,EAAWA,GAC1BN,EAAWvJ,KAAX,MAAAuJ,EAAU,YAASM,GAAT,mBAAuBA,GAAvB,YAAqCA,OAI/C1N,EAAO8H,gBAAgBG,aACzBqF,EAAOzJ,KAAP,MAAAyJ,EAAM,YAASrD,EAAQpB,OAAjB,mBAA2BoB,EAAQpB,OAAnC,YAA6CoB,EAAQpB,SAsCzDsF,CAAYlJ,EAASiJ,EAAK,IAAKjJ,EAASiJ,EAAK,IAAKjJ,EAASiJ,EAAK,IAAKjE,GACrE,MACF,KAAK,EACH2D,EAAU3I,EAASiJ,EAAK,IAAKjJ,EAASiJ,EAAK,IAAKjJ,EAASiJ,EAAK,IAAKjJ,EAASiJ,EAAK,IAAKjE,GACtF,MACF,KAAK,GAvCW,SAAC4D,EAAIC,EAAIC,EAAIC,EAAII,EAAInE,GACvCgD,EAAUpJ,KAAV,MAAAoJ,EAAS,YAASY,GAAT,mBAAgBC,GAAhB,YAAuBC,GAAvB,YAA8BC,GAA9B,YAAqCI,KAC9Cb,EAAQ1J,KAAK8J,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAAGA,EAAS,GACtHA,GAAU,GAEN3N,EAAO8H,gBAAgB4D,cAAgB1L,EAAO8H,gBAAgB6D,eAAiB3L,EAAO8H,gBAAgB8D,mBACxG4B,IAAcC,EAASK,EAAID,GAC3BL,IAAcE,EAAWU,EAAIP,GAEzB7N,EAAO8H,gBAAgB4D,eACzB8B,IAAWrD,EAAQsD,EAASC,GAC5BF,IAAerD,EAAQA,GACvB+C,EAAQrJ,KAAR,MAAAqJ,EAAO,YAAS/C,GAAT,mBAAoBA,GAApB,YAA+BA,GAA/B,YAA0CA,GAA1C,YAAqDA,MAG1DnK,EAAO8H,gBAAgB6D,gBACzB6B,IAAeC,EAASA,GACxBN,EAAStJ,KAAT,MAAAsJ,EAAQ,YAASM,GAAT,mBAAqBA,GAArB,YAAiCA,GAAjC,YAA6CA,GAA7C,YAAyDA,MAG/DzN,EAAO8H,gBAAgB8D,kBACzB4B,IAAeE,EAAWA,GAC1BN,EAAWvJ,KAAX,MAAAuJ,EAAU,YAASM,GAAT,mBAAuBA,GAAvB,YAAqCA,GAArC,YAAmDA,GAAnD,YAAiEA,OAI3E1N,EAAO8H,gBAAgBG,aACzBqF,EAAOzJ,KAAP,MAAAyJ,EAAM,YAASrD,EAAQpB,OAAjB,mBAA2BoB,EAAQpB,OAAnC,YAA6CoB,EAAQpB,OAArD,YAA+DoB,EAAQpB,OAAvE,YAAiFoB,EAAQpB,SAa7FwF,CAAYpJ,EAASiJ,EAAK,IAAKjJ,EAASiJ,EAAK,IAAKjJ,EAASiJ,EAAK,IAAKjJ,EAASiJ,EAAK,IAAKjJ,EAASiJ,EAAK,IAAKjE,GAC3G,MACF,QACEvL,MAAM,cAAgBwP,EAAK/J,OAAS,iCAgB1C+F,EAAS,CAAE0D,YAAWU,SAZL,SAACrJ,EAAUC,EAAO+E,GACjC,IAAK,IAAI3F,EAAI,EAAGA,EAAIY,EAAMf,OAAQG,IAAK,CACrC,IAAIiK,EAAS,GACTtE,GACEA,EAAQqD,SACViB,EAAO1F,MAAQoB,EAAQqD,OAAOhJ,EAAI2F,EAAQqD,OAAOnJ,SAGrD8J,EAAQhJ,EAAUC,EAAMZ,GAAIiK,OAMhC,IAAMC,EAAiB5Q,EAAGgM,eAC1BhM,EAAG+K,WAAW/K,EAAGgL,aAAc4F,GAC/B5Q,EAAGiM,WAAWjM,EAAGgL,aAAc,IAAIkB,aAAamD,GAAYrP,EAAGmM,aAE/D,IAAM0E,EAAc7Q,EAAGgM,eACvBhM,EAAG+K,WAAW/K,EAAG8Q,qBAAsBD,GACvC7Q,EAAGiM,WAAWjM,EAAG8Q,qBAAsB,IAAIC,YAAYpB,GAAU3P,EAAGmM,aAEpE,IAAMzB,EAAU,CAAEU,SAAUwF,EAAgBjB,QAASkB,EAAaG,YAAarB,EAAQpJ,QAEvF,GAAInE,EAAO8H,gBAAgB4D,aAAc,CACvC,IAAMmD,EAAejR,EAAGgM,eACxBhM,EAAG+K,WAAW/K,EAAGgL,aAAciG,GAC/BjR,EAAGiM,WAAWjM,EAAGgL,aAAc,IAAIkB,aAAaoD,GAAUtP,EAAGmM,aAC7DzB,EAAQ6B,OAAS0E,EAGnB,GAAI7O,EAAO8H,gBAAgB6D,cAAe,CACxC,IAAMmD,EAAgBlR,EAAGgM,eACzBhM,EAAG+K,WAAW/K,EAAGgL,aAAckG,GAC/BlR,EAAGiM,WAAWjM,EAAGgL,aAAc,IAAIkB,aAAaqD,GAAWvP,EAAGmM,aAC9DzB,EAAQmF,QAAUqB,EAGpB,GAAI9O,EAAO8H,gBAAgB8D,gBAAiB,CAC1C,IAAMmD,EAAkBnR,EAAGgM,eAC3BhM,EAAG+K,WAAW/K,EAAGgL,aAAcmG,GAC/BnR,EAAGiM,WAAWjM,EAAGgL,aAAc,IAAIkB,aAAasD,GAAaxP,EAAGmM,aAChEzB,EAAQoF,UAAYqB,EAGtB,GAAI/O,EAAO8H,gBAAgB+D,mBAAoB,CAC7C,IAAMmD,EAAqBpR,EAAGgM,eAC9BhM,EAAG+K,WAAW/K,EAAGgL,aAAcoG,GAC/BpR,EAAGiM,WAAWjM,EAAGgL,aAAc,IAAIkB,aAAauD,GAAqBzP,EAAGmM,aACxEzB,EAAQ2G,aAAeD,EAGzB,GAAIhP,EAAO8H,gBAAgBG,YAAa,CACtC,IAAMiH,EAActR,EAAGgM,eACvBhM,EAAG+K,WAAW/K,EAAGgL,aAAcsG,GAC/BtR,EAAGiM,WAAWjM,EAAGgL,aAAc,IAAIkB,aAAawD,GAAS1P,EAAGmM,aAC5DzB,EAAQO,MAAQqG,EAGlB,OAAO5G,I,iCAGE2B,GACT,GAAKA,EAAQ+C,MAAb,CADkB,IAKVpP,EAAyDqM,EAAzDrM,GAAIoP,EAAqD/C,EAArD+C,MAAO7E,EAA8C8B,EAA9C9B,iBAAkB4D,EAA4B9B,EAA5B8B,WAAYD,EAAgB7B,EAAhB6B,YACzC9L,EAA6BgN,EAA7BhN,OAAQsI,EAAqB0E,EAArB1E,QAAS5H,EAAYsM,EAAZtM,QAIjB7B,EAAOjB,EAAGkB,MAWlB,GAPElB,EAAG+K,WAAW/K,EAAGgL,aAAcN,EAAQU,UACvCpL,EAAGkL,oBAAoB9I,EAAO8H,gBAAgBC,eANxB,EAMuDlJ,GAJ3D,EACH,EACA,GAGfjB,EAAGmL,wBAAwB/I,EAAO8H,gBAAgBC,gBAGpDnK,EAAG+K,WAAW/K,EAAG8Q,qBAAsBpG,EAAQiF,SAE3CvN,EAAO8H,gBAAgB4D,aAAc,CACvC,IACM7M,EAAOjB,EAAGkB,MAIhBlB,EAAG+K,WAAW/K,EAAGgL,aAAcN,EAAQ6B,QACvCvM,EAAGkL,oBAAoB9I,EAAO8H,gBAAgB4D,aANxB,EAMqD7M,GAJzD,EACH,EACA,GAGfjB,EAAGmL,wBAAwB/I,EAAO8H,gBAAgB4D,cAGpD,GAAI1L,EAAO8H,gBAAgB6D,cAAe,CACxC,IACM9M,EAAOjB,EAAGkB,MAIhBlB,EAAG+K,WAAW/K,EAAGgL,aAAcN,EAAQmF,SACvC7P,EAAGkL,oBAAoB9I,EAAO8H,gBAAgB6D,cANxB,EAMsD9M,GAJ1D,EACH,EACA,GAGfjB,EAAGmL,wBAAwB/I,EAAO8H,gBAAgB6D,eAGpD,GAAI3L,EAAO8H,gBAAgB8D,gBAAiB,CAC1C,IACM/M,EAAOjB,EAAGkB,MAIhBlB,EAAG+K,WAAW/K,EAAGgL,aAAcN,EAAQoF,WACvC9P,EAAGkL,oBAAoB9I,EAAO8H,gBAAgB8D,gBANxB,EAMwD/M,GAJ5D,EACH,EACA,GAGfjB,EAAGmL,wBAAwB/I,EAAO8H,gBAAgB8D,iBAGpD,GAAI5L,EAAO8H,gBAAgB+D,mBAAoB,CAC7C,IACMhN,EAAOjB,EAAGkB,MAIhBlB,EAAG+K,WAAW/K,EAAGgL,aAAcN,EAAQ2G,cACvCrR,EAAGkL,oBAAoB9I,EAAO8H,gBAAgB+D,mBANxB,EAM2DhN,GAJ/D,EACH,EACA,GAGfjB,EAAGmL,wBAAwB/I,EAAO8H,gBAAgB+D,oBAGpD,GAAI7L,EAAO8H,gBAAgBG,YAAa,CACtC,IACMpJ,EAAOjB,EAAGkB,MAIhBlB,EAAG+K,WAAW/K,EAAGgL,aAAcN,EAAQO,OACvCjL,EAAGkL,oBAAoB9I,EAAO8H,gBAAgBG,YANxB,EAMoDpJ,GAJxD,EACH,EACA,GAGfjB,EAAGmL,wBAAwB/I,EAAO8H,gBAAgBG,aAQpD,GALArK,EAAG4L,WAAWxJ,EAAO6H,SACrBjK,EAAG6L,iBAAiBzJ,EAAOkI,iBAAiBC,kBAAkB,EAAOA,GACrEvK,EAAG6L,iBAAiBzJ,EAAOkI,iBAAiB4D,aAAa,EAAOA,GAChElO,EAAG6L,iBAAiBzJ,EAAOkI,iBAAiB6D,YAAY,EAAOA,GAE3D/L,EAAOkI,iBAAiB8D,aAAc,CACxC,IAAMA,EAAezC,MACrBA,IAAYyC,EAAcF,GAC1BvC,IAAeyC,EAAcA,GAC7BpO,EAAG6L,iBAAiBzJ,EAAOkI,iBAAiB8D,cAAc,EAAOA,GA2BnE,GAxBIhM,EAAOkI,iBAAiBkE,gBAC1BxO,EAAGuR,UAAUnP,EAAOkI,iBAAiBkE,eAAgBnC,EAAQmC,gBAG3DpM,EAAOkI,iBAAiBmE,eAC1BzO,EAAGuR,UAAUnP,EAAOkI,iBAAiBmE,cAAepC,EAAQoC,eAG1DrM,EAAOkI,iBAAiBoE,UAC1B1O,EAAGuR,UAAUnP,EAAOkI,iBAAiBoE,SAAUrC,EAAQqC,UAGrDtM,EAAOkI,iBAAiBqE,qBAC1B3O,EAAGwR,UAAUpP,EAAOkI,iBAAiBqE,oBAAqBtC,EAAQsC,qBAGhEvM,EAAOkI,iBAAiBsE,eAC1B5O,EAAGuR,UAAUnP,EAAOkI,iBAAiBsE,cAAevC,EAAQuC,eAG1DxM,EAAOkI,iBAAiBwE,cAC1B9O,EAAGyR,WAAWrP,EAAOkI,iBAAiBwE,aAAczC,EAAQyC,cAG1D1M,EAAOkI,iBAAiByE,iBAAkB,CAC5C,IAAMC,EAAYY,IAAWvD,EAAQ0C,iBAAiBC,WACtDY,IAAeZ,EAAWA,GAC1BhP,EAAGyR,WAAWrP,EAAOkI,iBAAiByE,iBAAiB9D,MAAOoB,EAAQ0C,iBAAiB9D,OACvFjL,EAAGyR,WAAWrP,EAAOkI,iBAAiByE,iBAAiBC,UAAWA,GAQpE,GALI5M,EAAOkI,iBAAiB2E,aAC1BjP,EAAGyR,WAAWrP,EAAOkI,iBAAiB2E,WAAWhE,MAAOoB,EAAQ4C,WAAWhE,OAC3EjL,EAAGyR,WAAWrP,EAAOkI,iBAAiB2E,WAAW7D,SAAUiB,EAAQ4C,WAAW7D,WAG5EiB,EAAQ6C,OAEV,IADA,IAAMA,EAAS7C,EAAQ6C,OACdxI,EAAI,EAAGA,EAAIwI,EAAO3I,OAAQG,IAAK,CACtC,IAAMgL,EAAQxC,EAAOxI,GACrB1G,EAAGyR,WAAWrP,EAAOkI,iBAAiB4E,OAAOxI,GAAG0E,SAAUsG,EAAMtG,UAChEpL,EAAGyR,WAAWrP,EAAOkI,iBAAiB4E,OAAOxI,GAAGoB,QAAS4J,EAAM5J,SAC/D9H,EAAGyR,WAAWrP,EAAOkI,iBAAiB4E,OAAOxI,GAAGqB,QAAS2J,EAAM3J,SAC/D/H,EAAGyR,WAAWrP,EAAOkI,iBAAiB4E,OAAOxI,GAAGsB,SAAU0J,EAAM1J,UAIpE,GAAIqE,EAAQ8C,SAAU,CACpB,IAAMA,EAAW9C,EAAQ8C,SACzBnP,EAAGyR,WAAWrP,EAAOkI,iBAAiB6E,SAASrH,QAASqH,EAASrH,SACjE9H,EAAGyR,WAAWrP,EAAOkI,iBAAiB6E,SAASpH,QAASoH,EAASpH,SACjE/H,EAAGyR,WAAWrP,EAAOkI,iBAAiB6E,SAASnH,SAAUmH,EAASnH,UAClEhI,EAAGwR,UAAUpP,EAAOkI,iBAAiB6E,SAASlH,UAAWkH,EAASlH,WAGhE7F,EAAOkI,iBAAiBuE,gBAC1B7O,EAAGyR,WAAWrP,EAAOkI,iBAAiBuE,eAAgBxC,EAAQwC,gBAG5DzM,EAAOkI,iBAAiB+D,iBAC1BrO,EAAG2R,cAAc3R,EAAG4R,UACpB5R,EAAGgD,YAAYhD,EAAGiD,WAAYH,EAAQiF,SACtC/H,EAAGuR,UAAUnP,EAAOkI,iBAAiB+D,eAAgB,IAGnDjM,EAAOkI,iBAAiBgE,gBAC1BtO,EAAG2R,cAAc3R,EAAG6R,UACpB7R,EAAGgD,YAAYhD,EAAGiD,WAAYH,EAAQyJ,QACtCvM,EAAGuR,UAAUnP,EAAOkI,iBAAiBgE,cAAe,IAGlDlM,EAAOkI,iBAAiBiE,gBAC1BvO,EAAG2R,cAAc3R,EAAG8R,UACpB9R,EAAGgD,YAAYhD,EAAGiD,WAAYH,EAAQiB,QACtC/D,EAAGuR,UAAUnP,EAAOkI,iBAAiBiE,cAAe,IAIpD,IAAMyC,EAActG,EAAQsG,YACtB/P,EAAOjB,EAAG+R,eAEhB/R,EAAGgS,aAAahS,EAAGiS,UAAWjB,EAAa/P,EAD5B,Q,KC9iBNiR,E,YA9Bb,WAAYlS,EAAImS,EAAWzC,GAAS,IAAD,8BACjC,4CAAM1P,KACDA,GAAKA,EACV,EAAKoS,KAAO,EAAKA,KAAKtI,KAAV,gBACZ,EAAKuI,WAAW,CACdrS,KACAsM,SAAU,YAAmB,IAAhBoE,EAAe,EAAfA,SACLzJ,EAAQD,EAASmL,GACvBzB,EAASzJ,EAAMI,SAAUJ,EAAMK,MAAO,CAAEoI,YAE1CtN,OAAQ,CACNuK,OAAQ,8BACRI,SAAU,mCAZmB,E,kEAiB9BxC,EAAkB4D,EAAYD,EAAagB,EAAQC,GACtDvF,KAAK0I,WAAW,CACdtS,GAAI4J,KAAK5J,GACToP,MAAOxF,KAAKwF,MACZ7E,mBACA4D,aACAD,cACAgB,SACAC,iB,GA1BqB/C,GCwHZmG,E,WAtHb,aAAe,oBACb3I,KAAKC,UAAYD,KAAKC,UAAUC,KAAKF,MACrCA,KAAKG,UAAYH,KAAKG,UAAUD,KAAKF,M,sDAG7B5J,GACR,IAQMwS,EAAS,IAAIN,EAAalS,EAAI,OARpB,CACd,CAAC,EAAK,EAAK,GACX,CAAC,EAAK,EAAK,GACX,CAAC,EAAK,EAAK,GACX,CAAC,EAAK,EAAK,GACX,CAAC,EAAK,EAAK,GACX,CAAC,EAAK,EAAK,KAiBPyS,EAAU,IAAIP,EAAalS,EAAI,eAdrB,CACd,CAAC,EAAK,EAAK,GACX,CAAC,EAAK,EAAK,GACX,CAAC,EAAK,EAAK,GACX,CAAC,EAAK,EAAK,GACX,CAAC,EAAK,EAAK,GACX,CAAC,EAAK,EAAK,GACX,CAAC,EAAK,GAAK,GACX,CAAC,EAAK,EAAK,IACX,CAAC,EAAK,EAAK,IACX,CAAC,GAAK,EAAK,GACX,CAAC,EAAK,GAAK,GACX,CAAC,GAAK,EAAK,KAGb4J,KAAKgB,MAAQ,CACX8H,OAAQ,CACN,CACEtD,MAAOoD,EACP3E,SAAU,EAAE,IAAK,GAAM,GACvB8E,MAAO,CAAC,EAAK,EAAK,GAClBC,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,GAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,MAIb,CACE3D,MAAOqD,EACP5E,SAAU,CAAC,IAAK,GAAM,GACtB8E,MAAO,CAAC,IAAK,IAAK,KAClBC,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,GAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,OAKfC,OAAQ,CAAC,EAAK,EAAK,M,gCAIbhT,EAAI8K,GACZ,IAAMF,EAAQhB,KAAKgB,MAEnBnG,EAAYzE,GAEZ,IAAMqL,EAAc,GAAKzE,KAAK0E,GAAK,IAC7BC,EAASvL,EAAGwL,OAAOC,YAAczL,EAAGwL,OAAOE,aAG3CnB,EAAmBoB,MACzBA,IAAiBpB,EAAkBc,EAAaE,EAHlC,GACD,KAIb,IAAM4C,EAAaxC,MACnBA,IAAewC,EAAYA,EAAYvD,EAAMoI,QAC7CrH,IAAYwC,EAAYA,GAExB,IAAK,IAAIzH,EAAI,EAAGA,EAAIkE,EAAM8H,OAAOnM,OAAQG,IAAK,CAC5C,IAAMuM,EAAQrI,EAAM8H,OAAOhM,GAC3BkD,KAAKsJ,aAAa3I,EAAkB4D,EAAY8E,GAChDrJ,KAAKuJ,cAAcrI,EAAWmI,M,mCAIrB1I,EAAkB4D,EAAY8E,GACzC,IAAM7D,EAAQ6D,EAAM7D,MAEdlB,EAAcvC,MACpBA,IAAeuC,EAAaA,EAAa+E,EAAMpF,UAC3CoF,EAAMN,OACRhH,IAAWuC,EAAaA,EAAa+E,EAAMN,OAE7C,IAAK,IAAIjM,EAAI,EAAGA,EAAIuM,EAAML,UAAUrM,OAAQG,IAAK,CAC/C,IAAM0M,EAAWH,EAAML,UAAUlM,GACjCiF,IAAYuC,EAAaA,EAAakF,EAASP,MAAOO,EAASN,MAGjE1D,EAAMgD,KAAK7H,EAAkB4D,EAAYD,K,oCAG7BpD,EAAWmI,GACvB,IAAK,IAAIvM,EAAI,EAAGA,EAAIuM,EAAML,UAAUrM,OAAQG,IAAK,CAC/C,IAAM0M,EAAWH,EAAML,UAAUlM,GACjC0M,EAASP,OAAS/H,EAAYsI,EAASL,W,KCtE9BM,E,YA7Cb,WAAYrT,GAAK,IAAD,8BACd,4CAAMA,KACDA,GAAKA,EACV,EAAKoS,KAAO,EAAKA,KAAKtI,KAAV,gBACZ,EAAKuI,WAAW,CACdrS,KACAsM,SAAU,EAAKgH,UACfxQ,QAAS,CACPiF,QAAS,0BAEX3F,OAAQ,CACNuK,OAAQ,mCACRI,SAAU,wCAZA,E,kEAiBXxC,EAAkB4D,EAAYD,GACjCtE,KAAK0I,WAAW,CACdtS,GAAI4J,KAAK5J,GACToP,MAAOxF,KAAKwF,MACZ7E,mBACA4D,aACAD,kB,mCAIsB,IAAd8B,EAAa,EAAbA,UACJuD,EAAK,EAAE,GAAI,EAAG,GACdC,EAAK,CAAC,GAAI,EAAG,GACbC,EAAK,CAAC,EAAG,EAAG,GACZC,EAAK,EAAE,EAAG,EAAG,GACbC,EAAK,EAAE,GAAI,GAAI,GACfC,EAAK,CAAC,GAAI,GAAI,GACdC,EAAK,CAAC,EAAG,GAAI,GACbC,EAAK,EAAE,EAAG,GAAI,GACpB9D,EAAUuD,EAAIC,EAAIC,EAAIC,GACtB1D,EAAU4D,EAAID,EAAIG,EAAID,GACtB7D,EAAU2D,EAAIJ,EAAIG,EAAII,GACtB9D,EAAUwD,EAAII,EAAIC,EAAIJ,GACtBzD,EAAU2D,EAAIC,EAAIJ,EAAID,GACtBvD,EAAU6D,EAAIC,EAAIJ,EAAID,O,GA1CMrH,GC6EjB2H,E,WA1Eb,aAAe,oBACbnK,KAAKC,UAAYD,KAAKC,UAAUC,KAAKF,MACrCA,KAAKG,UAAYH,KAAKG,UAAUD,KAAKF,M,sDAG7B5J,GACR,IAAMoP,EAAQ,IAAIiE,EAAkBrT,GACpC4J,KAAKgB,MAAQ,CACX8H,OAAQ,CACN,CACEtD,QACAvB,SAAU,CAAC,EAAK,GAAM,GACtB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,GAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,OAKfC,OAAQ,CAAC,EAAK,EAAK,M,gCAIbhT,EAAI8K,GACZ,IAAMF,EAAQhB,KAAKgB,MAEnBnG,EAAYzE,GAEZ,IAAMqL,EAAc,GAAKzE,KAAK0E,GAAK,IAC7BC,EAASvL,EAAGwL,OAAOC,YAAczL,EAAGwL,OAAOE,aAG3CnB,EAAmBoB,MACzBA,IAAiBpB,EAAkBc,EAAaE,EAHlC,GACD,KAIb,IAAM4C,EAAaxC,MACnBA,IAAewC,EAAYA,EAAYvD,EAAMoI,QAC7CrH,IAAYwC,EAAYA,GAExB,IAAK,IAAIzH,EAAI,EAAGA,EAAIkE,EAAM8H,OAAOnM,OAAQG,IAAK,CAC5C,IAAMuM,EAAQrI,EAAM8H,OAAOhM,GAC3BkD,KAAKsJ,aAAa3I,EAAkB4D,EAAY8E,GAChDrJ,KAAKuJ,cAAcrI,EAAWmI,M,mCAIrB1I,EAAkB4D,EAAY8E,GACzC,IAAM7D,EAAQ6D,EAAM7D,MAEdlB,EAAcvC,MACpBA,IAAeuC,EAAaA,EAAa+E,EAAMpF,UAC/C,IAAK,IAAInH,EAAI,EAAGA,EAAIuM,EAAML,UAAUrM,OAAQG,IAAK,CAC/C,IAAM0M,EAAWH,EAAML,UAAUlM,GACjCiF,IAAYuC,EAAaA,EAAakF,EAASP,MAAOO,EAASN,MAGjE1D,EAAMgD,KAAK7H,EAAkB4D,EAAYD,K,oCAG7BpD,EAAWmI,GACvB,IAAK,IAAIvM,EAAI,EAAGA,EAAIuM,EAAML,UAAUrM,OAAQG,IAAK,CAC/C,IAAM0M,EAAWH,EAAML,UAAUlM,GACjC0M,EAASP,OAAS/H,EAAYsI,EAASL,W,KCf9BiB,E,YAxDb,WAAYhU,GAAK,IAAD,8BACd,4CAAMA,KACDA,GAAKA,EACV,EAAKoS,KAAO,EAAKA,KAAKtI,KAAV,gBACZ,EAAKuI,WAAW,CACdrS,KACAsM,SAAU,EAAKgH,UACfxQ,QAAS,CACPiF,QAAS,0BAEX3F,OAAQ,CACNuK,OAAQ,kCACRI,SAAU,uCAZA,E,kEAiBXxC,EAAkB4D,EAAYD,EAAaQ,GAC9C9E,KAAK0I,WAAW,CACdtS,GAAI4J,KAAK5J,GACToP,MAAOxF,KAAKwF,MACZ7E,mBACA4D,aACAD,cACAY,aAAc,CAAC,GAAK,GAAK,IACzBC,iBAAkB,CAChB9D,MAAO,CAAC,GAAK,GAAK,IAClB+D,UAAW,CAAC,EAAK,EAAK,IAExBC,WAAY,CACVhE,MAAO,CAAC,GAAK,GAAK,IAClBG,SAAU,CAAC,EAAK,EAAK,IAEvByD,eAAgB,CAAC,EAAK,EAAK,GAC3BH,e,mCAIsB,IAAdsB,EAAa,EAAbA,UACJuD,EAAK,EAAE,GAAI,EAAG,GACdC,EAAK,CAAC,GAAI,EAAG,GACbC,EAAK,CAAC,EAAG,EAAG,GACZC,EAAK,EAAE,EAAG,EAAG,GACbC,EAAK,EAAE,GAAI,GAAI,GACfC,EAAK,CAAC,GAAI,GAAI,GACdC,EAAK,CAAC,EAAG,GAAI,GACbC,EAAK,EAAE,EAAG,GAAI,GACpB9D,EAAUuD,EAAIC,EAAIC,EAAIC,GACtB1D,EAAU4D,EAAID,EAAIG,EAAID,GACtB7D,EAAU2D,EAAIJ,EAAIG,EAAII,GACtB9D,EAAUwD,EAAII,EAAIC,EAAIJ,GACtBzD,EAAU2D,EAAIC,EAAIJ,EAAID,GACtBvD,EAAU6D,EAAIC,EAAIJ,EAAID,O,GArDKrH,GCoFhB6H,E,WAjFb,aAAe,oBACbrK,KAAKC,UAAYD,KAAKC,UAAUC,KAAKF,MACrCA,KAAKG,UAAYH,KAAKG,UAAUD,KAAKF,M,sDAG7B5J,GACR,IAAMoP,EAAQ,IAAI4E,EAAiBhU,GACnC4J,KAAKgB,MAAQ,CACX8H,OAAQ,CACN,CACEtD,QACAvB,SAAU,EAAE,EAAK,GAAM,KACvBuF,SAAU,EACVc,cAAe,EACfxF,UAAU,GAEZ,CACEU,QACAvB,SAAU,CAAC,EAAK,GAAM,KACtBuF,SAAU,EACVc,cAAe,EACfxF,UAAU,IAGdsE,OAAQ,CAAC,EAAK,EAAK,GACnBmB,UAAW,CAAC,EAAK,EAAK,M,gCAIhBnU,EAAI8K,GACZ,IAAMF,EAAQhB,KAAKgB,MAEnBnG,EAAYzE,GAEZ,IAAMqL,EAAc,GAAKzE,KAAK0E,GAAK,IAC7BC,EAASvL,EAAGwL,OAAOC,YAAczL,EAAGwL,OAAOE,aAG3CnB,EAAmBoB,MACzBA,IAAiBpB,EAAkBc,EAAaE,EAHlC,GACD,KAIb,IAAM4C,EAAaxC,MACnBA,IAAewC,EAAYA,EAAYvD,EAAMoI,QAC7CrH,IAAYwC,EAAYA,GAExB,IAAK,IAAIzH,EAAI,EAAGA,EAAIkE,EAAM8H,OAAOnM,OAAQG,IAAK,CAC5C,IAAMuM,EAAQrI,EAAM8H,OAAOhM,GAC3BkD,KAAKsJ,aAAa3I,EAAkB4D,EAAY8E,GAChDrJ,KAAKuJ,cAAcrI,EAAWmI,GAG5BrI,EAAMoI,OAAO,GAAK,IACpBpI,EAAMoI,OAAO,GAAK,GAClBpI,EAAMuJ,UAAU,IAAM,GACbvJ,EAAMoI,OAAO,GAAK,IAC3BpI,EAAMoI,OAAO,GAAK,EAClBpI,EAAMuJ,UAAU,GAAK,GAGvBvJ,EAAMoI,OAAO,IAAMpI,EAAMuJ,UAAU,GAAKrJ,EACxCF,EAAMoI,OAAO,IAAMpI,EAAMuJ,UAAU,GAAKrJ,EACxCF,EAAMoI,OAAO,IAAMpI,EAAMuJ,UAAU,GAAKrJ,I,mCAG7BP,EAAkB4D,EAAY8E,GACzC,IAAM7D,EAAQ6D,EAAM7D,MAEdlB,EAAcvC,MACpBA,IAAeuC,EAAaA,EAAa+E,EAAMpF,UAC/ClC,IAAYuC,EAAaA,EAAa+E,EAAMG,SAAU,CAAC,EAAG,EAAG,IAC7DzH,IAAYuC,EAAaA,EAA8B,GAAjB+E,EAAMG,SAAgB,CAAC,EAAG,EAAG,IACnEzH,IAAYuC,EAAaA,EAA8B,GAAjB+E,EAAMG,SAAgB,CAAC,EAAG,EAAG,IAEnEhE,EAAMgD,KAAK7H,EAAkB4D,EAAYD,EAAa+E,EAAMvE,Y,oCAGhD5D,EAAWmI,GACvBA,EAAMG,UAAYtI,EAAYmI,EAAMiB,kB,KCkJzBE,E,WAhOb,WAAYpU,EAAIqU,GAAO,oBACrBzK,KAAK5J,GAAKA,EACV4J,KAAKyK,KAAOA,EACZzK,KAAKwI,KAAOxI,KAAKwI,KAAKtI,KAAKF,MAC3B,IAAMpJ,EAAgBoJ,KAAK0K,aAAatU,GACxC4J,KAAKwF,MAAQ,CACXnF,QAASzJ,EACT0J,gBAAiB,CACfC,eAAgBnK,EAAGoK,kBAAkB5J,EAAe,mBACpD6J,YAAarK,EAAGoK,kBAAkB5J,EAAe,iBAEnD8J,iBAAkB,CAChBC,iBAAkBvK,EAAGwK,mBAAmBhK,EAAe,qBACvDiK,gBAAiBzK,EAAGwK,mBAAmBhK,EAAe,qBAExDkK,QAASd,KAAKe,aAAa3K,EAAIqU,I,mDAI5BA,GACLzK,KAAK2K,aAAa3K,KAAK5J,GAAI4J,KAAKwF,MAAM1E,SACtCd,KAAKyK,KAAOA,EACZzK,KAAKwF,MAAM1E,QAAUd,KAAKe,aAAaf,KAAK5J,GAAIqU,K,2BAG7C9J,EAAkB4D,EAAYD,GACjC,IAAMlO,EAAK4J,KAAK5J,GACVoP,EAAQxF,KAAKwF,MACX1E,EAAYd,KAAKwF,MAAjB1E,QAIAzJ,EAAOjB,EAAGkB,MAIhBlB,EAAG+K,WAAW/K,EAAGgL,aAAcN,EAAQU,UACvCpL,EAAGkL,oBAAoBkE,EAAMlF,gBAAgBC,eANvB,EAMsDlJ,GAJ1D,EACH,EACA,GAGfjB,EAAGmL,wBAAwBiE,EAAMlF,gBAAgBC,gBAIjD,IACMlJ,EAAOjB,EAAGkB,MAIhBlB,EAAG+K,WAAW/K,EAAGgL,aAAcN,EAAQO,OACvCjL,EAAGkL,oBAAoBkE,EAAMlF,gBAAgBG,YANvB,EAMmDpJ,GAJvD,EACH,EACA,GAGfjB,EAAGmL,wBAAwBiE,EAAMlF,gBAAgBG,aAGnDrK,EAAG+K,WAAW/K,EAAG8Q,qBAAsBpG,EAAQiF,SAE/C,IAAMlF,EAAkBkB,MACxBA,IAAclB,EAAiB0D,EAAYD,GAE3ClO,EAAG4L,WAAWwD,EAAMnF,SACpBjK,EAAG6L,iBAAiBuD,EAAM9E,iBAAiBC,kBAAkB,EAAOA,GACpEvK,EAAG6L,iBAAiBuD,EAAM9E,iBAAiBG,iBAAiB,EAAOA,GAGjE,IAAMuG,EAActG,EAAQsG,YACtB/P,EAAOjB,EAAGwU,aAEhBxU,EAAGgS,aAAahS,EAAGiS,UAAWjB,EAAa/P,EAD5B,K,mCAKNjB,GAwBX,OAAOD,EAAkBC,EAvBX,yVAeA,iH,mCAWHA,EAAIqU,GA2Ef,IA1EA,IAAMhF,EAAY,GACZK,EAAS,GACTC,EAAU,GACZI,EAAS,EAEP0E,EAAc,SAACC,EAAMC,EAAOC,EAAKC,EAAQC,EAAM7J,GACnDoE,EAAUpJ,KAENyO,EAAME,EAAKE,EACXH,EAAOC,EAAKE,EACZH,EAAOE,EAAQC,EACfJ,EAAMG,EAAQC,GAElBnF,EAAQ1J,KAEJ8J,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAAGA,EAAS,GAEzEA,GAAU,EACV,IAAK,IAAIrJ,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIqO,EAAI,EAAGA,EAAI,EAAGA,IACrBrF,EAAOzJ,KAAKgF,EAAM8J,KAKlBC,EAAc,SAACN,EAAMC,EAAOC,EAAKC,EAAQC,EAAM7J,GACnDoE,EAAUpJ,KAENyO,EAAMI,EAAMF,EACZD,EAAOG,EAAMF,EACbD,EAAOG,EAAMD,EACbH,EAAMI,EAAMD,GAEhBlF,EAAQ1J,KAEJ8J,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAAGA,EAAS,GAEzEA,GAAU,EACV,IAAK,IAAIrJ,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIqO,EAAI,EAAGA,EAAI,EAAGA,IACrBrF,EAAOzJ,KAAKgF,EAAM8J,KAKlBE,EAAc,SAACP,EAAMC,EAAOC,EAAKC,EAAQC,EAAM7J,GACnDoE,EAAUpJ,KAEN6O,EAAMJ,EAAME,EACZE,EAAMH,EAAOC,EACbE,EAAMH,EAAOE,EACbC,EAAMJ,EAAMG,GAEhBlF,EAAQ1J,KAEJ8J,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAAGA,EAAS,EAAGA,EAAS,GAEzEA,GAAU,EACV,IAAK,IAAIrJ,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIqO,EAAI,EAAGA,EAAI,EAAGA,IACrBrF,EAAOzJ,KAAKgF,EAAM8J,KAKlBG,EAAa,CAAC,GAAI,GAAI,GAAI,GAC1BC,EAAe,CAAC,GAAI,GAAI,GAAI,GAC5BC,EAAgB,CAAC,GAAI,EAAG,GAAI,GAC5BC,EAAmB,CAAC,EAAG,GAAI,EAAG,GAC9BC,EAAiB,CAAC,GAAI,EAAG,EAAG,GAC5BC,EAAkB,CAAC,EAAG,EAAI,GAAI,GAE9BC,GAASnB,EAAKvQ,MAAQ,EACtB2R,GAASpB,EAAKtQ,OAAS,EACpBsB,EAAI,EAAGA,EAAIgP,EAAKtQ,OAAQsB,IAC/B,IAAK,IAAID,EAAI,EAAGA,EAAIiP,EAAKvQ,MAAOsB,IAAK,CACnC,IAAMsP,EAAOtP,EAAIoQ,EACXb,EAAQD,EAAO,EACfE,EAAMvP,EAAIoQ,EACVZ,EAASD,EAAM,EAEG,IAApBP,EAAK3O,KAAKL,GAAGD,GACfqP,EAAYC,EAAMC,EAAOC,EAAKC,EAAQ,EAAKK,IAE3CT,EAAYC,EAAMC,EAAOC,EAAKC,EAAQ,EAAKM,GAEjC,IAAN9P,GAAmC,IAAxBgP,EAAK3O,KAAKL,EAAI,GAAGD,IAC9B4P,EAAYN,EAAMC,EAAO,EAAK,EAAKC,EAAKQ,GAGhC,IAANhQ,GAAmC,IAAxBiP,EAAK3O,KAAKL,GAAGD,EAAI,IAC9B6P,EAAYJ,EAAQD,EAAK,EAAK,EAAKF,EAAMY,GAGvCjQ,IAAMgP,EAAKtQ,OAAS,GAA6B,IAAxBsQ,EAAK3O,KAAKL,EAAI,GAAGD,IAC5C4P,EAAYL,EAAOD,EAAM,EAAK,EAAKG,EAAQQ,GAGzCjQ,IAAMiP,EAAKvQ,MAAQ,GAA6B,IAAxBuQ,EAAK3O,KAAKL,GAAGD,EAAI,IAC3C6P,EAAYL,EAAKC,EAAQ,EAAK,EAAKF,EAAOY,IAMlD,IAAM3E,EAAiB5Q,EAAGgM,eAC1BhM,EAAG+K,WAAW/K,EAAGgL,aAAc4F,GAC/B5Q,EAAGiM,WAAWjM,EAAGgL,aAAc,IAAIkB,aAAamD,GAAYrP,EAAGmM,aAE/D,IAAMmF,EAActR,EAAGgM,eACvBhM,EAAG+K,WAAW/K,EAAGgL,aAAcsG,GAC/BtR,EAAGiM,WAAWjM,EAAGgL,aAAc,IAAIkB,aAAawD,GAAS1P,EAAGmM,aAE5D,IAAM0E,EAAc7Q,EAAGgM,eAIvB,OAHAhM,EAAG+K,WAAW/K,EAAG8Q,qBAAsBD,GACvC7Q,EAAGiM,WAAWjM,EAAG8Q,qBAAsB,IAAI4E,YAAY/F,GAAU3P,EAAGmM,aAE7D,CAAEf,SAAUwF,EAAgB3F,MAAOqG,EAAa3B,QAASkB,EAAaG,YAAarB,EAAQpJ,U,mCAGvFvG,EAAI0K,GACf1K,EAAG2V,aAAajL,EAAQU,UACxBpL,EAAG2V,aAAajL,EAAQO,OACxBjL,EAAG2V,aAAajL,EAAQiF,a,KCrJbiG,E,WAtEb,aAAe,oBACbhM,KAAKC,UAAYD,KAAKC,UAAUC,KAAKF,MACrCA,KAAKG,UAAYH,KAAKG,UAAUD,KAAKF,MACrCA,KAAKiM,WAAa,E,sDAGV7V,GACR,IAAM8V,EAAwC,EAAjClP,KAAKE,MAAsB,GAAhBF,KAAKC,UAAqB,GAC5CwN,EAAO/O,EAAawQ,EAAMA,GAC1B1G,EAAQ,IAAIgF,EAAUpU,EAAIqU,GAChCzK,KAAKgB,MAAQ,CACX8H,OAAQ,CACN,CACEtD,QACAvB,SAAU,CAAC,EAAK,GAAM,EAAMiI,GAC5B1C,SAAU,CAAEP,MAAO,EAAKC,KAAM,CAAC,EAAG,EAAG,GAAIC,MAAO,MAGpDC,OAAQ,CAAC,EAAK,EAAK,GACnBmB,UAAW,CAAC,EAAK,EAAK,M,gCAIhBnU,EAAI8K,GACZ,IAAMF,EAAQhB,KAAKgB,MAEnBnG,EAAYzE,GAEZ,IAAMqL,EAAc,GAAKzE,KAAK0E,GAAK,IAC7BC,EAASvL,EAAGwL,OAAOC,YAAczL,EAAGwL,OAAOE,aAG3CnB,EAAmBoB,MACzBA,IAAiBpB,EAAkBc,EAAaE,EAHlC,GACD,KAIb,IAAM4C,EAAaxC,MACnBA,IAAewC,EAAYA,EAAYvD,EAAMoI,QAC7CrH,IAAYwC,EAAYA,GAExB,IAAK,IAAIzH,EAAI,EAAGA,EAAIkE,EAAM8H,OAAOnM,OAAQG,IAAK,CAC5C,IAAMuM,EAAQrI,EAAM8H,OAAOhM,GAC3BkD,KAAKsJ,aAAa3I,EAAkB4D,EAAY8E,GAChDrJ,KAAKuJ,cAAcrI,EAAWmI,M,mCAIrB1I,EAAkB4D,EAAY8E,GACzC,IAAM7D,EAAQ6D,EAAM7D,MAEdlB,EAAcvC,MACpBA,IAAeuC,EAAaA,EAAa+E,EAAMpF,UAC/ClC,IAAYuC,EAAaA,GAA+B,IVvDjDtH,KAAK0E,GACS,KUsDwC,CAAC,EAAG,EAAG,IACpEK,IAAYuC,EAAaA,EAAa+E,EAAMG,SAASP,MAAOI,EAAMG,SAASN,MAE3E1D,EAAMgD,KAAK7H,EAAkB4D,EAAYD,K,oCAG7BpD,EAAWmI,GAGvB,GAFAA,EAAMG,SAASP,OAAS/H,EAAYmI,EAAMG,SAASL,MACnDnJ,KAAKiM,YAAc/K,EACflB,KAAKiM,YAAc,GAAM,CAC3BjM,KAAKiM,YAAc,GACnB,IAAMC,EAAwC,EAAjClP,KAAKE,MAAsB,GAAhBF,KAAKC,UAAqB,GAC5CwN,EAAO/O,EAAawQ,EAAMA,GAChC7C,EAAMpF,SAAS,IAAM,EAAMiI,EAC3B7C,EAAM7D,MAAM2G,OAAO1B,Q,KCNV2B,E,YA7Db,WAAYhW,GAAK,IAAD,8BACd,4CAAMA,KACDA,GAAKA,EACV,EAAKoS,KAAO,EAAKA,KAAKtI,KAAV,gBACZ,EAAKuI,WAAW,CACdrS,KACAsM,SAAU,EAAKgH,UACfxQ,QAAS,CACPiF,QAAS,sCACTwE,OAAQ,mCACRxI,OAAQ,oCAEV3B,OAAQ,CACNuK,OAAQ,gCACRI,SAAU,qCAdA,E,kEAmBXxC,EAAkB4D,EAAYD,GACjCtE,KAAK0I,WAAW,CACdtS,GAAI4J,KAAK5J,GACToP,MAAOxF,KAAKwF,MACZ7E,mBACA4D,aACAD,cACAM,eAAgB,EAChBC,cAAe,EACfE,oBAAqB,IACrBC,cAAe,GACfE,aAAc,CAAC,GAAK,GAAK,IACzBC,iBAAkB,CAChB9D,MAAO,CAAC,GAAK,GAAK,IAClB+D,UAAW,CAAC,GAAM,EAAK,IAEzBC,WAAY,CACVhE,MAAO,CAAC,EAAK,EAAK,GAClBG,SAAU,CAAC,EAAK,EAAK,IAEvByD,eAAgB,CAAC,EAAK,EAAK,O,mCAIL,IAAdmB,EAAa,EAAbA,UACJuD,EAAK,EAAE,GAAI,EAAG,GACdC,EAAK,CAAC,GAAI,EAAG,GACbC,EAAK,CAAC,EAAG,EAAG,GACZC,EAAK,EAAE,EAAG,EAAG,GACbC,EAAK,EAAE,GAAI,GAAI,GACfC,EAAK,CAAC,GAAI,GAAI,GACdC,EAAK,CAAC,EAAG,GAAI,GACbC,EAAK,EAAE,EAAG,GAAI,GACpB9D,EAAUuD,EAAIC,EAAIC,EAAIC,GACtB1D,EAAU4D,EAAID,EAAIG,EAAID,GACtB7D,EAAU2D,EAAIJ,EAAIG,EAAII,GACtB9D,EAAUwD,EAAII,EAAIC,EAAIJ,GACtBzD,EAAU2D,EAAIC,EAAIJ,EAAID,GACtBvD,EAAU6D,EAAIC,EAAIJ,EAAID,O,GA1DGrH,GC6Ed6J,E,WA1Eb,aAAe,oBACbrM,KAAKC,UAAYD,KAAKC,UAAUC,KAAKF,MACrCA,KAAKG,UAAYH,KAAKG,UAAUD,KAAKF,M,sDAG7B5J,GACR,IAAMoP,EAAQ,IAAI4G,EAAehW,GACjC4J,KAAKgB,MAAQ,CACX8H,OAAQ,CACN,CACEtD,QACAvB,SAAU,CAAC,EAAK,GAAM,KACtB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,OAKfC,OAAQ,CAAC,EAAK,EAAK,M,gCAIbhT,EAAI8K,GACZ,IAAMF,EAAQhB,KAAKgB,MAEnBnG,EAAYzE,GAEZ,IAAMqL,EAAc,GAAKzE,KAAK0E,GAAK,IAC7BC,EAASvL,EAAGwL,OAAOC,YAAczL,EAAGwL,OAAOE,aAG3CnB,EAAmBoB,MACzBA,IAAiBpB,EAAkBc,EAAaE,EAHlC,GACD,KAIb,IAAM4C,EAAaxC,MACnBA,IAAewC,EAAYA,EAAYvD,EAAMoI,QAC7CrH,IAAYwC,EAAYA,GAExB,IAAK,IAAIzH,EAAI,EAAGA,EAAIkE,EAAM8H,OAAOnM,OAAQG,IAAK,CAC5C,IAAMuM,EAAQrI,EAAM8H,OAAOhM,GAC3BkD,KAAKsJ,aAAa3I,EAAkB4D,EAAY8E,GAChDrJ,KAAKuJ,cAAcrI,EAAWmI,M,mCAIrB1I,EAAkB4D,EAAY8E,GACzC,IAAM7D,EAAQ6D,EAAM7D,MAEdlB,EAAcvC,MACpBA,IAAeuC,EAAaA,EAAa+E,EAAMpF,UAC/C,IAAK,IAAInH,EAAI,EAAGA,EAAIuM,EAAML,UAAUrM,OAAQG,IAAK,CAC/C,IAAM0M,EAAWH,EAAML,UAAUlM,GACjCiF,IAAYuC,EAAaA,EAAakF,EAASP,MAAOO,EAASN,MAGjE1D,EAAMgD,KAAK7H,EAAkB4D,EAAYD,K,oCAG7BpD,EAAWmI,GACvB,IAAK,IAAIvM,EAAI,EAAGA,EAAIuM,EAAML,UAAUrM,OAAQG,IAAK,CAC/C,IAAM0M,EAAWH,EAAML,UAAUlM,GACjC0M,EAASP,OAAS/H,EAAYsI,EAASL,W,KCxC9BmD,E,YA9Bb,WAAYlW,EAAImS,GAAY,IAAD,8BACzB,4CAAMnS,KACDA,GAAKA,EACV,EAAKoS,KAAO,EAAKA,KAAKtI,KAAV,gBACZ,EAAKuI,WAAW,CACdrS,KACAsM,SAAU,YAAmB,IAAhBoE,EAAe,EAAfA,SACLzJ,EAAQD,EAASmL,GACvBzB,EAASzJ,EAAMI,SAAUJ,EAAMK,QAEjClF,OAAQ,CACNuK,OAAQ,+BACRI,SAAU,oCAZW,E,kEAiBtBxC,EAAkB4D,EAAYD,EAAagB,EAAQC,GACtDvF,KAAK0I,WAAW,CACdtS,GAAI4J,KAAK5J,GACToP,MAAOxF,KAAKwF,MACZ7E,mBACA4D,aACAD,cACAgB,SACAC,iB,GA1BsB/C,GCmYb+J,E,WAjYb,aAAe,oBACbvM,KAAKC,UAAYD,KAAKC,UAAUC,KAAKF,MACrCA,KAAKG,UAAYH,KAAKG,UAAUD,KAAKF,M,sDAG7B5J,GACR,IAAMoW,EAAS,IAAIF,EAAclW,EAAI,eAC/BwS,EAAS,IAAI0D,EAAclW,EAAI,QAC/BqW,EAAS,IAAIH,EAAclW,EAAI,cAC/BsW,EAAU,IAAIJ,EAAclW,EAAI,2BAChCyS,EAAU,IAAIyD,EAAclW,EAAI,gBAChCuW,EAAU,IAAIL,EAAclW,EAAI,eAEtC4J,KAAKgB,MAAQ,CACX8H,OAAQ,CACN,CACEtD,MAAOgH,EACPjH,SAAU1F,EAAY,QACtBoE,SAAU,EAAE,KAAM,GAAM,GACxB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,MAIb,CACE3D,MAAOoD,EACPrD,SAAU1F,EAAY,QACtBoE,SAAU,EAAE,KAAM,GAAM,GACxB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,MAIb,CACE3D,MAAOiH,EACPlH,SAAU1F,EAAY,QACtBoE,SAAU,EAAE,IAAM,GAAM,GACxB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,MAIb,CACE3D,MAAOkH,EACPnH,SAAU1F,EAAY,QACtBoE,SAAU,CAAC,IAAM,GAAM,GACvB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,MAIb,CACE3D,MAAOqD,EACPtD,SAAU1F,EAAY,QACtBoE,SAAU,CAAC,KAAM,GAAM,GACvB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,MAIb,CACE3D,MAAOmH,EACPpH,SAAU1F,EAAY,QACtBoE,SAAU,CAAC,KAAM,GAAM,GACvB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,MAIb,CACE3D,MAAOgH,EACPjH,SAAU1F,EAAY,UACtBoE,SAAU,EAAE,KAAM,GAAM,GACxB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,MAIb,CACE3D,MAAOoD,EACPrD,SAAU1F,EAAY,UACtBoE,SAAU,EAAE,KAAM,GAAM,GACxB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,MAIb,CACE3D,MAAOiH,EACPlH,SAAU1F,EAAY,UACtBoE,SAAU,EAAE,IAAM,GAAM,GACxB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,MAIb,CACE3D,MAAOkH,EACPnH,SAAU1F,EAAY,UACtBoE,SAAU,CAAC,IAAM,GAAM,GACvB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,MAIb,CACE3D,MAAOqD,EACPtD,SAAU1F,EAAY,UACtBoE,SAAU,CAAC,KAAM,GAAM,GACvB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,MAIb,CACE3D,MAAOmH,EACPpH,SAAU1F,EAAY,UACtBoE,SAAU,CAAC,KAAM,GAAM,GACvB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,MAIb,CACE3D,MAAOgH,EACPjH,SAAU1F,EAAY,YACtBoE,SAAU,EAAE,MAAO,GAAM,GACzB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,MAIb,CACE3D,MAAOoD,EACPrD,SAAU1F,EAAY,YACtBoE,SAAU,EAAE,MAAO,GAAM,GACzB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,MAIb,CACE3D,MAAOiH,EACPlH,SAAU1F,EAAY,YACtBoE,SAAU,EAAE,KAAO,GAAM,GACzB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,MAIb,CACE3D,MAAOkH,EACPnH,SAAU1F,EAAY,YACtBoE,SAAU,CAAC,KAAO,GAAM,GACxB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,MAIb,CACE3D,MAAOqD,EACPtD,SAAU1F,EAAY,YACtBoE,SAAU,CAAC,MAAO,GAAM,GACxB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,MAIb,CACE3D,MAAOmH,EACPpH,SAAU1F,EAAY,YACtBoE,SAAU,CAAC,MAAO,GAAM,GACxB+E,UAAW,CACT,CACEC,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,IAET,CACEF,MAAO,EACPC,KAAM,CAAC,EAAG,EAAG,GACbC,MAAO,OAKfC,OAAQ,CAAC,EAAK,EAAK,M,gCAIbhT,EAAI8K,GACZ,IAAMF,EAAQhB,KAAKgB,MAEnBnG,EAAYzE,GAEZ,IAAMqL,EAAc,GAAKzE,KAAK0E,GAAK,IAC7BC,EAASvL,EAAGwL,OAAOC,YAAczL,EAAGwL,OAAOE,aAG3CnB,EAAmBoB,MACzBA,IAAiBpB,EAAkBc,EAAaE,EAHlC,GACD,KAIb,IAAM4C,EAAaxC,MACnBA,IAAewC,EAAYA,EAAYvD,EAAMoI,QAC7CrH,IAAYwC,EAAYA,GAExB,IAAK,IAAIzH,EAAI,EAAGA,EAAIkE,EAAM8H,OAAOnM,OAAQG,IAAK,CAC5C,IAAMuM,EAAQrI,EAAM8H,OAAOhM,GAC3BkD,KAAKsJ,aAAa3I,EAAkB4D,EAAY8E,GAChDrJ,KAAKuJ,cAAcrI,EAAWmI,M,mCAIrB1I,EAAkB4D,EAAY8E,GACzC,IAAM7D,EAAQ6D,EAAM7D,MAEdlB,EAAcvC,MACpBA,IAAeuC,EAAaA,EAAa+E,EAAMpF,UAC/C,IAAK,IAAInH,EAAI,EAAGA,EAAIuM,EAAML,UAAUrM,OAAQG,IAAK,CAC/C,IAAM0M,EAAWH,EAAML,UAAUlM,GACjCiF,IAAYuC,EAAaA,EAAakF,EAASP,MAAOO,EAASN,MAkBjE1D,EAAMgD,KAAK7H,EAAkB4D,EAAYD,EAf1B,CACb,CACE9C,SAAU,CAAC,IAAO,GAAM,GACxBtD,QAAS,CAAC,GAAK,GAAK,IACpBC,QAAS,CAAC,GAAK,GAAK,IACpBC,SAAU,CAAC,GAAK,GAAK,KAEvB,CACEoD,SAAU,EAAE,GAAM,GAAM,GACxBtD,QAAS,CAAC,GAAK,GAAK,IACpBC,QAAS,CAAC,GAAK,GAAK,IACpBC,SAAU,CAAC,GAAK,GAAK,MAIqCiL,EAAM9D,Y,oCAGxDrE,EAAWmI,GACvB,IAAK,IAAIvM,EAAI,EAAGA,EAAIuM,EAAML,UAAUrM,OAAQG,IAAK,CAC/C,IAAM0M,EAAWH,EAAML,UAAUlM,GACjC0M,EAASP,OAAS/H,EAAYsI,EAASL,W,KC/S9ByD,E,YAxEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,cAAgB,EAAKA,cAAc5M,KAAnB,gBACrB,EAAK6M,aAAe,EAAKA,aAAa7M,KAAlB,gBACpB,EAAK8M,OAAS,CACZ,CAAEC,MAAM,EAAOC,OAAQ,IAAInN,GAC3B,CAAEkN,MAAM,EAAOC,OAAQ,IAAIvE,GAC3B,CAAEsE,MAAM,EAAOC,OAAQ,IAAI/C,GAC3B,CAAE8C,MAAM,EAAOC,OAAQ,IAAI7C,GAC3B,CAAE4C,MAAM,EAAOC,OAAQ,IAAIlB,GAC3B,CAAEiB,MAAM,EAAOC,OAAQ,IAAIb,GAC3B,CAAEY,MAAM,EAAOC,OAAQ,IAAIX,IAE7B,EAAKY,WAAa,EAAKH,OAAOrQ,OAAS,EAbtB,E,iFAiBjB,IAAMiF,EAAS5B,KAAK4B,OACdwL,EAAOxL,EAAOyL,wBAIpB,GAHAzL,EAAO1H,MAAQkT,EAAKlT,MACpB0H,EAAOzH,OAASiT,EAAKjT,OACrB6F,KAAK5J,GAAKwL,EAAO0L,WAAW,SACZ,OAAZtN,KAAK5J,GACPc,MAAM,+EACD,CACL8I,KAAK5J,GAAG4E,OAAOgF,KAAK5J,GAAGmX,WACvBvN,KAAK5J,GAAGoX,SAASxN,KAAK5J,GAAGqX,MACzBzN,KAAK5J,GAAGsX,aAAa,0BACrB,IAAM1M,EAAQhB,KAAKgN,OAAOhN,KAAKmN,YAC1BnM,EAAMiM,OACTjM,EAAMiM,MAAO,EACbjM,EAAMkM,OAAOjN,UAAUD,KAAK5J,KAE9B4J,KAAK2N,MAAQC,OAAOC,sBAAsB7N,KAAK+M,iB,6CAKjDa,OAAOE,qBAAqB9N,KAAK2N,S,oCAGrBI,GACZA,EAAMC,iBACNhO,KAAKmN,YAAcnN,KAAKmN,WAAa,GAAKnN,KAAKgN,OAAOrQ,OACtD,IAAMqE,EAAQhB,KAAKgN,OAAOhN,KAAKmN,YAC1BnM,EAAMiM,OACTjM,EAAMiM,MAAO,EACbjM,EAAMkM,OAAOjN,UAAUD,KAAK5J,O,mCAInB6X,GACXA,GAAa,KACRjO,KAAKiO,YACRjO,KAAKiO,UAAYA,GAEnB,IAAM/M,EAAY+M,EAAYjO,KAAKiO,UACnCjO,KAAKiO,UAAYA,EACHjO,KAAKgN,OAAOhN,KAAKmN,YACzBD,OAAO/M,UAAUH,KAAK5J,GAAI8K,GAChClB,KAAK2N,MAAQC,OAAOC,sBAAsB7N,KAAK+M,gB,+BAGvC,IAAD,OACP,OACE,yBAAKmB,UAAU,UACb,4BAAQA,UAAU,SAASC,IAAK,SAAAC,GAAI,OAAI,EAAKxM,OAASwM,GAAMC,QAASrO,KAAK8M,qB,GAnEhEwB,IAAMC,WCGJC,QACW,cAA7BZ,OAAO3J,SAASwK,UAEa,UAA7Bb,OAAO3J,SAASwK,UAEhBb,OAAO3J,SAASwK,SAASC,MACvB,2DCZJC,IAASzB,OAAO,kBAAC,EAAD,MAAS0B,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhM,MAAK,SAAAiM,GACjCA,EAAaC,kB","file":"static/js/main.fb0331a2.chunk.js","sourcesContent":["export function degreesToRadians(degrees) {\r\n  var pi = Math.PI;\r\n  return degrees * (pi / 180);\r\n}\r\n\r\nexport function initShaderProgram(gl, vsSource, fsSource) {\r\n  const vertexShader = _loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n  const fragmentShader = _loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n  const shaderProgram = gl.createProgram();\r\n  gl.attachShader(shaderProgram, vertexShader);\r\n  gl.attachShader(shaderProgram, fragmentShader);\r\n  gl.linkProgram(shaderProgram);\r\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n    alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n    return null;\r\n  }\r\n  return shaderProgram;\r\n}\r\n\r\nexport function getShaderParameters(gl, shaderProgram) {\r\n  const attributeCount = gl.getProgramParameter(shaderProgram, gl.ACTIVE_ATTRIBUTES);\r\n  const attributes = [];\r\n  for (let i = 0; i < attributeCount; i++) {\r\n    const attribute = gl.getActiveAttrib(shaderProgram, i);\r\n    attributes.push({ name: attribute.name, type: _typeToString(gl, attribute.type) });\r\n  }\r\n  const uniformCount = gl.getProgramParameter(shaderProgram, gl.ACTIVE_UNIFORMS);\r\n  const uniforms = [];\r\n  for (let i = 0; i < uniformCount; i++) {\r\n    const uniform = gl.getActiveUniform(shaderProgram, i);\r\n    uniforms.push({ name: uniform.name, type: _typeToString(gl, uniform.type) });\r\n  }\r\n  return {\r\n    attributes,\r\n    uniforms\r\n  };\r\n}\r\n\r\nfunction _typeToString(gl, type) {\r\n  switch (type) {\r\n    case gl.FLOAT:\r\n      return \"FLOAT\";\r\n    case gl.FLOAT_VEC2:\r\n      return \"FLOAT_VEC2\";\r\n    case gl.FLOAT_VEC3:\r\n      return \"FLOAT_VEC3\";\r\n    case gl.FLOAT_VEC4:\r\n      return \"FLOAT_VEC4\";\r\n    case gl.INT:\r\n      return \"INT\";\r\n    case gl.INT_VEC2:\r\n      return \"INT_VEC2\";\r\n    case gl.INT_VEC3:\r\n      return \"INT_VEC3\";\r\n    case gl.INT_VEC4:\r\n      return \"INT_VEC4\";\r\n    case gl.BOOL:\r\n      return \"BOOL\";\r\n    case gl.BOOL_VEC2:\r\n      return \"BOOL_VEC2\";\r\n    case gl.BOOL_VEC3:\r\n      return \"BOOL_VEC3\";\r\n    case gl.BOOL_VEC4:\r\n      return \"BOOL_VEC4\";\r\n    case gl.FLOAT_MAT2:\r\n      return \"FLOAT_MAT2\";\r\n    case gl.FLOAT_MAT3:\r\n      return \"FLOAT_MAT3\";\r\n    case gl.FLOAT_MAT4:\r\n      return \"FLOAT_MAT4\";\r\n    case gl.SAMPLER_2D:\r\n      return \"SAMPLER_2D\";\r\n    case gl.SAMPLER_CUBE:\r\n      return \"SAMPLER_CUBE\";\r\n    default:\r\n      return \"UNKNOWN\";\r\n  }\r\n}\r\n\r\nfunction _loadShader(gl, type, source) {\r\n  const shader = gl.createShader(type);\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\r\n    gl.deleteShader(shader);\r\n    return null;\r\n  }\r\n  return shader;\r\n}\r\n\r\nexport function loadTexture(gl, url) {\r\n  const texture = gl.createTexture();\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n  const level = 0;\r\n  const internalFormat = gl.RGBA;\r\n  const width = 1;\r\n  const height = 1;\r\n  const border = 0;\r\n  const srcFormat = gl.RGBA;\r\n  const srcType = gl.UNSIGNED_BYTE;\r\n  const pixel = new Uint8Array([0, 0, 255, 255]);\r\n  gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, srcFormat, srcType, pixel);\r\n  const image = new Image();\r\n  image.onload = () => {\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\r\n      srcFormat, srcType, image);\r\n    if (_isPowerOf2(image.width) && _isPowerOf2(image.height)) {\r\n      gl.generateMipmap(gl.TEXTURE_2D);\r\n    } else {\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n  };\r\n  image.src = url;\r\n  return texture;\r\n}\r\n\r\nfunction _isPowerOf2(value) {\r\n  return (value & (value - 1)) === 0;\r\n}\r\n\r\nexport function clearScreen(gl) {\r\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n  gl.clearDepth(1.0);\r\n  gl.enable(gl.DEPTH_TEST);\r\n  gl.depthFunc(gl.LEQUAL);\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n}\r\n\r\nconst _directions = [\r\n  { x: -1, y: 0 },\r\n  { x: 0, y: -1 },\r\n  { x: 1, y: 0 },\r\n  { x: 0, y: 1 }\r\n];\r\n\r\nexport function generateMaze(width, height, windiness = 0.8) {\r\n  const carve = (pos) => {\r\n    data[pos.y][pos.x] = 0;\r\n  }\r\n\r\n  const canCarve = (pos, dir) => {\r\n    if (!isInBounds(addDir(pos, dir, 3))) {\r\n      return false;\r\n    }\r\n    const nxt = addDir(pos, dir, 2);\r\n    return data[nxt.y][nxt.x] === 1;\r\n  }\r\n\r\n  const isInBounds = (pos) => {\r\n    if (pos.x < 0 || pos.y < 0 || pos.x >= width || pos.y >= height) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const addDir = (pos, dir, len) => {\r\n    return {\r\n      x: pos.x + dir.x * len,\r\n      y: pos.y + dir.y * len\r\n    }\r\n  }\r\n\r\n  const data = [];\r\n  for (let y = 0; y < height; y++) {\r\n    data.push(new Array(width).fill(1));\r\n  }\r\n\r\n  const start = { x: 1, y: 1 };\r\n  const cells = [];\r\n  let lastDir;\r\n  carve(start);\r\n  cells.push(start);\r\n  while (cells.length > 0) {\r\n    const cell = cells[cells.length - 1];\r\n    const posCells = [];\r\n    for (let i = 0; i < _directions.length; i++) {\r\n      const dir = _directions[i];\r\n      if (canCarve(cell, dir)) {\r\n        posCells.push(dir);\r\n      }\r\n    }\r\n    if (posCells.length > 0) {\r\n      let dir;\r\n      if (posCells.includes(lastDir) && Math.random() > windiness) {\r\n        dir = lastDir;\r\n      } else {\r\n        dir = posCells[Math.floor(Math.random() * posCells.length)];\r\n      }\r\n      carve(addDir(cell, dir, 1));\r\n      carve(addDir(cell, dir, 2));\r\n      cells.push(addDir(cell, dir, 2));\r\n      lastDir = dir;\r\n    } else {\r\n      cells.pop();\r\n      lastDir = null;\r\n    }\r\n  }\r\n  return {\r\n    width,\r\n    height,\r\n    data\r\n  };\r\n}\r\n\r\nexport function getShape(shape) {\r\n  if (shape === 'tetrahedron') {\r\n    const s3 = Math.sqrt(3);\r\n    const s6 = Math.sqrt(6);\r\n\r\n    const vertices = [\r\n      [s3 / 3, -s6 / 3 * 0.333 + s6 * 0.025, 0],         // right\r\n      [-s3 / 6, -s6 / 3 * 0.333 + s6 * 0.025, 1 / 2],    // left front\r\n      [-s3 / 6, -s6 / 3 * 0.333 + s6 * 0.025, -1 / 2],   // left back\r\n      [0, s6 / 3 * 0.666 + s6 * 0.025, 0]                // top\r\n    ];\r\n\r\n    const faces = [\r\n      [0, 1, 2],\r\n      [3, 1, 0],\r\n      [3, 0, 2],\r\n      [3, 2, 1]\r\n    ];\r\n\r\n    return { vertices, faces };\r\n  }\r\n\r\n  if (shape === 'cube') {\r\n    const r = .3;\r\n\r\n    const vertices = [\r\n      [-r, -r, -r],\r\n      [-r, -r, r],\r\n      [r, -r, r],\r\n      [r, -r, -r],\r\n      [-r, r, -r],\r\n      [-r, r, r],\r\n      [r, r, r],\r\n      [r, r, -r]\r\n    ];\r\n\r\n    const faces = [\r\n      [0, 3, 2, 1],   // bottom\r\n      [4, 5, 6, 7],   // top\r\n      [0, 1, 5, 4],   // left\r\n      [2, 3, 7, 6],   // right\r\n      [1, 2, 6, 5],   // front\r\n      [3, 0, 4, 7]    // back\r\n    ];\r\n\r\n    return { vertices, faces };\r\n  }\r\n\r\n  if (shape === 'octahedron') {\r\n    const a = 1 / (2 * Math.sqrt(2));\r\n    const b = 1 / 2;\r\n\r\n    const vertices = [\r\n      [-a, 0, a],    // front left\r\n      [a, 0, a],     // front right\r\n      [a, 0, -a],    // back right\r\n      [-a, 0, -a],   // back left\r\n      [0, b, 0],     // top\r\n      [0, -b, 0]     // bottom\r\n    ];\r\n\r\n    const faces = [\r\n      [3, 0, 4],\r\n      [2, 3, 4],\r\n      [1, 2, 4],\r\n      [0, 1, 4],\r\n      [3, 2, 5],\r\n      [0, 3, 5],\r\n      [2, 1, 5],\r\n      [1, 0, 5]\r\n    ];\r\n\r\n    return { vertices, faces };\r\n  }\r\n\r\n  if (shape === 'pentagonaltrapezohedron') {\r\n    const vertices = [\r\n      [0.210292440, 0.15278640, 0.340260320],\r\n      [-0.08032456, 0.24721360, 0.340260320],\r\n      [-0.25993576, 0.00000000, 0.340260320],\r\n      [0.210292440, -0.6472136, 0.340260320],\r\n      [0.420584800, 0.00000000, -0.08032456],\r\n      [0.340260320, 0.24721360, 0.080324560],\r\n      [-0.21029244, 0.64721360, -0.34026032],\r\n      [-0.42058480, 0.00000000, 0.080324560],\r\n      [-0.34026032, -0.2472136, -0.08032456],\r\n      [0.080324560, -0.2472136, -0.34026032],\r\n      [0.259935760, 0.00000000, -0.34026032],\r\n      [-0.21029244, -0.1527864, -0.34026032]\r\n    ];\r\n\r\n    const faces = [\r\n      [3, 0, 1, 2],\r\n      [0, 3, 4, 5],\r\n      [1, 0, 5, 6],\r\n      [2, 1, 6, 7],\r\n      [3, 2, 7, 8],\r\n      [4, 3, 9, 10],\r\n      [5, 4, 10, 6],\r\n      [7, 6, 11, 8],\r\n      [3, 8, 11, 9],\r\n      [10, 9, 11, 6]\r\n    ];\r\n\r\n    return { vertices, faces };\r\n  }\r\n\r\n  if (shape === 'dodecahedron') {\r\n    const phi = (1 + Math.sqrt(5)) / 2;\r\n    const a = 0.5;\r\n    const b = 0.5 * 1 / phi;\r\n    const c = 0.5 * (2 - phi);\r\n\r\n    const vertices = [\r\n      [c, 0, a],\r\n      [-c, 0, a],\r\n      [-b, b, b],\r\n      [0, a, c],\r\n      [b, b, b],\r\n      [b, -b, b],\r\n      [0, -a, c],\r\n      [-b, -b, b],\r\n      [c, 0, -a],\r\n      [-c, 0, -a],\r\n      [-b, -b, -b],\r\n      [0, -a, -c],\r\n      [b, -b, -b],\r\n      [b, b, -b],\r\n      [0, a, -c],\r\n      [-b, b, -b],\r\n      [a, c, 0],\r\n      [-a, c, 0],\r\n      [-a, -c, 0],\r\n      [a, -c, 0]\r\n    ];\r\n\r\n    const faces = [\r\n      [4, 3, 2, 1, 0],\r\n      [7, 6, 5, 0, 1],\r\n      [12, 11, 10, 9, 8],\r\n      [15, 14, 13, 8, 9],\r\n      [14, 3, 4, 16, 13],\r\n      [3, 14, 15, 17, 2],\r\n      [11, 6, 7, 18, 10],\r\n      [6, 11, 12, 19, 5],\r\n      [4, 0, 5, 19, 16],\r\n      [12, 8, 13, 16, 19],\r\n      [15, 9, 10, 18, 17],\r\n      [7, 1, 2, 17, 18]\r\n    ];\r\n\r\n    return { vertices, faces };\r\n  }\r\n\r\n  if (shape === 'icosahedron') {\r\n    const phi = (1 + Math.sqrt(5)) / 2;\r\n    const a = 1 / 2;\r\n    const b = 1 / (2 * phi);\r\n\r\n    const vertices = [\r\n      [0, b, -a],\r\n      [b, a, 0],\r\n      [-b, a, 0],\r\n      [0, b, a],\r\n      [0, -b, a],\r\n      [-a, 0, b],\r\n      [a, 0, b],\r\n      [0, -b, -a],\r\n      [a, 0, -b],\r\n      [-a, 0, -b],\r\n      [b, -a, 0],\r\n      [-b, -a, 0]\r\n    ];\r\n\r\n    const faces = [\r\n      [1, 0, 2],\r\n      [2, 3, 1],\r\n      [4, 3, 5],\r\n      [6, 3, 4],\r\n      [7, 0, 8],\r\n      [9, 0, 7],\r\n      [10, 4, 11],\r\n      [11, 7, 10],\r\n      [5, 2, 9],\r\n      [9, 11, 5],\r\n      [8, 1, 6],\r\n      [6, 10, 8],\r\n      [5, 3, 2],\r\n      [1, 3, 6],\r\n      [2, 0, 9],\r\n      [8, 0, 1],\r\n      [9, 7, 11],\r\n      [10, 7, 8],\r\n      [11, 4, 5],\r\n      [6, 4, 10]\r\n    ];\r\n\r\n    return { vertices, faces };\r\n  }\r\n}\r\n\r\nconst _materials = {\r\n  emerald: {\r\n    ambient: [0.0215, 0.1745, 0.0215], diffuse: [0.07568, 0.61424, 0.07568], specular: [0.633, 0.727811, 0.633], shininess: 0.6\r\n  },\r\n  jade: {\r\n    ambient: [0.135, 0.2225, 0.1575], diffuse: [0.54, 0.89, 0.63], specular: [0.316228, 0.316228, 0.316228], shininess: 0.1\r\n  },\r\n  obsidian: {\r\n    ambient: [0.05375, 0.05, 0.06625], diffuse: [0.18275, 0.17, 0.22525], specular: [0.332741, 0.328634, 0.346435], shininess: 0.3\r\n  },\r\n  pearl: {\r\n    ambient: [0.25, 0.20725, 0.20725], diffuse: [1, 0.829, 0.829], specular: [0.296648, 0.296648, 0.296648], shininess: 0.088\r\n  },\r\n  ruby: {\r\n    ambient: [0.1745, 0.01175, 0.01175], diffuse: [0.61424, 0.04136, 0.04136], specular: [0.727811, 0.626959, 0.626959], shininess: 0.6\r\n  },\r\n  turquoise: {\r\n    ambient: [0.1, 0.18725, 0.1745], diffuse: [0.396, 0.74151, 0.69102], specular: [0.297254, 0.30829, 0.306678], shininess: 0.1\r\n  },\r\n  brass: {\r\n    ambient: [0.329412, 0.223529, 0.027451], diffuse: [0.780392, 0.568627, 0.113725], specular: [0.992157, 0.941176, 0.807843], shininess: 0.21794872\r\n  },\r\n  bronze: {\r\n    ambient: [0.2125, 0.1275, 0.054], diffuse: [0.714, 0.4284, 0.18144], specular: [0.393548, 0.271906, 0.166721], shininess: 0.2\r\n  },\r\n  chrome: {\r\n    ambient: [0.25, 0.25, 0.25], diffuse: [0.4, 0.4, 0.4], specular: [0.774597, 0.774597, 0.774597], shininess: 0.6\r\n  },\r\n  copper: {\r\n    ambient: [0.19125, 0.0735, 0.0225], diffuse: [0.7038, 0.27048, 0.0828], specular: [0.256777, 0.137622, 0.086014], shininess: 0.1\r\n  },\r\n  gold: {\r\n    ambient: [0.24725, 0.1995, 0.0745], diffuse: [0.75164, 0.60648, 0.22648], specular: [0.628281, 0.555802, 0.366065], shininess: 0.4\r\n  },\r\n  silver: {\r\n    ambient: [0.19225, 0.19225, 0.19225], diffuse: [0.50754, 0.50754, 0.50754], specular: [0.508273, 0.508273, 0.508273], shininess: 0.4\r\n  },\r\n  blackPlastic: {\r\n    ambient: [0.0, 0.0, 0.0], diffuse: [0.01, 0.01, 0.01], specular: [0.50, 0.50, 0.50], shininess: 0.25\r\n  },\r\n  cyanPlastic: {\r\n    ambient: [0.0, 0.1, 0.06], diffuse: [0.0, 0.50980392, 0.50980392], specular: [0.50196078, 0.50196078, 0.50196078], shininess: 0.25\r\n  },\r\n  greenPlastic: {\r\n    ambient: [0.0, 0.0, 0.0], diffuse: [0.1, 0.35, 0.1], specular: [0.45, 0.55, 0.45], shininess: 0.25\r\n  },\r\n  redPlastic: {\r\n    ambient: [0.0, 0.0, 0.0], diffuse: [0.5, 0.0, 0.0], specular: [0.7, 0.6, 0.6], shininess: 0.25\r\n  },\r\n  whitePlastic: {\r\n    ambient: [0.0, 0.0, 0.0], diffuse: [0.55, 0.55, 0.55], specular: [0.70, 0.70, 0.70], shininess: 0.25\r\n  },\r\n  yellowPlastic: {\r\n    ambient: [0.0, 0.0, 0.0], diffuse: [0.5, 0.5, 0.0], specular: [0.60, 0.60, 0.50], shininess: 0.25\r\n  },\r\n  blackRubber: {\r\n    ambient: [0.02, 0.02, 0.02], diffuse: [0.01, 0.01, 0.01], specular: [0.4, 0.4, 0.4], shininess: 0.078125\r\n  },\r\n  cyanRubber: {\r\n    ambient: [0.0, 0.05, 0.05], diffuse: [0.4, 0.5, 0.5], specular: [0.04, 0.7, 0.7], shininess: 0.078125\r\n  },\r\n  greenRubber: {\r\n    ambient: [0.0, 0.05, 0.0], diffuse: [0.4, 0.5, 0.4], specular: [0.04, 0.7, 0.04], shininess: 0.078125\r\n  },\r\n  redRubber: {\r\n    ambient: [0.05, 0.0, 0.0], diffuse: [0.5, 0.4, 0.4], specular: [0.7, 0.04, 0.04], shininess: 0.078125\r\n  },\r\n  whiteRubber: {\r\n    ambient: [0.05, 0.05, 0.05], diffuse: [0.5, 0.5, 0.5], specular: [0.7, 0.7, 0.7], shininess: 0.078125\r\n  },\r\n  yellowRubber: {\r\n    ambient: [0.05, 0.05, 0.0], diffuse: [0.5, 0.5, 0.4], specular: [0.7, 0.7, 0.04], shininess: 0.078125\r\n  }\r\n};\r\n\r\nexport function getMaterial(name) {\r\n  return _materials[name];\r\n}\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { initShaderProgram, clearScreen } from '../lib/utility'\r\n\r\nclass ColoredSquareScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const vsSource = `\r\n    attribute vec4 aVertexPosition;\r\n    attribute vec4 aVertexColor;\r\n\r\n    uniform mat4 uModelViewMatrix;\r\n    uniform mat4 uProjectionMatrix;\r\n\r\n    varying lowp vec4 vColor;\r\n\r\n    void main(void) {\r\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n      vColor = aVertexColor;\r\n    }\r\n  `;\r\n\r\n    const fsSource = `\r\n    varying lowp vec4 vColor;\r\n\r\n    void main(void) {\r\n      gl_FragColor = vColor;\r\n    }\r\n  `;\r\n\r\n    const shaderProgram = initShaderProgram(gl, vsSource, fsSource);\r\n\r\n    const programInfo = {\r\n      program: shaderProgram,\r\n      attribLocations: {\r\n        vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\r\n        vertexColor: gl.getAttribLocation(shaderProgram, 'aVertexColor')\r\n      },\r\n      uniformLocations: {\r\n        projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\r\n        modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix')\r\n      }\r\n    };\r\n\r\n    const buffers = this._initBuffers(gl);\r\n\r\n    this.scene = { programInfo, buffers, squareRotation: 0.0 };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n    const { programInfo, buffers } = scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    {\r\n      const numComponents = 4;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\r\n      gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexColor,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n      gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.vertexColor);\r\n    }\r\n\r\n    {\r\n      const numComponents = 2;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexPosition,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n      gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.vertexPosition);\r\n    }\r\n\r\n    {\r\n      const fieldOfView = 45 * Math.PI / 180;\r\n      const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n      const zNear = 0.1;\r\n      const zFar = 100.0;\r\n      const projectionMatrix = mat4.create();\r\n      mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n      const modelViewMatrix = mat4.create();\r\n      mat4.translate(modelViewMatrix, modelViewMatrix, [-0.0, 0.0, -6.0]);\r\n      mat4.rotate(modelViewMatrix, modelViewMatrix, scene.squareRotation, [0, 0, 1]);\r\n      gl.useProgram(programInfo.program);\r\n      gl.uniformMatrix4fv(\r\n        programInfo.uniformLocations.projectionMatrix,\r\n        false,\r\n        projectionMatrix);\r\n      gl.uniformMatrix4fv(\r\n        programInfo.uniformLocations.modelViewMatrix,\r\n        false,\r\n        modelViewMatrix);\r\n    }\r\n\r\n    {\r\n      const offset = 0;\r\n      const vertexCount = 4;\r\n      gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount);\r\n    }\r\n\r\n    scene.squareRotation += deltaTime;\r\n  }\r\n\r\n  _initBuffers(gl) {\r\n    const positions = [\r\n      1.0, 1.0,\r\n      -1.0, 1.0,\r\n      1.0, -1.0,\r\n      -1.0, -1.0,\r\n    ];\r\n    const position = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, position);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const colors = [\r\n      1.0, 1.0, 1.0, 1.0,\r\n      1.0, 0.0, 0.0, 1.0,\r\n      0.0, 1.0, 0.0, 1.0,\r\n      0.0, 0.0, 1.0, 1.0\r\n    ];\r\n    const color = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, color);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\r\n\r\n    return { position, color };\r\n  }\r\n}\r\n\r\nexport default ColoredSquareScene;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport * as vec3 from 'gl-matrix/vec3';\r\nimport { loadTexture, initShaderProgram, getShaderParameters } from '../lib/utility'\r\n\r\nclass Model {\r\n  _initModel(options) {\r\n    const { gl, geometry } = options;\r\n    let texture\r\n    if (options.texture) {\r\n      texture = {};\r\n      if (options.texture.diffuse) {\r\n        texture.diffuse = loadTexture(gl, options.texture.diffuse);\r\n      }\r\n      if (options.texture.normal) {\r\n        texture.normal = loadTexture(gl, options.texture.normal);\r\n      }\r\n      if (options.texture.height) {\r\n        texture.height = loadTexture(gl, options.texture.height);\r\n      }\r\n    }\r\n    let vertexShader;\r\n    let fragmentShader;\r\n    Promise.all([\r\n      fetch(options.shader.vertex).then((response) => response.text()).then((text) => vertexShader = text),\r\n      fetch(options.shader.fragment).then((response) => response.text()).then((text) => fragmentShader = text)\r\n    ]).then(() => {\r\n      const shaderProgram = initShaderProgram(gl, vertexShader, fragmentShader);\r\n      const shaderParameters = getShaderParameters(gl, shaderProgram);\r\n      const shader = {\r\n        program: shaderProgram,\r\n        attribLocations: {},\r\n        uniformLocations: {}\r\n      };\r\n      shaderParameters.attributes.forEach((attribute) => {\r\n        const location = gl.getAttribLocation(shaderProgram, attribute.name)\r\n        switch (attribute.name) {\r\n          case 'aVertexPosition':\r\n            shader.attribLocations.vertexPosition = location;\r\n            break;\r\n          case 'aVertexNormal':\r\n            shader.attribLocations.vertexNormal = location;\r\n            break;\r\n          case 'aVertexTangent':\r\n            shader.attribLocations.vertexTangent = location;\r\n            break;\r\n          case 'aVertexBitangent':\r\n            shader.attribLocations.vertexBitangent = location;\r\n            break;\r\n          case 'aVertexColor':\r\n            shader.attribLocations.vertexColor = location;\r\n            break;\r\n          case 'aTextureCoord':\r\n            shader.attribLocations.vertexTextureCoord = location;\r\n            break;\r\n          default:\r\n            alert('unknown attribute of ' + attribute.name);\r\n        }\r\n      });\r\n      shaderParameters.uniforms.forEach((uniform) => {\r\n        const location = gl.getUniformLocation(shaderProgram, uniform.name)\r\n        switch (uniform.name) {\r\n          case 'uModelMatrix':\r\n            shader.uniformLocations.modelMatrix = location;\r\n            break;\r\n          case 'uViewMatrix':\r\n            shader.uniformLocations.viewMatrix = location;\r\n            break;\r\n          case 'uNormalMatrix':\r\n            shader.uniformLocations.normalMatrix = location;\r\n            break;\r\n          case 'uProjectionMatrix':\r\n            shader.uniformLocations.projectionMatrix = location;\r\n            break;\r\n          case 'uSamplerDiffuse':\r\n            shader.uniformLocations.textureDiffuse = location;\r\n            break;\r\n          case 'uSamplerNormal':\r\n            shader.uniformLocations.textureNormal = location;\r\n            break;\r\n          case 'uSamplerHeight':\r\n            shader.uniformLocations.textureHeight = location;\r\n            break;\r\n          case 'uShowDiffuseMap':\r\n            shader.uniformLocations.showDiffuseMap = location;\r\n            break;\r\n          case 'uShowNormalMap':\r\n            shader.uniformLocations.showNormalMap = location;\r\n            break;\r\n          case 'uPerPixel':\r\n            shader.uniformLocations.perPixel = location;\r\n            break;\r\n          case 'uParallaxHeightScale':\r\n            shader.uniformLocations.parallaxHeightScale = location;\r\n            break;\r\n          case 'uParallaxSteps':\r\n            shader.uniformLocations.parallaxSteps = location;\r\n            break;\r\n          case 'uCameraPos':\r\n            shader.uniformLocations.cameraPosition = location;\r\n            break;\r\n          case 'uAmbientLight':\r\n            shader.uniformLocations.ambientLight = location;\r\n            break;\r\n          case 'uDirectionalLight.color':\r\n            if (!shader.uniformLocations.directionalLight) {\r\n              shader.uniformLocations.directionalLight = {};\r\n            }\r\n            shader.uniformLocations.directionalLight.color = location;\r\n            break;\r\n          case 'uDirectionalLight.direction':\r\n            if (!shader.uniformLocations.directionalLight) {\r\n              shader.uniformLocations.directionalLight = {};\r\n            }\r\n            shader.uniformLocations.directionalLight.direction = location;\r\n            break;\r\n          case 'uPointLight.color':\r\n            if (!shader.uniformLocations.pointLight) {\r\n              shader.uniformLocations.pointLight = {};\r\n            }\r\n            shader.uniformLocations.pointLight.color = location;\r\n            break;\r\n          case 'uPointLight.position':\r\n            if (!shader.uniformLocations.pointLight) {\r\n              shader.uniformLocations.pointLight = {};\r\n            }\r\n            shader.uniformLocations.pointLight.position = location;\r\n            break;\r\n          case 'uLight[0].position':\r\n            if (!shader.uniformLocations.lights) {\r\n              shader.uniformLocations.lights = [];\r\n            }\r\n            while (shader.uniformLocations.lights.length < 1) {\r\n              shader.uniformLocations.lights.push({});\r\n            }\r\n            shader.uniformLocations.lights[0].position = location;\r\n            break;\r\n          case 'uLight[0].ambient':\r\n            if (!shader.uniformLocations.lights) {\r\n              shader.uniformLocations.lights = [];\r\n            }\r\n            while (shader.uniformLocations.lights.length < 1) {\r\n              shader.uniformLocations.lights.push({});\r\n            }\r\n            shader.uniformLocations.lights[0].ambient = location;\r\n            break;\r\n          case 'uLight[0].diffuse':\r\n            if (!shader.uniformLocations.lights) {\r\n              shader.uniformLocations.lights = [];\r\n            }\r\n            while (shader.uniformLocations.lights.length < 1) {\r\n              shader.uniformLocations.lights.push({});\r\n            }\r\n            shader.uniformLocations.lights[0].diffuse = location;\r\n            break;\r\n          case 'uLight[0].specular':\r\n            if (!shader.uniformLocations.lights) {\r\n              shader.uniformLocations.lights = [];\r\n            }\r\n            while (shader.uniformLocations.lights.length < 1) {\r\n              shader.uniformLocations.lights.push({});\r\n            }\r\n            shader.uniformLocations.lights[0].specular = location;\r\n            break;\r\n          case 'uLight[1].position':\r\n            if (!shader.uniformLocations.lights) {\r\n              shader.uniformLocations.lights = [];\r\n            }\r\n            while (shader.uniformLocations.lights.length < 2) {\r\n              shader.uniformLocations.lights.push({});\r\n            }\r\n            shader.uniformLocations.lights[1].position = location;\r\n            break;\r\n          case 'uLight[1].ambient':\r\n            if (!shader.uniformLocations.lights) {\r\n              shader.uniformLocations.lights = [];\r\n            }\r\n            while (shader.uniformLocations.lights.length < 2) {\r\n              shader.uniformLocations.lights.push({});\r\n            }\r\n            shader.uniformLocations.lights[1].ambient = location;\r\n            break;\r\n          case 'uLight[1].diffuse':\r\n            if (!shader.uniformLocations.lights) {\r\n              shader.uniformLocations.lights = [];\r\n            }\r\n            while (shader.uniformLocations.lights.length < 2) {\r\n              shader.uniformLocations.lights.push({});\r\n            }\r\n            shader.uniformLocations.lights[1].diffuse = location;\r\n            break;\r\n          case 'uLight[1].specular':\r\n            if (!shader.uniformLocations.lights) {\r\n              shader.uniformLocations.lights = [];\r\n            }\r\n            while (shader.uniformLocations.lights.length < 2) {\r\n              shader.uniformLocations.lights.push({});\r\n            }\r\n            shader.uniformLocations.lights[1].specular = location;\r\n            break;\r\n          case 'uMaterial.ambient':\r\n            if (!shader.uniformLocations.material) {\r\n              shader.uniformLocations.material = {};\r\n            }\r\n            shader.uniformLocations.material.ambient = location;\r\n            break;\r\n          case 'uMaterial.diffuse':\r\n            if (!shader.uniformLocations.material) {\r\n              shader.uniformLocations.material = {};\r\n            }\r\n            shader.uniformLocations.material.diffuse = location;\r\n            break;\r\n          case 'uMaterial.specular':\r\n            if (!shader.uniformLocations.material) {\r\n              shader.uniformLocations.material = {};\r\n            }\r\n            shader.uniformLocations.material.specular = location;\r\n            break;\r\n          case 'uMaterial.shininess':\r\n            if (!shader.uniformLocations.material) {\r\n              shader.uniformLocations.material = {};\r\n            }\r\n            shader.uniformLocations.material.shininess = location;\r\n            break;\r\n          default:\r\n            alert('unknown uniform of ' + uniform.name);\r\n        }\r\n      });\r\n      const buffers = this._initBuffers(gl, shader, geometry);\r\n      this.model = {\r\n        shader,\r\n        buffers,\r\n        texture\r\n      };\r\n    });\r\n  }\r\n\r\n  _initBuffers(gl, shader, geometry) {\r\n    const positions = [];\r\n    const normals = [];\r\n    const tangents = [];\r\n    const bitangents = [];\r\n    const textureCoordinates = [];\r\n    const colors = [];\r\n    const indices = [];\r\n    const normal = vec3.create();\r\n    const tangent = vec3.create();\r\n    const bitangent = vec3.create();\r\n    let offset = 0;\r\n\r\n    const addSquare = (c0, c1, c2, c3, options) => {\r\n      positions.push(...c0, ...c1, ...c2, ...c3);\r\n      indices.push(offset + 0, offset + 1, offset + 2, offset + 2, offset + 3, offset + 0);\r\n      offset += 4;\r\n\r\n      if (shader.attribLocations.vertexNormal || shader.attribLocations.vertexTangent || shader.attribLocations.vertexBitangent) {\r\n        vec3.subtract(tangent, c1, c0);\r\n        vec3.subtract(bitangent, c3, c0);\r\n\r\n        if (shader.attribLocations.vertexNormal) {\r\n          vec3.cross(normal, tangent, bitangent);\r\n          vec3.normalize(normal, normal);\r\n          normals.push(...normal, ...normal, ...normal, ...normal);\r\n        }\r\n\r\n        if (shader.attribLocations.vertexTangent) {\r\n          vec3.normalize(tangent, tangent);\r\n          tangents.push(...tangent, ...tangent, ...tangent, ...tangent);\r\n        }\r\n\r\n        if (shader.attribLocations.vertexBitangent) {\r\n          vec3.normalize(bitangent, bitangent);\r\n          bitangents.push(...bitangent, ...bitangent, ...bitangent, ...bitangent);\r\n        }\r\n      }\r\n\r\n      if (shader.attribLocations.vertexTextureCoord) {\r\n        textureCoordinates.push(0, 0, 1, 0, 1, 1, 0, 1);\r\n      }\r\n\r\n      if (shader.attribLocations.vertexColor) {\r\n        colors.push(...options.color, ...options.color, ...options.color, ...options.color);\r\n      }\r\n    }\r\n\r\n    const addTriangle = (c0, c1, c2, options) => {\r\n      positions.push(...c0, ...c1, ...c2);\r\n      indices.push(offset + 0, offset + 1, offset + 2);\r\n      offset += 3;\r\n\r\n      if (shader.attribLocations.vertexNormal || shader.attribLocations.vertexTangent || shader.attribLocations.vertexBitangent) {\r\n        vec3.subtract(tangent, c1, c0);\r\n        vec3.subtract(bitangent, c2, c0);\r\n\r\n        if (shader.attribLocations.vertexNormal) {\r\n          vec3.cross(normal, tangent, bitangent);\r\n          vec3.normalize(normal, normal);\r\n          normals.push(...normal, ...normal, ...normal);\r\n        }\r\n\r\n        if (shader.attribLocations.vertexTangent) {\r\n          vec3.normalize(tangent, tangent);\r\n          tangents.push(...tangent, ...tangent, ...tangent);\r\n        }\r\n\r\n        if (shader.attribLocations.vertexBitangent) {\r\n          vec3.normalize(bitangent, bitangent);\r\n          bitangents.push(...bitangent, ...bitangent, ...bitangent);\r\n        }\r\n      }\r\n\r\n      if (shader.attribLocations.vertexColor) {\r\n        colors.push(...options.color, ...options.color, ...options.color);\r\n      }\r\n    }\r\n\r\n    const addPentagon = (c0, c1, c2, c3, c4, options) => {\r\n      positions.push(...c0, ...c1, ...c2, ...c3, ...c4);\r\n      indices.push(offset + 0, offset + 3, offset + 4, offset + 0, offset + 1, offset + 3, offset + 1, offset + 2, offset + 3);\r\n      offset += 5;\r\n\r\n      if (shader.attribLocations.vertexNormal || shader.attribLocations.vertexTangent || shader.attribLocations.vertexBitangent) {\r\n        vec3.subtract(tangent, c1, c0);\r\n        vec3.subtract(bitangent, c4, c0);\r\n\r\n        if (shader.attribLocations.vertexNormal) {\r\n          vec3.cross(normal, tangent, bitangent);\r\n          vec3.normalize(normal, normal);\r\n          normals.push(...normal, ...normal, ...normal, ...normal, ...normal);\r\n        }\r\n\r\n        if (shader.attribLocations.vertexTangent) {\r\n          vec3.normalize(tangent, tangent);\r\n          tangents.push(...tangent, ...tangent, ...tangent, ...tangent, ...tangent);\r\n        }\r\n\r\n        if (shader.attribLocations.vertexBitangent) {\r\n          vec3.normalize(bitangent, bitangent);\r\n          bitangents.push(...bitangent, ...bitangent, ...bitangent, ...bitangent, ...bitangent);\r\n        }\r\n      }\r\n\r\n      if (shader.attribLocations.vertexColor) {\r\n        colors.push(...options.color, ...options.color, ...options.color, ...options.color, ...options.color);\r\n      }\r\n    }\r\n\r\n    const addFace = (vertices, face, options) => {\r\n      switch (face.length) {\r\n        case 3:\r\n          addTriangle(vertices[face[0]], vertices[face[1]], vertices[face[2]], options);\r\n          break;\r\n        case 4:\r\n          addSquare(vertices[face[0]], vertices[face[1]], vertices[face[2]], vertices[face[3]], options);\r\n          break;\r\n        case 5:\r\n          addPentagon(vertices[face[0]], vertices[face[1]], vertices[face[2]], vertices[face[3]], vertices[face[4]], options);\r\n          break;\r\n        default:\r\n          alert('faces with ' + face.length + ' vertices are not supported');\r\n      }\r\n    }\r\n\r\n    const addFaces = (vertices, faces, options) => {\r\n      for (let i = 0; i < faces.length; i++) {\r\n        let option = {}\r\n        if (options) {\r\n          if (options.colors) {\r\n            option.color = options.colors[i % options.colors.length];\r\n          }\r\n        }\r\n        addFace(vertices, faces[i], option);\r\n      }\r\n    }\r\n\r\n    geometry({ addSquare, addFaces });\r\n\r\n    const positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const indexBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\r\n\r\n    const buffers = { position: positionBuffer, indices: indexBuffer, vertexCount: indices.length }\r\n\r\n    if (shader.attribLocations.vertexNormal) {\r\n      const normalBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normals), gl.STATIC_DRAW);\r\n      buffers.normal = normalBuffer;\r\n    }\r\n\r\n    if (shader.attribLocations.vertexTangent) {\r\n      const tangentBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, tangentBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(tangents), gl.STATIC_DRAW);\r\n      buffers.tangent = tangentBuffer;\r\n    }\r\n\r\n    if (shader.attribLocations.vertexBitangent) {\r\n      const bitangentBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, bitangentBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(bitangents), gl.STATIC_DRAW);\r\n      buffers.bitangent = bitangentBuffer;\r\n    }\r\n\r\n    if (shader.attribLocations.vertexTextureCoord) {\r\n      const textureCoordBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, textureCoordBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW);\r\n      buffers.textureCoord = textureCoordBuffer;\r\n    }\r\n\r\n    if (shader.attribLocations.vertexColor) {\r\n      const colorBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\r\n      buffers.color = colorBuffer;\r\n    }\r\n\r\n    return buffers;\r\n  }\r\n\r\n  _drawModel(options) {\r\n    if (!options.model) {\r\n      return;\r\n    }\r\n\r\n    const { gl, model, projectionMatrix, viewMatrix, modelMatrix } = options;\r\n    const { shader, buffers, texture } = model;\r\n\r\n    {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexPosition, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexPosition);\r\n    }\r\n\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\r\n\r\n    if (shader.attribLocations.vertexNormal) {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.normal);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexNormal, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexNormal);\r\n    }\r\n\r\n    if (shader.attribLocations.vertexTangent) {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.tangent);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexTangent, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexTangent);\r\n    }\r\n\r\n    if (shader.attribLocations.vertexBitangent) {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.bitangent);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexBitangent, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexBitangent);\r\n    }\r\n\r\n    if (shader.attribLocations.vertexTextureCoord) {\r\n      const numComponents = 2;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.textureCoord);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexTextureCoord, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexTextureCoord);\r\n    }\r\n\r\n    if (shader.attribLocations.vertexColor) {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexColor, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexColor);\r\n    }\r\n\r\n    gl.useProgram(shader.program);\r\n    gl.uniformMatrix4fv(shader.uniformLocations.projectionMatrix, false, projectionMatrix);\r\n    gl.uniformMatrix4fv(shader.uniformLocations.modelMatrix, false, modelMatrix);\r\n    gl.uniformMatrix4fv(shader.uniformLocations.viewMatrix, false, viewMatrix);\r\n\r\n    if (shader.uniformLocations.normalMatrix) {\r\n      const normalMatrix = mat4.create();\r\n      mat4.invert(normalMatrix, modelMatrix);\r\n      mat4.transpose(normalMatrix, normalMatrix);\r\n      gl.uniformMatrix4fv(shader.uniformLocations.normalMatrix, false, normalMatrix);\r\n    }\r\n\r\n    if (shader.uniformLocations.showDiffuseMap) {\r\n      gl.uniform1i(shader.uniformLocations.showDiffuseMap, options.showDiffuseMap);\r\n    }\r\n\r\n    if (shader.uniformLocations.showNormalMap) {\r\n      gl.uniform1i(shader.uniformLocations.showNormalMap, options.showNormalMap);\r\n    }\r\n\r\n    if (shader.uniformLocations.perPixel) {\r\n      gl.uniform1i(shader.uniformLocations.perPixel, options.perPixel);\r\n    }\r\n\r\n    if (shader.uniformLocations.parallaxHeightScale) {\r\n      gl.uniform1f(shader.uniformLocations.parallaxHeightScale, options.parallaxHeightScale);\r\n    }\r\n\r\n    if (shader.uniformLocations.parallaxSteps) {\r\n      gl.uniform1i(shader.uniformLocations.parallaxSteps, options.parallaxSteps);\r\n    }\r\n\r\n    if (shader.uniformLocations.ambientLight) {\r\n      gl.uniform3fv(shader.uniformLocations.ambientLight, options.ambientLight);\r\n    }\r\n\r\n    if (shader.uniformLocations.directionalLight) {\r\n      const direction = vec3.clone(options.directionalLight.direction);\r\n      vec3.normalize(direction, direction);\r\n      gl.uniform3fv(shader.uniformLocations.directionalLight.color, options.directionalLight.color);\r\n      gl.uniform3fv(shader.uniformLocations.directionalLight.direction, direction);\r\n    }\r\n\r\n    if (shader.uniformLocations.pointLight) {\r\n      gl.uniform3fv(shader.uniformLocations.pointLight.color, options.pointLight.color);\r\n      gl.uniform3fv(shader.uniformLocations.pointLight.position, options.pointLight.position);\r\n    }\r\n\r\n    if (options.lights) {\r\n      const lights = options.lights;\r\n      for (let i = 0; i < lights.length; i++) {\r\n        const light = lights[i];\r\n        gl.uniform3fv(shader.uniformLocations.lights[i].position, light.position);\r\n        gl.uniform3fv(shader.uniformLocations.lights[i].ambient, light.ambient);\r\n        gl.uniform3fv(shader.uniformLocations.lights[i].diffuse, light.diffuse);\r\n        gl.uniform3fv(shader.uniformLocations.lights[i].specular, light.specular);\r\n      }\r\n    }\r\n\r\n    if (options.material) {\r\n      const material = options.material;\r\n      gl.uniform3fv(shader.uniformLocations.material.ambient, material.ambient);\r\n      gl.uniform3fv(shader.uniformLocations.material.diffuse, material.diffuse);\r\n      gl.uniform3fv(shader.uniformLocations.material.specular, material.specular);\r\n      gl.uniform1f(shader.uniformLocations.material.shininess, material.shininess);\r\n    }\r\n\r\n    if (shader.uniformLocations.cameraPosition) {\r\n      gl.uniform3fv(shader.uniformLocations.cameraPosition, options.cameraPosition);\r\n    }\r\n\r\n    if (shader.uniformLocations.textureDiffuse) {\r\n      gl.activeTexture(gl.TEXTURE0);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.diffuse);\r\n      gl.uniform1i(shader.uniformLocations.textureDiffuse, 0);\r\n    }\r\n\r\n    if (shader.uniformLocations.textureNormal) {\r\n      gl.activeTexture(gl.TEXTURE1);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.normal);\r\n      gl.uniform1i(shader.uniformLocations.textureNormal, 1);\r\n    }\r\n\r\n    if (shader.uniformLocations.textureHeight) {\r\n      gl.activeTexture(gl.TEXTURE2);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.height);\r\n      gl.uniform1i(shader.uniformLocations.textureHeight, 2);\r\n    }\r\n\r\n    {\r\n      const vertexCount = buffers.vertexCount;\r\n      const type = gl.UNSIGNED_SHORT;\r\n      const offset = 0;\r\n      gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Model;\r\n","import Model from './Model';\r\nimport { getShape } from '../lib/utility';\r\n\r\nclass ColoredModel extends Model {\r\n  constructor(gl, shapeName, colors) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: ({ addFaces }) => {\r\n        const shape = getShape(shapeName);\r\n        addFaces(shape.vertices, shape.faces, { colors });\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/colored/vertex.glsl',\r\n        fragment: 'shaders/colored/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix, lights, material) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix,\r\n      lights,\r\n      material\r\n    });\r\n  }\r\n}\r\n\r\nexport default ColoredModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen } from '../lib/utility'\r\nimport ColoredModel from '../models/ColoredModel';\r\n\r\nclass ColoredCubeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const colors1 = [\r\n      [0.0, 0.0, 1.0],    // Bottom face: blue\r\n      [0.0, 1.0, 0.0],    // Top face: green\r\n      [1.0, 0.0, 1.0],    // Left face: purple\r\n      [1.0, 1.0, 0.0],    // Right face: yellow\r\n      [1.0, 1.0, 1.0],    // Front face: white\r\n      [1.0, 0.0, 0.0]     // Back face: red\r\n    ];\r\n    const model6 = new ColoredModel(gl, 'cube', colors1);\r\n    const colors2 = [\r\n      [1.0, 0.0, 0.0],\r\n      [0.0, 0.0, 1.0],\r\n      [0.0, 1.0, 0.0],\r\n      [1.0, 1.0, 0.0],\r\n      [0.0, 1.0, 1.0],\r\n      [1.0, 0.0, 1.0],\r\n      [1.0, 0.5, 0.0],\r\n      [0.0, 1.0, 0.5],\r\n      [1.0, 0.0, 0.5],\r\n      [0.5, 1.0, 0.0],\r\n      [0.0, 0.5, 1.0],\r\n      [0.5, 0.0, 1.0]\r\n    ];\r\n    const model12 = new ColoredModel(gl, 'dodecahedron', colors2);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model: model6,\r\n          location: [-1.6, 0.0, -6.0],\r\n          scale: [3.0, 3.0, 3.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 1.0\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.7\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model12,\r\n          location: [1.6, 0.0, -6.0],\r\n          scale: [2.8, 2.8, 2.8],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 1.0\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.7\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    if (actor.scale) {\r\n      mat4.scale(modelMatrix, modelMatrix, actor.scale);\r\n    }\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      mat4.rotate(modelMatrix, modelMatrix, rotation.angle, rotation.axis);\r\n    }\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      rotation.angle += deltaTime * rotation.speed;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ColoredCubeScene;\r\n","import Model from './Model';\r\n\r\nclass TexturedCubeModel extends Model {\r\n  constructor(gl) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: this._geometry,\r\n      texture: {\r\n        diffuse: 'images/cubetexture.png'\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/texturedcube/vertex.glsl',\r\n        fragment: 'shaders/texturedcube/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix\r\n    });\r\n  }\r\n\r\n  _geometry({ addSquare }) {\r\n    const f0 = [-1, -1, 1];\r\n    const f1 = [1, -1, 1];\r\n    const f2 = [1, 1, 1];\r\n    const f3 = [-1, 1, 1];\r\n    const b0 = [-1, -1, -1];\r\n    const b1 = [1, -1, -1];\r\n    const b2 = [1, 1, -1];\r\n    const b3 = [-1, 1, -1];\r\n    addSquare(f0, f1, f2, f3);  // front\r\n    addSquare(b1, b0, b3, b2);  // back\r\n    addSquare(b0, f0, f3, b3);  // left\r\n    addSquare(f1, b1, b2, f2);  // right\r\n    addSquare(b0, b1, f1, f0);  // bottom\r\n    addSquare(b2, b3, f3, f2);  // top\r\n  }\r\n}\r\n\r\nexport default TexturedCubeModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen } from '../lib/utility'\r\nimport TexturedCubeModel from '../models/TexturedCubeModel';\r\n\r\nclass TexturedCubeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const model = new TexturedCubeModel(gl);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [0.0, 0.0, -6.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 1.0\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.7\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      mat4.rotate(modelMatrix, modelMatrix, rotation.angle, rotation.axis);\r\n    }\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      rotation.angle += deltaTime * rotation.speed;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TexturedCubeScene;\r\n","import Model from './Model';\r\n\r\nclass LightedCubeModel extends Model {\r\n  constructor(gl) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: this._geometry,\r\n      texture: {\r\n        diffuse: 'images/cubetexture.png'\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/lightedcube/vertex.glsl',\r\n        fragment: 'shaders/lightedcube/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix, perPixel) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix,\r\n      ambientLight: [0.3, 0.3, 0.3],\r\n      directionalLight: {\r\n        color: [0.5, 0.5, 0.5],\r\n        direction: [0.0, 1.0, 0.0]\r\n      },\r\n      pointLight: {\r\n        color: [0.7, 0.7, 0.7],\r\n        position: [0.0, 0.0, 0.0]\r\n      },\r\n      cameraPosition: [0.0, 0.0, 0.0],\r\n      perPixel\r\n    });\r\n  }\r\n\r\n  _geometry({ addSquare }) {\r\n    const f0 = [-1, -1, 1];\r\n    const f1 = [1, -1, 1];\r\n    const f2 = [1, 1, 1];\r\n    const f3 = [-1, 1, 1];\r\n    const b0 = [-1, -1, -1];\r\n    const b1 = [1, -1, -1];\r\n    const b2 = [1, 1, -1];\r\n    const b3 = [-1, 1, -1];\r\n    addSquare(f0, f1, f2, f3);  // front\r\n    addSquare(b1, b0, b3, b2);  // back\r\n    addSquare(b0, f0, f3, b3);  // left\r\n    addSquare(f1, b1, b2, f2);  // right\r\n    addSquare(b0, b1, f1, f0);  // bottom\r\n    addSquare(b2, b3, f3, f2);  // top\r\n  }\r\n}\r\n\r\nexport default LightedCubeModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen } from '../lib/utility'\r\nimport LightedCubeModel from '../models/LightedCubeModel';\r\n\r\nclass LightedCubeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const model = new LightedCubeModel(gl);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [-2.0, 0.0, -5.5],\r\n          rotation: 0.0,\r\n          rotationSpeed: 1.0,\r\n          perPixel: false\r\n        },\r\n        {\r\n          model,\r\n          location: [2.0, 0.0, -5.5],\r\n          rotation: 0.0,\r\n          rotationSpeed: 1.0,\r\n          perPixel: true\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0],\r\n      cameraDir: [0.0, 0.0, 2.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n\r\n    if (scene.camera[2] > 16.0) {\r\n      scene.camera[2] = 16.0;\r\n      scene.cameraDir[2] = -2.0;\r\n    } else if (scene.camera[2] < 0.0) {\r\n      scene.camera[2] = 0.0;\r\n      scene.cameraDir[2] = 2.0;\r\n    }\r\n\r\n    scene.camera[0] += scene.cameraDir[0] * deltaTime;\r\n    scene.camera[1] += scene.cameraDir[1] * deltaTime;\r\n    scene.camera[2] += scene.cameraDir[2] * deltaTime;\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation, [0, 0, 1]);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation * 0.7, [0, 1, 0]);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation * 0.3, [1, 0, 0]);\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix, actor.perPixel);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    actor.rotation += deltaTime * actor.rotationSpeed;\r\n  }\r\n}\r\n\r\nexport default LightedCubeScene;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { initShaderProgram } from '../lib/utility'\r\n\r\nclass MazeModel {\r\n  constructor(gl, maze) {\r\n    this.gl = gl;\r\n    this.maze = maze;\r\n    this.draw = this.draw.bind(this);\r\n    const shaderProgram = this._initShaders(gl);\r\n    this.model = {\r\n      program: shaderProgram,\r\n      attribLocations: {\r\n        vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\r\n        vertexColor: gl.getAttribLocation(shaderProgram, 'aVertexColor')\r\n      },\r\n      uniformLocations: {\r\n        projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\r\n        modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix')\r\n      },\r\n      buffers: this._initBuffers(gl, maze)\r\n    }\r\n  }\r\n\r\n  update(maze) {\r\n    this._freeBuffers(this.gl, this.model.buffers);\r\n    this.maze = maze;\r\n    this.model.buffers = this._initBuffers(this.gl, maze);\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix) {\r\n    const gl = this.gl;\r\n    const model = this.model;\r\n    const { buffers } = this.model;\r\n\r\n    {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(model.attribLocations.vertexPosition, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(model.attribLocations.vertexPosition);\r\n    }\r\n\r\n    {\r\n      const numComponents = 4;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\r\n      gl.vertexAttribPointer(model.attribLocations.vertexColor, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(model.attribLocations.vertexColor);\r\n    }\r\n\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\r\n\r\n    const modelViewMatrix = mat4.create();\r\n    mat4.multiply(modelViewMatrix, viewMatrix, modelMatrix);\r\n\r\n    gl.useProgram(model.program);\r\n    gl.uniformMatrix4fv(model.uniformLocations.projectionMatrix, false, projectionMatrix);\r\n    gl.uniformMatrix4fv(model.uniformLocations.modelViewMatrix, false, modelViewMatrix);\r\n\r\n    {\r\n      const vertexCount = buffers.vertexCount;\r\n      const type = gl.UNSIGNED_INT;\r\n      const offset = 0;\r\n      gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\r\n    }\r\n  }\r\n\r\n  _initShaders(gl) {\r\n    const vsSource = `\r\n      attribute vec4 aVertexPosition;\r\n      attribute vec4 aVertexColor;\r\n\r\n      uniform mat4 uModelViewMatrix;\r\n      uniform mat4 uProjectionMatrix;\r\n\r\n      varying lowp vec4 vColor;\r\n\r\n      void main(void) {\r\n        gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n        vColor = aVertexColor;\r\n      }\r\n    `;\r\n\r\n    const fsSource = `\r\n      varying lowp vec4 vColor;\r\n\r\n      void main(void) {\r\n        gl_FragColor = vColor;\r\n      }\r\n    `;\r\n\r\n    return initShaderProgram(gl, vsSource, fsSource);\r\n  }\r\n\r\n  _initBuffers(gl, maze) {\r\n    const positions = []\r\n    const colors = [];\r\n    const indices = [];\r\n    let offset = 0;\r\n\r\n    const addSquareXY = (left, right, top, bottom, base, color) => {\r\n      positions.push\r\n        (\r\n          left, top, base,\r\n          right, top, base,\r\n          right, bottom, base,\r\n          left, bottom, base\r\n        );\r\n      indices.push\r\n        (\r\n          offset + 0, offset + 1, offset + 2, offset + 0, offset + 2, offset + 3\r\n        );\r\n      offset += 4;\r\n      for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 4; j++) {\r\n          colors.push(color[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    const addSquareXZ = (left, right, top, bottom, base, color) => {\r\n      positions.push\r\n        (\r\n          left, base, top,\r\n          right, base, top,\r\n          right, base, bottom,\r\n          left, base, bottom\r\n        );\r\n      indices.push\r\n        (\r\n          offset + 0, offset + 1, offset + 2, offset + 0, offset + 2, offset + 3\r\n        );\r\n      offset += 4;\r\n      for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 4; j++) {\r\n          colors.push(color[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    const addSquareYZ = (left, right, top, bottom, base, color) => {\r\n      positions.push\r\n        (\r\n          base, left, top,\r\n          base, right, top,\r\n          base, right, bottom,\r\n          base, left, bottom\r\n        );\r\n      indices.push\r\n        (\r\n          offset + 0, offset + 1, offset + 2, offset + 0, offset + 2, offset + 3\r\n        );\r\n      offset += 4;\r\n      for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 4; j++) {\r\n          colors.push(color[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    const floorColor = [.2, .2, .2, 1.0];\r\n    const ceilingColor = [.7, .7, .7, 1];\r\n    const wallColor_Top = [.5, 0, .5, 1];\r\n    const wallColor_Bottom = [0, .5, 0, 1];\r\n    const wallColor_Left = [.5, 0, 0, 1];\r\n    const wallColor_Right = [0, .0, .5, 1];\r\n\r\n    const ofs_x = -maze.width / 2;\r\n    const ofs_y = -maze.height / 2;\r\n    for (let y = 0; y < maze.height; y++) {\r\n      for (let x = 0; x < maze.width; x++) {\r\n        const left = x + ofs_x;\r\n        const right = left + 1;\r\n        const top = y + ofs_y;\r\n        const bottom = top + 1;\r\n\r\n        if (maze.data[y][x] === 0) {\r\n          addSquareXY(left, right, top, bottom, 0.0, floorColor);\r\n        } else {\r\n          addSquareXY(left, right, top, bottom, 1.0, ceilingColor);\r\n\r\n          if (y === 0 || maze.data[y - 1][x] === 0) {\r\n            addSquareXZ(left, right, 0.0, 1.0, top, wallColor_Top);\r\n          }\r\n\r\n          if (x === 0 || maze.data[y][x - 1] === 0) {\r\n            addSquareYZ(bottom, top, 0.0, 1.0, left, wallColor_Left);\r\n          }\r\n\r\n          if (y === maze.height - 1 || maze.data[y + 1][x] === 0) {\r\n            addSquareXZ(right, left, 0.0, 1.0, bottom, wallColor_Bottom);\r\n          }\r\n\r\n          if (x === maze.width - 1 || maze.data[y][x + 1] === 0) {\r\n            addSquareYZ(top, bottom, 0.0, 1.0, right, wallColor_Right);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const colorBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\r\n\r\n    const indexBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint32Array(indices), gl.STATIC_DRAW);\r\n\r\n    return { position: positionBuffer, color: colorBuffer, indices: indexBuffer, vertexCount: indices.length };\r\n  }\r\n\r\n  _freeBuffers(gl, buffers) {\r\n    gl.deleteBuffer(buffers.position);\r\n    gl.deleteBuffer(buffers.color);\r\n    gl.deleteBuffer(buffers.indices);\r\n  }\r\n}\r\n\r\nexport default MazeModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen, degreesToRadians, generateMaze } from '../lib/utility'\r\nimport MazeModel from '../models/MazeModel';\r\n\r\nclass MazeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n    this.totalDelta = 0.0;\r\n  }\r\n\r\n  initScene(gl) {\r\n    const size = Math.floor(Math.random() * 45) * 2 + 11;\r\n    const maze = generateMaze(size, size);\r\n    const model = new MazeModel(gl, maze);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [0.0, 0.0, -2.0 * size],\r\n          rotation: { angle: 0.0, axis: [0, 0, 1], speed: 0.5 }\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0],\r\n      cameraDir: [0.0, 0.0, 8.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 500.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    mat4.rotate(modelMatrix, modelMatrix, degreesToRadians(-45), [1, 0, 0]);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation.angle, actor.rotation.axis);\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    actor.rotation.angle += deltaTime * actor.rotation.speed;\r\n    this.totalDelta += deltaTime;\r\n    if (this.totalDelta >= 10.0) {\r\n      this.totalDelta -= 10.0;\r\n      const size = Math.floor(Math.random() * 45) * 2 + 11;\r\n      const maze = generateMaze(size, size);\r\n      actor.location[2] = -2.0 * size;\r\n      actor.model.update(maze);\r\n    }\r\n  }\r\n}\r\n\r\nexport default MazeScene;\r\n","import Model from './Model';\r\n\r\nclass BrickWallModel extends Model {\r\n  constructor(gl) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: this._geometry,\r\n      texture: {\r\n        diffuse: 'images/Brick_Wall_017_basecolor.jpg',\r\n        normal: 'images/Brick_Wall_017_normal.jpg',\r\n        height: 'images/Brick_Wall_017_height.png'\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/brickwall/vertex.glsl',\r\n        fragment: 'shaders/brickwall/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix,\r\n      showDiffuseMap: 1,\r\n      showNormalMap: 1,\r\n      parallaxHeightScale: 0.04,\r\n      parallaxSteps: 32,\r\n      ambientLight: [0.2, 0.2, 0.2],\r\n      directionalLight: {\r\n        color: [0.5, 0.5, 0.5],\r\n        direction: [0.0, -1.0, 1.0]\r\n      },\r\n      pointLight: {\r\n        color: [1.0, 1.0, 1.0],\r\n        position: [0.0, 0.0, 0.0]\r\n      },\r\n      cameraPosition: [0.0, 0.0, 0.0]\r\n    });\r\n  }\r\n\r\n  _geometry({ addSquare }) {\r\n    const f0 = [-1, -1, 1];\r\n    const f1 = [1, -1, 1];\r\n    const f2 = [1, 1, 1];\r\n    const f3 = [-1, 1, 1];\r\n    const b0 = [-1, -1, -1];\r\n    const b1 = [1, -1, -1];\r\n    const b2 = [1, 1, -1];\r\n    const b3 = [-1, 1, -1];\r\n    addSquare(f0, f1, f2, f3);  // front\r\n    addSquare(b1, b0, b3, b2);  // back\r\n    addSquare(b0, f0, f3, b3);  // left\r\n    addSquare(f1, b1, b2, f2);  // right\r\n    addSquare(b0, b1, f1, f0);  // top\r\n    addSquare(b2, b3, f3, f2);  // bottom\r\n  }\r\n}\r\n\r\nexport default BrickWallModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen } from '../lib/utility'\r\nimport BrickWallModel from '../models/BrickWallModel';\r\n\r\nclass BrickWallScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const model = new BrickWallModel(gl);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [0.0, 0.0, -5.5],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.4\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.2\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      mat4.rotate(modelMatrix, modelMatrix, rotation.angle, rotation.axis);\r\n    }\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      rotation.angle += deltaTime * rotation.speed;\r\n    }\r\n  }\r\n}\r\n\r\nexport default BrickWallScene;\r\n","import Model from './Model';\r\nimport { getShape } from '../lib/utility';\r\n\r\nclass MaterialModel extends Model {\r\n  constructor(gl, shapeName) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: ({ addFaces }) => {\r\n        const shape = getShape(shapeName);\r\n        addFaces(shape.vertices, shape.faces);\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/material/vertex.glsl',\r\n        fragment: 'shaders/material/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix, lights, material) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix,\r\n      lights,\r\n      material\r\n    });\r\n  }\r\n}\r\n\r\nexport default MaterialModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen, getMaterial } from '../lib/utility'\r\nimport MaterialModel from '../models/MaterialModel';\r\n\r\nclass MaterialScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const model4 = new MaterialModel(gl, 'tetrahedron');\r\n    const model6 = new MaterialModel(gl, 'cube');\r\n    const model8 = new MaterialModel(gl, 'octahedron');\r\n    const model10 = new MaterialModel(gl, 'pentagonaltrapezohedron');\r\n    const model12 = new MaterialModel(gl, 'dodecahedron');\r\n    const model20 = new MaterialModel(gl, 'icosahedron');\r\n\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model: model4,\r\n          material: getMaterial('gold'),\r\n          location: [-3.75, 0.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model6,\r\n          material: getMaterial('gold'),\r\n          location: [-2.25, 0.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model8,\r\n          material: getMaterial('gold'),\r\n          location: [-0.75, 0.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model10,\r\n          material: getMaterial('gold'),\r\n          location: [0.75, 0.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model12,\r\n          material: getMaterial('gold'),\r\n          location: [2.25, 0.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model20,\r\n          material: getMaterial('gold'),\r\n          location: [3.75, 0.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model4,\r\n          material: getMaterial('chrome'),\r\n          location: [-3.75, 2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model6,\r\n          material: getMaterial('chrome'),\r\n          location: [-2.25, 2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model8,\r\n          material: getMaterial('chrome'),\r\n          location: [-0.75, 2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model10,\r\n          material: getMaterial('chrome'),\r\n          location: [0.75, 2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model12,\r\n          material: getMaterial('chrome'),\r\n          location: [2.25, 2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model20,\r\n          material: getMaterial('chrome'),\r\n          location: [3.75, 2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model4,\r\n          material: getMaterial('obsidian'),\r\n          location: [-3.75, -2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model6,\r\n          material: getMaterial('obsidian'),\r\n          location: [-2.25, -2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model8,\r\n          material: getMaterial('obsidian'),\r\n          location: [-0.75, -2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model10,\r\n          material: getMaterial('obsidian'),\r\n          location: [0.75, -2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model12,\r\n          material: getMaterial('obsidian'),\r\n          location: [2.25, -2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model20,\r\n          material: getMaterial('obsidian'),\r\n          location: [3.75, -2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      mat4.rotate(modelMatrix, modelMatrix, rotation.angle, rotation.axis);\r\n    }\r\n\r\n    const lights = [\r\n      {\r\n        position: [10.0, -10.0, 0.0],\r\n        ambient: [0.2, 0.2, 0.2],\r\n        diffuse: [0.5, 0.5, 0.5],\r\n        specular: [0.9, 0.9, 0.9]\r\n      },\r\n      {\r\n        position: [-10.0, 10.0, 0.0],\r\n        ambient: [0.2, 0.2, 0.2],\r\n        diffuse: [0.5, 0.5, 0.5],\r\n        specular: [0.9, 0.9, 0.9]\r\n      }\r\n    ];\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix, lights, actor.material);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      rotation.angle += deltaTime * rotation.speed;\r\n    }\r\n  }\r\n}\r\n\r\nexport default MaterialScene;\r\n","import React from 'react';\r\nimport ColoredSquareScene from '../scenes/ColoredSquareScene';\r\nimport ColoredCubeScene from '../scenes/ColoredCubeScene';\r\nimport TexturedCubeScene from '../scenes/TexturedCubeScene';\r\nimport LightedCubeScene from '../scenes/LightedCubeScene';\r\nimport MazeScene from '../scenes/MazeScene';\r\nimport BrickWallScene from '../scenes/BrickWallScene';\r\nimport MaterialScene from '../scenes/MaterialScene';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onClickCanvas = this.onClickCanvas.bind(this);\r\n    this.renderCanvas = this.renderCanvas.bind(this);\r\n    this.scenes = [\r\n      { init: false, render: new ColoredSquareScene() },\r\n      { init: false, render: new ColoredCubeScene() },\r\n      { init: false, render: new TexturedCubeScene() },\r\n      { init: false, render: new LightedCubeScene() },\r\n      { init: false, render: new MazeScene() },\r\n      { init: false, render: new BrickWallScene() },\r\n      { init: false, render: new MaterialScene() }\r\n    ];\r\n    this.sceneIndex = this.scenes.length - 1;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const canvas = this.canvas;\r\n    const rect = canvas.getBoundingClientRect()\r\n    canvas.width = rect.width;\r\n    canvas.height = rect.height;\r\n    this.gl = canvas.getContext('webgl');\r\n    if (this.gl === null) {\r\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n    } else {\r\n      this.gl.enable(this.gl.CULL_FACE);\r\n      this.gl.cullFace(this.gl.BACK);\r\n      this.gl.getExtension('OES_element_index_uint');\r\n      const scene = this.scenes[this.sceneIndex];\r\n      if (!scene.init) {\r\n        scene.init = true;\r\n        scene.render.initScene(this.gl);\r\n      }\r\n      this.frame = window.requestAnimationFrame(this.renderCanvas);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.cancelAnimationFrame(this.frame);\r\n  }\r\n\r\n  onClickCanvas(event) {\r\n    event.preventDefault();\r\n    this.sceneIndex = (this.sceneIndex + 1) % this.scenes.length;\r\n    const scene = this.scenes[this.sceneIndex];\r\n    if (!scene.init) {\r\n      scene.init = true;\r\n      scene.render.initScene(this.gl);\r\n    }\r\n  }\r\n\r\n  renderCanvas(timeStamp) {\r\n    timeStamp *= 0.001;\r\n    if (!this.timeStamp) {\r\n      this.timeStamp = timeStamp;\r\n    }\r\n    const deltaTime = timeStamp - this.timeStamp;\r\n    this.timeStamp = timeStamp;\r\n    const scene = this.scenes[this.sceneIndex];\r\n    scene.render.drawScene(this.gl, deltaTime);\r\n    this.frame = window.requestAnimationFrame(this.renderCanvas);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"screen\">\r\n        <canvas className=\"canvas\" ref={elem => this.canvas = elem} onClick={this.onClickCanvas}></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}