{"version":3,"sources":["utility.js","ColoredSquareScene.js","ColoredCubeScene.js","TexturedCubeScene.js","LightedCubeModel.js","LightedCubeScene.js","MazeModel.js","MazeScene.js","BrickWallModel.js","Model.js","BrickWallScene.js","App.js","serviceWorker.js","index.js"],"names":["initShaderProgram","gl","vsSource","fsSource","vertexShader","_loadShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","alert","getProgramInfoLog","_typeToString","type","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","loadTexture","url","texture","createTexture","bindTexture","TEXTURE_2D","internalFormat","RGBA","srcFormat","srcType","UNSIGNED_BYTE","pixel","Uint8Array","texImage2D","image","Image","onload","_isPowerOf2","width","height","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","src","value","clearScreen","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","_directions","x","y","generateMaze","windiness","carve","pos","data","canCarve","dir","isInBounds","addDir","nxt","len","push","Array","fill","lastDir","start","cells","length","cell","posCells","i","includes","Math","random","floor","pop","ColoredSquareScene","this","initScene","bind","drawScene","programInfo","program","attribLocations","vertexPosition","getAttribLocation","vertexColor","uniformLocations","projectionMatrix","getUniformLocation","modelViewMatrix","buffers","_initBuffers","scene","squareRotation","deltaTime","bindBuffer","ARRAY_BUFFER","color","vertexAttribPointer","enableVertexAttribArray","position","fieldOfView","PI","aspect","canvas","clientWidth","clientHeight","mat4","useProgram","uniformMatrix4fv","drawArrays","TRIANGLE_STRIP","createBuffer","bufferData","Float32Array","STATIC_DRAW","ColoredCubeScene","cubeRotation","ELEMENT_ARRAY_BUFFER","indices","UNSIGNED_SHORT","drawElements","TRIANGLES","positionBuffer","faceColors","colors","j","c","concat","colorBuffer","indexBuffer","Uint16Array","TexturedCubeScene","textureCoord","uSampler","activeTexture","TEXTURE0","uniform1i","textureCoordBuffer","LightedCubeModel","draw","_initShaders","shaderProgramPerPixel","_initShadersPerPixel","model","vertexNormal","normalMatrix","ambientLight","directionalLight","direction","pointLight","shaderPerPixel","viewMatrix","modelMatrix","perPixel","normal","uniform3f","vec3","uniform3fv","normalBuffer","LightedCubeScene","actors","location","rotation","rotationSpeed","camera","cameraDir","actor","_renderActor","_animateActor","MazeModel","maze","_freeBuffers","vertexCount","UNSIGNED_INT","positions","offset","addSquareXY","left","right","top","bottom","base","addSquareXZ","addSquareYZ","floorColor","ceilingColor","wallColor_Top","wallColor_Bottom","wallColor_Left","wallColor_Right","ofs_x","ofs_y","Uint32Array","deleteBuffer","MazeScene","totalDelta","size","angle","axis","speed","update","BrickWallModel","_initModel","geometry","_geometry","diffuse","vertex","fragment","_drawModel","textureShow","cameraPosition","addSquare","f0","f1","f2","f3","b0","b1","b2","b3","options","Promise","all","fetch","then","response","text","shaderParameters","attributeCount","ACTIVE_ATTRIBUTES","attributes","attribute","getActiveAttrib","name","uniformCount","ACTIVE_UNIFORMS","uniforms","uniform","getActiveUniform","getShaderParameters","forEach","vertexTangent","vertexBitangent","vertexTextureCoord","textureNormal","textureDiffuse","tangents","bitangents","textureCoordinates","tangent","bitangent","c0","c1","c2","c3","tangentBuffer","bitangentBuffer","TEXTURE1","BrickWallScene","rotations","App","props","onClickCanvas","renderCanvas","scenes","init","render","sceneIndex","rect","getBoundingClientRect","getContext","CULL_FACE","cullFace","BACK","getExtension","frame","window","requestAnimationFrame","cancelAnimationFrame","event","preventDefault","timeStamp","className","ref","elem","onClick","React","Component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.43c2c142.chunk.js","sourcesContent":["export function degreesToRadians(degrees) {\r\n  var pi = Math.PI;\r\n  return degrees * (pi / 180);\r\n}\r\n\r\nexport function initShaderProgram(gl, vsSource, fsSource) {\r\n  const vertexShader = _loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n  const fragmentShader = _loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n  const shaderProgram = gl.createProgram();\r\n  gl.attachShader(shaderProgram, vertexShader);\r\n  gl.attachShader(shaderProgram, fragmentShader);\r\n  gl.linkProgram(shaderProgram);\r\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n    alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n    return null;\r\n  }\r\n  return shaderProgram;\r\n}\r\n\r\nexport function getShaderParameters(gl, shaderProgram) {\r\n  const attributeCount = gl.getProgramParameter(shaderProgram, gl.ACTIVE_ATTRIBUTES);\r\n  const attributes = [];\r\n  for (let i = 0; i < attributeCount; i++) {\r\n    const attribute = gl.getActiveAttrib(shaderProgram, i);\r\n    attributes.push({ name: attribute.name, type: _typeToString(gl, attribute.type) });\r\n  }\r\n  const uniformCount = gl.getProgramParameter(shaderProgram, gl.ACTIVE_UNIFORMS);\r\n  const uniforms = [];\r\n  for (let i = 0; i < uniformCount; i++) {\r\n    const uniform = gl.getActiveUniform(shaderProgram, i);\r\n    uniforms.push({ name: uniform.name, type: _typeToString(gl, uniform.type) });\r\n  }\r\n  return {\r\n    attributes,\r\n    uniforms\r\n  };\r\n}\r\n\r\nfunction _typeToString(gl, type) {\r\n  switch (type) {\r\n    case gl.FLOAT:\r\n      return \"FLOAT\";\r\n    case gl.FLOAT_VEC2:\r\n      return \"FLOAT_VEC2\";\r\n    case gl.FLOAT_VEC3:\r\n      return \"FLOAT_VEC3\";\r\n    case gl.FLOAT_VEC4:\r\n      return \"FLOAT_VEC4\";\r\n    case gl.INT:\r\n      return \"INT\";\r\n    case gl.INT_VEC2:\r\n      return \"INT_VEC2\";\r\n    case gl.INT_VEC3:\r\n      return \"INT_VEC3\";\r\n    case gl.INT_VEC4:\r\n      return \"INT_VEC4\";\r\n    case gl.BOOL:\r\n      return \"BOOL\";\r\n    case gl.BOOL_VEC2:\r\n      return \"BOOL_VEC2\";\r\n    case gl.BOOL_VEC3:\r\n      return \"BOOL_VEC3\";\r\n    case gl.BOOL_VEC4:\r\n      return \"BOOL_VEC4\";\r\n    case gl.FLOAT_MAT2:\r\n      return \"FLOAT_MAT2\";\r\n    case gl.FLOAT_MAT3:\r\n      return \"FLOAT_MAT3\";\r\n    case gl.FLOAT_MAT4:\r\n      return \"FLOAT_MAT4\";\r\n    case gl.SAMPLER_2D:\r\n      return \"SAMPLER_2D\";\r\n    case gl.SAMPLER_CUBE:\r\n      return \"SAMPLER_CUBE\";\r\n    default:\r\n      return \"UNKNOWN\";\r\n  }\r\n}\r\n\r\nfunction _loadShader(gl, type, source) {\r\n  const shader = gl.createShader(type);\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\r\n    gl.deleteShader(shader);\r\n    return null;\r\n  }\r\n  return shader;\r\n}\r\n\r\nexport function loadTexture(gl, url) {\r\n  const texture = gl.createTexture();\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n  const level = 0;\r\n  const internalFormat = gl.RGBA;\r\n  const width = 1;\r\n  const height = 1;\r\n  const border = 0;\r\n  const srcFormat = gl.RGBA;\r\n  const srcType = gl.UNSIGNED_BYTE;\r\n  const pixel = new Uint8Array([0, 0, 255, 255]);\r\n  gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, srcFormat, srcType, pixel);\r\n  const image = new Image();\r\n  image.onload = () => {\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\r\n      srcFormat, srcType, image);\r\n    if (_isPowerOf2(image.width) && _isPowerOf2(image.height)) {\r\n      gl.generateMipmap(gl.TEXTURE_2D);\r\n    } else {\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n  };\r\n  image.src = url;\r\n  return texture;\r\n}\r\n\r\nfunction _isPowerOf2(value) {\r\n  return (value & (value - 1)) === 0;\r\n}\r\n\r\nexport function clearScreen(gl) {\r\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n  gl.clearDepth(1.0);\r\n  gl.enable(gl.DEPTH_TEST);\r\n  gl.depthFunc(gl.LEQUAL);\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n}\r\n\r\nconst _directions = [\r\n  { x: -1, y: 0 },\r\n  { x: 0, y: -1 },\r\n  { x: 1, y: 0 },\r\n  { x: 0, y: 1 }\r\n];\r\n\r\nexport function generateMaze(width, height, windiness = 0.8) {\r\n  const carve = (pos) => {\r\n    data[pos.y][pos.x] = 0;\r\n  }\r\n\r\n  const canCarve = (pos, dir) => {\r\n    if (!isInBounds(addDir(pos, dir, 3))) {\r\n      return false;\r\n    }\r\n    const nxt = addDir(pos, dir, 2);\r\n    return data[nxt.y][nxt.x] === 1;\r\n  }\r\n\r\n  const isInBounds = (pos) => {\r\n    if (pos.x < 0 || pos.y < 0 || pos.x >= width || pos.y >= height) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const addDir = (pos, dir, len) => {\r\n    return {\r\n      x: pos.x + dir.x * len,\r\n      y: pos.y + dir.y * len\r\n    }\r\n  }\r\n\r\n  const data = [];\r\n  for (let y = 0; y < height; y++) {\r\n    data.push(new Array(width).fill(1));\r\n  }\r\n\r\n  const start = { x: 1, y: 1 };\r\n  const cells = [];\r\n  let lastDir;\r\n  carve(start);\r\n  cells.push(start);\r\n  while (cells.length > 0) {\r\n    const cell = cells[cells.length - 1];\r\n    const posCells = [];\r\n    for (let i = 0; i < _directions.length; i++) {\r\n      const dir = _directions[i];\r\n      if (canCarve(cell, dir)) {\r\n        posCells.push(dir);\r\n      }\r\n    }\r\n    if (posCells.length > 0) {\r\n      let dir;\r\n      if (posCells.includes(lastDir) && Math.random() > windiness) {\r\n        dir = lastDir;\r\n      } else {\r\n        dir = posCells[Math.floor(Math.random() * posCells.length)];\r\n      }\r\n      carve(addDir(cell, dir, 1));\r\n      carve(addDir(cell, dir, 2));\r\n      cells.push(addDir(cell, dir, 2));\r\n      lastDir = dir;\r\n    } else {\r\n      cells.pop();\r\n      lastDir = null;\r\n    }\r\n  }\r\n  return {\r\n    width,\r\n    height,\r\n    data\r\n  };\r\n}\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { initShaderProgram, clearScreen } from './utility'\r\n\r\nclass ColoredSquareScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const vsSource = `\r\n    attribute vec4 aVertexPosition;\r\n    attribute vec4 aVertexColor;\r\n\r\n    uniform mat4 uModelViewMatrix;\r\n    uniform mat4 uProjectionMatrix;\r\n\r\n    varying lowp vec4 vColor;\r\n\r\n    void main(void) {\r\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n      vColor = aVertexColor;\r\n    }\r\n  `;\r\n\r\n    const fsSource = `\r\n    varying lowp vec4 vColor;\r\n\r\n    void main(void) {\r\n      gl_FragColor = vColor;\r\n    }\r\n  `;\r\n\r\n    const shaderProgram = initShaderProgram(gl, vsSource, fsSource);\r\n\r\n    const programInfo = {\r\n      program: shaderProgram,\r\n      attribLocations: {\r\n        vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\r\n        vertexColor: gl.getAttribLocation(shaderProgram, 'aVertexColor')\r\n      },\r\n      uniformLocations: {\r\n        projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\r\n        modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix')\r\n      }\r\n    };\r\n\r\n    const buffers = this._initBuffers(gl);\r\n\r\n    this.scene = { programInfo, buffers, squareRotation: 0.0 };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n    const { programInfo, buffers } = scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    {\r\n      const numComponents = 4;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\r\n      gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexColor,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n      gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.vertexColor);\r\n    }\r\n\r\n    {\r\n      const numComponents = 2;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexPosition,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n      gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.vertexPosition);\r\n    }\r\n\r\n    {\r\n      const fieldOfView = 45 * Math.PI / 180;\r\n      const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n      const zNear = 0.1;\r\n      const zFar = 100.0;\r\n      const projectionMatrix = mat4.create();\r\n      mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n      const modelViewMatrix = mat4.create();\r\n      mat4.translate(modelViewMatrix, modelViewMatrix, [-0.0, 0.0, -6.0]);\r\n      mat4.rotate(modelViewMatrix, modelViewMatrix, scene.squareRotation, [0, 0, 1]);\r\n      gl.useProgram(programInfo.program);\r\n      gl.uniformMatrix4fv(\r\n        programInfo.uniformLocations.projectionMatrix,\r\n        false,\r\n        projectionMatrix);\r\n      gl.uniformMatrix4fv(\r\n        programInfo.uniformLocations.modelViewMatrix,\r\n        false,\r\n        modelViewMatrix);\r\n    }\r\n\r\n    {\r\n      const offset = 0;\r\n      const vertexCount = 4;\r\n      gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount);\r\n    }\r\n\r\n    scene.squareRotation += deltaTime;\r\n  }\r\n\r\n  _initBuffers(gl) {\r\n    const positions = [\r\n      1.0, 1.0,\r\n      -1.0, 1.0,\r\n      1.0, -1.0,\r\n      -1.0, -1.0,\r\n    ];\r\n    const position = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, position);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const colors = [\r\n      1.0, 1.0, 1.0, 1.0,\r\n      1.0, 0.0, 0.0, 1.0,\r\n      0.0, 1.0, 0.0, 1.0,\r\n      0.0, 0.0, 1.0, 1.0\r\n    ];\r\n    const color = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, color);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\r\n\r\n    return { position, color };\r\n  }\r\n}\r\n\r\nexport default ColoredSquareScene;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { initShaderProgram, clearScreen } from './utility'\r\n\r\nclass ColoredCubeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const vsSource = `\r\n    attribute vec4 aVertexPosition;\r\n    attribute vec4 aVertexColor;\r\n\r\n    uniform mat4 uModelViewMatrix;\r\n    uniform mat4 uProjectionMatrix;\r\n\r\n    varying lowp vec4 vColor;\r\n\r\n    void main(void) {\r\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n      vColor = aVertexColor;\r\n    }\r\n  `;\r\n\r\n    const fsSource = `\r\n    varying lowp vec4 vColor;\r\n\r\n    void main(void) {\r\n      gl_FragColor = vColor;\r\n    }\r\n  `;\r\n\r\n    const shaderProgram = initShaderProgram(gl, vsSource, fsSource);\r\n\r\n    const programInfo = {\r\n      program: shaderProgram,\r\n      attribLocations: {\r\n        vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\r\n        vertexColor: gl.getAttribLocation(shaderProgram, 'aVertexColor')\r\n      },\r\n      uniformLocations: {\r\n        projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\r\n        modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix')\r\n      }\r\n    };\r\n\r\n    const buffers = this._initBuffers(gl);\r\n\r\n    this.scene = { programInfo, buffers, cubeRotation: 0.0 };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n    const { programInfo, buffers } = scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexPosition,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n      gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);\r\n    }\r\n\r\n    {\r\n      const numComponents = 4;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\r\n      gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexColor,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n      gl.enableVertexAttribArray(programInfo.attribLocations.vertexColor);\r\n    }\r\n\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\r\n\r\n    {\r\n      const fieldOfView = 45 * Math.PI / 180;\r\n      const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n      const zNear = 0.1;\r\n      const zFar = 100.0;\r\n      const projectionMatrix = mat4.create();\r\n      mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n      const modelViewMatrix = mat4.create();\r\n      mat4.translate(modelViewMatrix, modelViewMatrix, [-0.0, 0.0, -6.0]);\r\n      mat4.rotate(modelViewMatrix, modelViewMatrix, scene.cubeRotation, [0, 0, 1]);\r\n      mat4.rotate(modelViewMatrix, modelViewMatrix, scene.cubeRotation * 0.7, [0, 1, 0]);\r\n      gl.useProgram(programInfo.program);\r\n      gl.uniformMatrix4fv(\r\n        programInfo.uniformLocations.projectionMatrix,\r\n        false,\r\n        projectionMatrix);\r\n      gl.uniformMatrix4fv(\r\n        programInfo.uniformLocations.modelViewMatrix,\r\n        false,\r\n        modelViewMatrix);\r\n    }\r\n\r\n    {\r\n      const vertexCount = 36;\r\n      const type = gl.UNSIGNED_SHORT;\r\n      const offset = 0;\r\n      gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\r\n    }\r\n\r\n    scene.cubeRotation += deltaTime;\r\n  }\r\n\r\n  _initBuffers(gl) {\r\n    const positions = [\r\n      // Front face\r\n      -1.0, -1.0, 1.0,\r\n      1.0, -1.0, 1.0,\r\n      1.0, 1.0, 1.0,\r\n      -1.0, 1.0, 1.0,\r\n\r\n      // Back face\r\n      -1.0, -1.0, -1.0,\r\n      -1.0, 1.0, -1.0,\r\n      1.0, 1.0, -1.0,\r\n      1.0, -1.0, -1.0,\r\n\r\n      // Top face\r\n      -1.0, 1.0, -1.0,\r\n      -1.0, 1.0, 1.0,\r\n      1.0, 1.0, 1.0,\r\n      1.0, 1.0, -1.0,\r\n\r\n      // Bottom face\r\n      -1.0, -1.0, -1.0,\r\n      1.0, -1.0, -1.0,\r\n      1.0, -1.0, 1.0,\r\n      -1.0, -1.0, 1.0,\r\n\r\n      // Right face\r\n      1.0, -1.0, -1.0,\r\n      1.0, 1.0, -1.0,\r\n      1.0, 1.0, 1.0,\r\n      1.0, -1.0, 1.0,\r\n\r\n      // Left face\r\n      -1.0, -1.0, -1.0,\r\n      -1.0, -1.0, 1.0,\r\n      -1.0, 1.0, 1.0,\r\n      -1.0, 1.0, -1.0,\r\n    ];\r\n    const positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const faceColors = [\r\n      [1.0, 1.0, 1.0, 1.0],    // Front face: white\r\n      [1.0, 0.0, 0.0, 1.0],    // Back face: red\r\n      [0.0, 1.0, 0.0, 1.0],    // Top face: green\r\n      [0.0, 0.0, 1.0, 1.0],    // Bottom face: blue\r\n      [1.0, 1.0, 0.0, 1.0],    // Right face: yellow\r\n      [1.0, 0.0, 1.0, 1.0],    // Left face: purple\r\n    ];\r\n    let colors = [];\r\n    for (let j = 0; j < faceColors.length; ++j) {\r\n      const c = faceColors[j];\r\n      colors = colors.concat(c, c, c, c);\r\n    }\r\n    const colorBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\r\n\r\n    const indices = [\r\n      0, 1, 2, 0, 2, 3,   // front\r\n      4, 5, 6, 4, 6, 7,   // back\r\n      8, 9, 10, 8, 10, 11,   // top\r\n      12, 13, 14, 12, 14, 15,   // bottom\r\n      16, 17, 18, 16, 18, 19,   // right\r\n      20, 21, 22, 20, 22, 23,   // left\r\n    ];\r\n    const indexBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\r\n\r\n    return { position: positionBuffer, color: colorBuffer, indices: indexBuffer };\r\n  }\r\n}\r\n\r\nexport default ColoredCubeScene;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { initShaderProgram, loadTexture, clearScreen } from './utility'\r\n\r\nclass TexturedCubeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const vsSource = `\r\n      attribute vec4 aVertexPosition;\r\n      attribute vec2 aTextureCoord;\r\n\r\n      uniform mat4 uModelViewMatrix;\r\n      uniform mat4 uProjectionMatrix;\r\n\r\n      varying highp vec2 vTextureCoord;\r\n\r\n      void main(void) {\r\n        gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n        vTextureCoord = aTextureCoord;\r\n      }\r\n    `;\r\n\r\n    const fsSource = `\r\n      varying highp vec2 vTextureCoord;\r\n\r\n      uniform sampler2D uSampler;\r\n\r\n      void main(void) {\r\n        gl_FragColor = texture2D(uSampler, vTextureCoord);\r\n      }\r\n    `;\r\n\r\n    const shaderProgram = initShaderProgram(gl, vsSource, fsSource);\r\n\r\n    const programInfo = {\r\n      program: shaderProgram,\r\n      attribLocations: {\r\n        vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\r\n        textureCoord: gl.getAttribLocation(shaderProgram, 'aTextureCoord')\r\n      },\r\n      uniformLocations: {\r\n        projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\r\n        modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix'),\r\n        uSampler: gl.getUniformLocation(shaderProgram, 'uSampler')\r\n      }\r\n    };\r\n\r\n    const buffers = this._initBuffers(gl);\r\n\r\n    const texture = loadTexture(gl, 'images/cubetexture.png');\r\n\r\n    this.scene = { programInfo, buffers, texture, cubeRotation: 0.0 };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n    const { programInfo, buffers, texture } = scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexPosition,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n      gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);\r\n    }\r\n\r\n    {\r\n      const numComponents = 2;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.textureCoord);\r\n      gl.vertexAttribPointer(\r\n        programInfo.attribLocations.textureCoord,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n      gl.enableVertexAttribArray(programInfo.attribLocations.textureCoord);\r\n    }\r\n\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\r\n\r\n    {\r\n      const fieldOfView = 45 * Math.PI / 180;\r\n      const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n      const zNear = 0.1;\r\n      const zFar = 100.0;\r\n      const projectionMatrix = mat4.create();\r\n      mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n      const modelViewMatrix = mat4.create();\r\n      mat4.translate(modelViewMatrix, modelViewMatrix, [-0.0, 0.0, -6.0]);\r\n      mat4.rotate(modelViewMatrix, modelViewMatrix, scene.cubeRotation, [0, 0, 1]);\r\n      mat4.rotate(modelViewMatrix, modelViewMatrix, scene.cubeRotation * 0.7, [0, 1, 0]);\r\n      gl.useProgram(programInfo.program);\r\n      gl.uniformMatrix4fv(\r\n        programInfo.uniformLocations.projectionMatrix,\r\n        false,\r\n        projectionMatrix);\r\n      gl.uniformMatrix4fv(\r\n        programInfo.uniformLocations.modelViewMatrix,\r\n        false,\r\n        modelViewMatrix);\r\n    }\r\n\r\n    {\r\n      gl.activeTexture(gl.TEXTURE0);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n      gl.uniform1i(programInfo.uniformLocations.uSampler, 0);\r\n      const vertexCount = 36;\r\n      const type = gl.UNSIGNED_SHORT;\r\n      const offset = 0;\r\n      gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\r\n    }\r\n\r\n    scene.cubeRotation += deltaTime;\r\n  }\r\n\r\n  _initBuffers(gl) {\r\n    const positions = [\r\n      // Front face\r\n      -1.0, -1.0, 1.0,\r\n      1.0, -1.0, 1.0,\r\n      1.0, 1.0, 1.0,\r\n      -1.0, 1.0, 1.0,\r\n\r\n      // Back face\r\n      -1.0, -1.0, -1.0,\r\n      -1.0, 1.0, -1.0,\r\n      1.0, 1.0, -1.0,\r\n      1.0, -1.0, -1.0,\r\n\r\n      // Top face\r\n      -1.0, 1.0, -1.0,\r\n      -1.0, 1.0, 1.0,\r\n      1.0, 1.0, 1.0,\r\n      1.0, 1.0, -1.0,\r\n\r\n      // Bottom face\r\n      -1.0, -1.0, -1.0,\r\n      1.0, -1.0, -1.0,\r\n      1.0, -1.0, 1.0,\r\n      -1.0, -1.0, 1.0,\r\n\r\n      // Right face\r\n      1.0, -1.0, -1.0,\r\n      1.0, 1.0, -1.0,\r\n      1.0, 1.0, 1.0,\r\n      1.0, -1.0, 1.0,\r\n\r\n      // Left face\r\n      -1.0, -1.0, -1.0,\r\n      -1.0, -1.0, 1.0,\r\n      -1.0, 1.0, 1.0,\r\n      -1.0, 1.0, -1.0,\r\n    ];\r\n    const positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const textureCoordinates = [\r\n      // Front\r\n      0.0, 0.0,\r\n      1.0, 0.0,\r\n      1.0, 1.0,\r\n      0.0, 1.0,\r\n      // Back\r\n      0.0, 0.0,\r\n      1.0, 0.0,\r\n      1.0, 1.0,\r\n      0.0, 1.0,\r\n      // Top\r\n      0.0, 0.0,\r\n      1.0, 0.0,\r\n      1.0, 1.0,\r\n      0.0, 1.0,\r\n      // Bottom\r\n      0.0, 0.0,\r\n      1.0, 0.0,\r\n      1.0, 1.0,\r\n      0.0, 1.0,\r\n      // Right\r\n      0.0, 0.0,\r\n      1.0, 0.0,\r\n      1.0, 1.0,\r\n      0.0, 1.0,\r\n      // Left\r\n      0.0, 0.0,\r\n      1.0, 0.0,\r\n      1.0, 1.0,\r\n      0.0, 1.0,\r\n    ];\r\n    const textureCoordBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, textureCoordBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW);\r\n\r\n    const indices = [\r\n      0, 1, 2, 0, 2, 3,   // front\r\n      4, 5, 6, 4, 6, 7,   // back\r\n      8, 9, 10, 8, 10, 11,   // top\r\n      12, 13, 14, 12, 14, 15,   // bottom\r\n      16, 17, 18, 16, 18, 19,   // right\r\n      20, 21, 22, 20, 22, 23,   // left\r\n    ];\r\n    const indexBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\r\n\r\n    return { position: positionBuffer, textureCoord: textureCoordBuffer, indices: indexBuffer };\r\n  }\r\n}\r\n\r\nexport default TexturedCubeScene;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport * as vec3 from 'gl-matrix/vec3';\r\nimport { loadTexture, initShaderProgram } from './utility'\r\n\r\nclass LightedCubeModel {\r\n  constructor(gl) {\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    const shaderProgram = this._initShaders(gl);\r\n    const shaderProgramPerPixel = this._initShadersPerPixel(gl);\r\n    this.model = {\r\n      shader: {\r\n        program: shaderProgram,\r\n        attribLocations: {\r\n          vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\r\n          vertexNormal: gl.getAttribLocation(shaderProgram, 'aVertexNormal'),\r\n          textureCoord: gl.getAttribLocation(shaderProgram, 'aTextureCoord')\r\n        },\r\n        uniformLocations: {\r\n          projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\r\n          modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix'),\r\n          normalMatrix: gl.getUniformLocation(shaderProgram, 'uNormalMatrix'),\r\n          uSampler: gl.getUniformLocation(shaderProgram, 'uSampler'),\r\n          ambientLight: gl.getUniformLocation(shaderProgram, 'uAmbientLight'),\r\n          directionalLight: {\r\n            direction: gl.getUniformLocation(shaderProgram, 'uDirectionalLight.direction'),\r\n            color: gl.getUniformLocation(shaderProgram, 'uDirectionalLight.color')\r\n          },\r\n          pointLight: {\r\n            position: gl.getUniformLocation(shaderProgram, 'uPointLight.position'),\r\n            color: gl.getUniformLocation(shaderProgram, 'uPointLight.color')\r\n          }\r\n        }\r\n      },\r\n      shaderPerPixel: {\r\n        program: shaderProgramPerPixel,\r\n        attribLocations: {\r\n          vertexPosition: gl.getAttribLocation(shaderProgramPerPixel, 'aVertexPosition'),\r\n          vertexNormal: gl.getAttribLocation(shaderProgramPerPixel, 'aVertexNormal'),\r\n          textureCoord: gl.getAttribLocation(shaderProgramPerPixel, 'aTextureCoord')\r\n        },\r\n        uniformLocations: {\r\n          projectionMatrix: gl.getUniformLocation(shaderProgramPerPixel, 'uProjectionMatrix'),\r\n          modelViewMatrix: gl.getUniformLocation(shaderProgramPerPixel, 'uModelViewMatrix'),\r\n          normalMatrix: gl.getUniformLocation(shaderProgramPerPixel, 'uNormalMatrix'),\r\n          uSampler: gl.getUniformLocation(shaderProgramPerPixel, 'uSampler'),\r\n          ambientLight: gl.getUniformLocation(shaderProgramPerPixel, 'uAmbientLight'),\r\n          directionalLight: {\r\n            direction: gl.getUniformLocation(shaderProgramPerPixel, 'uDirectionalLight.direction'),\r\n            color: gl.getUniformLocation(shaderProgramPerPixel, 'uDirectionalLight.color')\r\n          },\r\n          pointLight: {\r\n            position: gl.getUniformLocation(shaderProgramPerPixel, 'uPointLight.position'),\r\n            color: gl.getUniformLocation(shaderProgramPerPixel, 'uPointLight.color')\r\n          }\r\n        }\r\n      },\r\n      buffers: this._initBuffers(gl),\r\n      texture: loadTexture(gl, 'images/cubetexture.png')\r\n    }\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix, perPixel) {\r\n    const gl = this.gl;\r\n    const { buffers, texture } = this.model;\r\n\r\n    let shader;\r\n    if (perPixel) {\r\n      shader = this.model.shaderPerPixel;\r\n    } else {\r\n      shader = this.model.shader;\r\n    }\r\n\r\n    {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexPosition, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexPosition);\r\n    }\r\n\r\n    {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.normal);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexNormal, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexNormal);\r\n    }\r\n\r\n    {\r\n      const numComponents = 2;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.textureCoord);\r\n      gl.vertexAttribPointer(shader.attribLocations.textureCoord, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.textureCoord);\r\n    }\r\n\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\r\n\r\n    const normalMatrix = mat4.create();\r\n    mat4.invert(normalMatrix, modelMatrix);\r\n    mat4.transpose(normalMatrix, normalMatrix);\r\n\r\n    const modelViewMatrix = mat4.create();\r\n    mat4.multiply(modelViewMatrix, viewMatrix, modelMatrix);\r\n\r\n    gl.useProgram(shader.program);\r\n    gl.uniformMatrix4fv(shader.uniformLocations.projectionMatrix, false, projectionMatrix);\r\n    gl.uniformMatrix4fv(shader.uniformLocations.modelViewMatrix, false, modelViewMatrix);\r\n    gl.uniformMatrix4fv(shader.uniformLocations.normalMatrix, false, normalMatrix);\r\n\r\n    gl.uniform3f(shader.uniformLocations.ambientLight, 0.3, 0.3, 0.3);\r\n\r\n    const direction = vec3.fromValues(0.0, 1.0, 0.0);\r\n    vec3.normalize(direction, direction);\r\n    gl.uniform3f(shader.uniformLocations.directionalLight.color, 0.5, 0.5, 0.5);\r\n    gl.uniform3fv(shader.uniformLocations.directionalLight.direction, direction);\r\n\r\n    gl.uniform3f(shader.uniformLocations.pointLight.color, 0.7, 0.7, 0.7);\r\n    gl.uniform3f(shader.uniformLocations.pointLight.position, 0.0, 0.0, 0.0);\r\n\r\n    {\r\n      gl.activeTexture(gl.TEXTURE0);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n      gl.uniform1i(shader.uniformLocations.uSampler, 0);\r\n\r\n      const vertexCount = 36;\r\n      const type = gl.UNSIGNED_SHORT;\r\n      const offset = 0;\r\n      gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\r\n    }\r\n  }\r\n\r\n  _initShaders(gl) {\r\n    const vsSource = `\r\n      attribute vec4 aVertexPosition;\r\n      attribute vec3 aVertexNormal;\r\n      attribute vec2 aTextureCoord;\r\n\r\n      uniform mat4 uProjectionMatrix;\r\n      uniform mat4 uModelViewMatrix;\r\n      uniform mat4 uNormalMatrix;\r\n      uniform vec3 uAmbientLight;\r\n      uniform struct {\r\n        vec3 direction;\r\n        vec3 color;\r\n      } uDirectionalLight;\r\n      uniform struct {\r\n        vec3 position;\r\n        vec3 color;\r\n      } uPointLight;\r\n\r\n      varying highp vec2 vTextureCoord;\r\n      varying highp vec3 vLighting;\r\n\r\n      void main(void) {\r\n        gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n        vTextureCoord = aTextureCoord;\r\n\r\n        highp vec3 transformedNormal = vec3(uNormalMatrix * vec4(aVertexNormal, 1.0));\r\n        highp float directional = max(dot(transformedNormal, uDirectionalLight.direction), 0.0);\r\n\r\n        vec3 surfaceToLight = uPointLight.position - aVertexPosition.xyz;\r\n        float bright = 50.0 * max(dot(transformedNormal, normalize(surfaceToLight)), 0.0) / (length(surfaceToLight) * length(surfaceToLight));\r\n        bright = clamp(bright, 0.0, 1.0);\r\n\r\n        vLighting = uAmbientLight + (uDirectionalLight.color * directional) + (uPointLight.color * bright);\r\n      }\r\n    `;\r\n\r\n    const fsSource = `\r\n      varying highp vec2 vTextureCoord;\r\n      varying highp vec3 vLighting;\r\n\r\n      uniform sampler2D uSampler;\r\n\r\n      void main(void) {\r\n        highp vec4 texelColor = texture2D(uSampler, vTextureCoord);\r\n        gl_FragColor = vec4(texelColor.rgb * vLighting, texelColor.a);\r\n      }\r\n    `;\r\n\r\n    return initShaderProgram(gl, vsSource, fsSource);\r\n  }\r\n\r\n  _initShadersPerPixel(gl) {\r\n    const vsSource = `\r\n      attribute vec4 aVertexPosition;\r\n      attribute vec2 aTextureCoord;\r\n      attribute vec3 aVertexNormal;\r\n\r\n      uniform mat4 uProjectionMatrix;\r\n      uniform mat4 uModelViewMatrix;\r\n      uniform mat4 uNormalMatrix;\r\n\r\n      varying vec3 vVertexPosition;\r\n      varying vec2 vTextureCoord;\r\n      varying vec3 vVertexNormal;\r\n\r\n      void main(void) {\r\n        gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n        vTextureCoord = aTextureCoord;\r\n        vVertexNormal = normalize(vec3(uNormalMatrix * vec4(aVertexNormal, 1.0)));\r\n        vVertexPosition = vec3(uModelViewMatrix * aVertexPosition);\r\n      }\r\n    `;\r\n\r\n    const fsSource = `\r\n      precision highp float;\r\n\r\n      uniform sampler2D uSampler;\r\n      uniform vec3 uAmbientLight;     \r\n      uniform struct {\r\n        vec3 direction;\r\n        vec3 color;\r\n      } uDirectionalLight;\r\n      uniform struct {\r\n        vec3 position;\r\n        vec3 color;\r\n      } uPointLight;\r\n\r\n      varying vec3 vVertexPosition;\r\n      varying vec2 vTextureCoord;\r\n      varying vec3 vVertexNormal;\r\n      \r\n      void main() {\r\n        highp float directional = max(dot(vVertexNormal, uDirectionalLight.direction), 0.0);\r\n\r\n        vec3 surfaceToLight = uPointLight.position - vVertexPosition;\r\n        float bright = 50.0 * max(dot(vVertexNormal, normalize(surfaceToLight)), 0.0) / (length(surfaceToLight) * length(surfaceToLight));\r\n        bright = clamp(bright, 0.0, 1.0);\r\n\r\n        highp vec3 lighting = uAmbientLight + (uDirectionalLight.color * directional) + (uPointLight.color * bright);\r\n\r\n        highp vec4 texelColor = texture2D(uSampler, vTextureCoord);\r\n        gl_FragColor = vec4(texelColor.rgb * lighting, texelColor.a);\r\n      }\r\n    `;\r\n\r\n    return initShaderProgram(gl, vsSource, fsSource);\r\n  }\r\n\r\n  _initBuffers(gl) {\r\n    const positions = [\r\n      // Front face\r\n      -1.0, -1.0, 1.0,\r\n      1.0, -1.0, 1.0,\r\n      1.0, 1.0, 1.0,\r\n      -1.0, 1.0, 1.0,\r\n\r\n      // Back face\r\n      -1.0, -1.0, -1.0,\r\n      -1.0, 1.0, -1.0,\r\n      1.0, 1.0, -1.0,\r\n      1.0, -1.0, -1.0,\r\n\r\n      // Top face\r\n      -1.0, 1.0, -1.0,\r\n      -1.0, 1.0, 1.0,\r\n      1.0, 1.0, 1.0,\r\n      1.0, 1.0, -1.0,\r\n\r\n      // Bottom face\r\n      -1.0, -1.0, -1.0,\r\n      1.0, -1.0, -1.0,\r\n      1.0, -1.0, 1.0,\r\n      -1.0, -1.0, 1.0,\r\n\r\n      // Right face\r\n      1.0, -1.0, -1.0,\r\n      1.0, 1.0, -1.0,\r\n      1.0, 1.0, 1.0,\r\n      1.0, -1.0, 1.0,\r\n\r\n      // Left face\r\n      -1.0, -1.0, -1.0,\r\n      -1.0, -1.0, 1.0,\r\n      -1.0, 1.0, 1.0,\r\n      -1.0, 1.0, -1.0,\r\n    ];\r\n\r\n    const positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const vertexNormals = [\r\n      // Front\r\n      0.0, 0.0, 1.0,\r\n      0.0, 0.0, 1.0,\r\n      0.0, 0.0, 1.0,\r\n      0.0, 0.0, 1.0,\r\n\r\n      // Back\r\n      0.0, 0.0, -1.0,\r\n      0.0, 0.0, -1.0,\r\n      0.0, 0.0, -1.0,\r\n      0.0, 0.0, -1.0,\r\n\r\n      // Top\r\n      0.0, 1.0, 0.0,\r\n      0.0, 1.0, 0.0,\r\n      0.0, 1.0, 0.0,\r\n      0.0, 1.0, 0.0,\r\n\r\n      // Bottom\r\n      0.0, -1.0, 0.0,\r\n      0.0, -1.0, 0.0,\r\n      0.0, -1.0, 0.0,\r\n      0.0, -1.0, 0.0,\r\n\r\n      // Right\r\n      1.0, 0.0, 0.0,\r\n      1.0, 0.0, 0.0,\r\n      1.0, 0.0, 0.0,\r\n      1.0, 0.0, 0.0,\r\n\r\n      // Left\r\n      -1.0, 0.0, 0.0,\r\n      -1.0, 0.0, 0.0,\r\n      -1.0, 0.0, 0.0,\r\n      -1.0, 0.0, 0.0\r\n    ];\r\n\r\n    const normalBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexNormals), gl.STATIC_DRAW);\r\n\r\n    const textureCoordinates = [\r\n      // Front\r\n      0.0, 0.0,\r\n      1.0, 0.0,\r\n      1.0, 1.0,\r\n      0.0, 1.0,\r\n\r\n      // Back\r\n      0.0, 0.0,\r\n      1.0, 0.0,\r\n      1.0, 1.0,\r\n      0.0, 1.0,\r\n\r\n      // Top\r\n      0.0, 0.0,\r\n      1.0, 0.0,\r\n      1.0, 1.0,\r\n      0.0, 1.0,\r\n\r\n      // Bottom\r\n      0.0, 0.0,\r\n      1.0, 0.0,\r\n      1.0, 1.0,\r\n      0.0, 1.0,\r\n\r\n      // Right\r\n      0.0, 0.0,\r\n      1.0, 0.0,\r\n      1.0, 1.0,\r\n      0.0, 1.0,\r\n\r\n      // Left\r\n      0.0, 0.0,\r\n      1.0, 0.0,\r\n      1.0, 1.0,\r\n      0.0, 1.0,\r\n    ];\r\n\r\n    const textureCoordBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, textureCoordBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW);\r\n\r\n    const indices = [\r\n      // Front\r\n      0, 1, 2, 0, 2, 3,\r\n\r\n      // Back\r\n      4, 5, 6, 4, 6, 7,\r\n\r\n      // Top\r\n      8, 9, 10, 8, 10, 11,\r\n\r\n      // Bottom\r\n      12, 13, 14, 12, 14, 15,\r\n\r\n      // Right\r\n      16, 17, 18, 16, 18, 19,\r\n\r\n      // Left\r\n      20, 21, 22, 20, 22, 23,\r\n    ];\r\n\r\n    const indexBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\r\n\r\n    return { position: positionBuffer, normal: normalBuffer, textureCoord: textureCoordBuffer, indices: indexBuffer };\r\n  }\r\n}\r\n\r\nexport default LightedCubeModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen } from './utility'\r\nimport LightedCubeModel from './LightedCubeModel';\r\n\r\nclass LightedCubeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const model = new LightedCubeModel(gl);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [-2.0, 0.0, -5.5],\r\n          rotation: 0.0,\r\n          rotationSpeed: 1.0,\r\n          perPixel: false\r\n        },\r\n        {\r\n          model,\r\n          location: [2.0, 0.0, -5.5],\r\n          rotation: 0.0,\r\n          rotationSpeed: 1.0,\r\n          perPixel: true\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0],\r\n      cameraDir: [0.0, 0.0, 2.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n\r\n    if (scene.camera[2] > 16.0) {\r\n      scene.camera[2] = 16.0;\r\n      scene.cameraDir[2] = -2.0;\r\n    } else if (scene.camera[2] < 0.0) {\r\n      scene.camera[2] = 0.0;\r\n      scene.cameraDir[2] = 2.0;\r\n    }\r\n\r\n    scene.camera[0] += scene.cameraDir[0] * deltaTime;\r\n    scene.camera[1] += scene.cameraDir[1] * deltaTime;\r\n    scene.camera[2] += scene.cameraDir[2] * deltaTime;\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation, [0, 0, 1]);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation * 0.7, [0, 1, 0]);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation * 0.3, [1, 0, 0]);\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix, actor.perPixel);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    actor.rotation += deltaTime * actor.rotationSpeed;\r\n  }\r\n}\r\n\r\nexport default LightedCubeScene;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { initShaderProgram } from './utility'\r\n\r\nclass MazeModel {\r\n  constructor(gl, maze) {\r\n    this.gl = gl;\r\n    this.maze = maze;\r\n    this.draw = this.draw.bind(this);\r\n    const shaderProgram = this._initShaders(gl);\r\n    this.model = {\r\n      program: shaderProgram,\r\n      attribLocations: {\r\n        vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\r\n        vertexColor: gl.getAttribLocation(shaderProgram, 'aVertexColor')\r\n      },\r\n      uniformLocations: {\r\n        projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\r\n        modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix')\r\n      },\r\n      buffers: this._initBuffers(gl, maze)\r\n    }\r\n  }\r\n\r\n  update(maze) {\r\n    this._freeBuffers(this.gl, this.model.buffers);\r\n    this.maze = maze;\r\n    this.model.buffers = this._initBuffers(this.gl, maze);\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix) {\r\n    const gl = this.gl;\r\n    const model = this.model;\r\n    const { buffers } = this.model;\r\n\r\n    {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(model.attribLocations.vertexPosition, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(model.attribLocations.vertexPosition);\r\n    }\r\n\r\n    {\r\n      const numComponents = 4;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\r\n      gl.vertexAttribPointer(model.attribLocations.vertexColor, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(model.attribLocations.vertexColor);\r\n    }\r\n\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\r\n\r\n    const modelViewMatrix = mat4.create();\r\n    mat4.multiply(modelViewMatrix, viewMatrix, modelMatrix);\r\n\r\n    gl.useProgram(model.program);\r\n    gl.uniformMatrix4fv(model.uniformLocations.projectionMatrix, false, projectionMatrix);\r\n    gl.uniformMatrix4fv(model.uniformLocations.modelViewMatrix, false, modelViewMatrix);\r\n\r\n    {\r\n      const vertexCount = buffers.vertexCount;\r\n      const type = gl.UNSIGNED_INT;\r\n      const offset = 0;\r\n      gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\r\n    }\r\n  }\r\n\r\n  _initShaders(gl) {\r\n    const vsSource = `\r\n      attribute vec4 aVertexPosition;\r\n      attribute vec4 aVertexColor;\r\n\r\n      uniform mat4 uModelViewMatrix;\r\n      uniform mat4 uProjectionMatrix;\r\n\r\n      varying lowp vec4 vColor;\r\n\r\n      void main(void) {\r\n        gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n        vColor = aVertexColor;\r\n      }\r\n    `;\r\n\r\n    const fsSource = `\r\n      varying lowp vec4 vColor;\r\n\r\n      void main(void) {\r\n        gl_FragColor = vColor;\r\n      }\r\n    `;\r\n\r\n    return initShaderProgram(gl, vsSource, fsSource);\r\n  }\r\n\r\n  _initBuffers(gl, maze) {\r\n    const positions = []\r\n    const colors = [];\r\n    const indices = [];\r\n    let offset = 0;\r\n\r\n    const addSquareXY = (left, right, top, bottom, base, color) => {\r\n      positions.push\r\n        (\r\n          left, top, base,\r\n          right, top, base,\r\n          right, bottom, base,\r\n          left, bottom, base\r\n        );\r\n      indices.push\r\n        (\r\n          offset + 0, offset + 1, offset + 2, offset + 0, offset + 2, offset + 3\r\n        );\r\n      offset += 4;\r\n      for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 4; j++) {\r\n          colors.push(color[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    const addSquareXZ = (left, right, top, bottom, base, color) => {\r\n      positions.push\r\n        (\r\n          left, base, top,\r\n          right, base, top,\r\n          right, base, bottom,\r\n          left, base, bottom\r\n        );\r\n      indices.push\r\n        (\r\n          offset + 0, offset + 1, offset + 2, offset + 0, offset + 2, offset + 3\r\n        );\r\n      offset += 4;\r\n      for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 4; j++) {\r\n          colors.push(color[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    const addSquareYZ = (left, right, top, bottom, base, color) => {\r\n      positions.push\r\n        (\r\n          base, left, top,\r\n          base, right, top,\r\n          base, right, bottom,\r\n          base, left, bottom\r\n        );\r\n      indices.push\r\n        (\r\n          offset + 0, offset + 1, offset + 2, offset + 0, offset + 2, offset + 3\r\n        );\r\n      offset += 4;\r\n      for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 4; j++) {\r\n          colors.push(color[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    const floorColor = [.2, .2, .2, 1.0];\r\n    const ceilingColor = [.7, .7, .7, 1];\r\n    const wallColor_Top = [.5, 0, .5, 1];\r\n    const wallColor_Bottom = [0, .5, 0, 1];\r\n    const wallColor_Left = [.5, 0, 0, 1];\r\n    const wallColor_Right = [0, .0, .5, 1];\r\n\r\n    const ofs_x = -maze.width / 2;\r\n    const ofs_y = -maze.height / 2;\r\n    for (let y = 0; y < maze.height; y++) {\r\n      for (let x = 0; x < maze.width; x++) {\r\n        const left = x + ofs_x;\r\n        const right = left + 1;\r\n        const top = y + ofs_y;\r\n        const bottom = top + 1;\r\n\r\n        if (maze.data[y][x] === 0) {\r\n          addSquareXY(left, right, top, bottom, 0.0, floorColor);\r\n        } else {\r\n          addSquareXY(left, right, top, bottom, 1.0, ceilingColor);\r\n\r\n          if (y === 0 || maze.data[y - 1][x] === 0) {\r\n            addSquareXZ(left, right, 0.0, 1.0, top, wallColor_Top);\r\n          }\r\n\r\n          if (x === 0 || maze.data[y][x - 1] === 0) {\r\n            addSquareYZ(bottom, top, 0.0, 1.0, left, wallColor_Left);\r\n          }\r\n\r\n          if (y === maze.height - 1 || maze.data[y + 1][x] === 0) {\r\n            addSquareXZ(right, left, 0.0, 1.0, bottom, wallColor_Bottom);\r\n          }\r\n\r\n          if (x === maze.width - 1 || maze.data[y][x + 1] === 0) {\r\n            addSquareYZ(top, bottom, 0.0, 1.0, right, wallColor_Right);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const colorBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\r\n\r\n    const indexBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint32Array(indices), gl.STATIC_DRAW);\r\n\r\n    return { position: positionBuffer, color: colorBuffer, indices: indexBuffer, vertexCount: indices.length };\r\n  }\r\n\r\n  _freeBuffers(gl, buffers) {\r\n    gl.deleteBuffer(buffers.position);\r\n    gl.deleteBuffer(buffers.color);\r\n    gl.deleteBuffer(buffers.indices);\r\n  }\r\n}\r\n\r\nexport default MazeModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen, degreesToRadians, generateMaze } from './utility'\r\nimport MazeModel from './MazeModel';\r\n\r\nclass MazeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n    this.totalDelta = 0.0;\r\n  }\r\n\r\n  initScene(gl) {\r\n    const size = Math.floor(Math.random() * 45) * 2 + 11;\r\n    const maze = generateMaze(size, size);\r\n    const model = new MazeModel(gl, maze);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [0.0, 0.0, -2.0 * size],\r\n          rotation: { angle: 0.0, axis: [0, 0, 1], speed: 0.5 }\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0],\r\n      cameraDir: [0.0, 0.0, 8.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 500.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    mat4.rotate(modelMatrix, modelMatrix, degreesToRadians(-45), [1, 0, 0]);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation.angle, actor.rotation.axis);\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    actor.rotation.angle += deltaTime * actor.rotation.speed;\r\n    this.totalDelta += deltaTime;\r\n    if (this.totalDelta >= 10.0) {\r\n      this.totalDelta -= 10.0;\r\n      const size = Math.floor(Math.random() * 45) * 2 + 11;\r\n      const maze = generateMaze(size, size);\r\n      actor.location[2] = -2.0 * size;\r\n      actor.model.update(maze);\r\n    }\r\n  }\r\n}\r\n\r\nexport default MazeScene;\r\n","import Model from './Model';\r\n\r\nclass BrickWallModel extends Model {\r\n  constructor(gl) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: this._geometry,\r\n      texture: {\r\n        diffuse: 'images/Brick_Wall_017_basecolor.jpg',\r\n        normal: 'images/Brick_Wall_017_normal.jpg'\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/brickwall/vertex.glsl',\r\n        fragment: 'shaders/brickwall/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix,\r\n      textureShow: 1,\r\n      ambientLight: [0.2, 0.2, 0.2],\r\n      directionalLight: {\r\n        color: [1.0, 1.0, 1.0],\r\n        direction: [0.0, 1.0, 0.0]\r\n      },\r\n      pointLight: {\r\n        color: [1.0, 1.0, 1.0],\r\n        position: [0.0, 0.0, 0.0]\r\n      },\r\n      cameraPosition: [0.0, 0.0, 0.0]\r\n    });\r\n  }\r\n\r\n  _geometry({ addSquare }) {\r\n    const f0 = [-1, -1, 1];\r\n    const f1 = [1, 1, 1];\r\n    const f2 = [-1, 1, 1];\r\n    const f3 = [1, -1, 1];\r\n    const b0 = [-1, -1, -1];\r\n    const b1 = [1, 1, -1];\r\n    const b2 = [-1, 1, -1];\r\n    const b3 = [1, -1, -1];\r\n    addSquare(f0, f1, f2, f3);  // front\r\n    addSquare(b3, b2, b1, b0);  // back\r\n    addSquare(b0, f2, b2, f0);  // left\r\n    addSquare(f3, b1, f1, b3);  // right\r\n    addSquare(b0, f3, f0, b3);  // bottom\r\n    addSquare(b1, f2, f1, b2);  // top\r\n  }\r\n}\r\n\r\nexport default BrickWallModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport * as vec3 from 'gl-matrix/vec3';\r\nimport { loadTexture, initShaderProgram, getShaderParameters } from './utility'\r\n\r\nclass Model {\r\n  _initModel(options) {\r\n    const { gl, geometry } = options;\r\n    let texture\r\n    if (options.texture) {\r\n      texture = {};\r\n      texture.diffuse = loadTexture(gl, options.texture.diffuse);\r\n      texture.normal = loadTexture(gl, options.texture.normal);\r\n    }\r\n    let vertexShader;\r\n    let fragmentShader;\r\n    Promise.all([\r\n      fetch(options.shader.vertex).then((response) => response.text()).then((text) => vertexShader = text),\r\n      fetch(options.shader.fragment).then((response) => response.text()).then((text) => fragmentShader = text)\r\n    ]).then(() => {\r\n      const shaderProgram = initShaderProgram(gl, vertexShader, fragmentShader);\r\n      const shaderParameters = getShaderParameters(gl, shaderProgram);\r\n      const shader = {\r\n        program: shaderProgram,\r\n        attribLocations: {},\r\n        uniformLocations: {\r\n          directionalLight: {},\r\n          pointLight: {}\r\n        }\r\n      };\r\n      shaderParameters.attributes.forEach((attribute) => {\r\n        const location = gl.getAttribLocation(shaderProgram, attribute.name)\r\n        switch (attribute.name) {\r\n          case 'aVertexPosition':\r\n            shader.attribLocations.vertexPosition = location;\r\n            break;\r\n          case 'aVertexTangent':\r\n            shader.attribLocations.vertexTangent = location;\r\n            break;\r\n          case 'aVertexBitangent':\r\n            shader.attribLocations.vertexBitangent = location;\r\n            break;\r\n          case 'aTextureCoord':\r\n            shader.attribLocations.vertexTextureCoord = location;\r\n            break;\r\n          default:\r\n            alert('unknown attribute of ' + attribute.name);\r\n        }\r\n      });\r\n      shaderParameters.uniforms.forEach((uniform) => {\r\n        const location = gl.getUniformLocation(shaderProgram, uniform.name)\r\n        switch (uniform.name) {\r\n          case 'uModelMatrix':\r\n            shader.uniformLocations.modelMatrix = location;\r\n            break;\r\n          case 'uViewMatrix':\r\n            shader.uniformLocations.viewMatrix = location;\r\n            break;\r\n          case 'uNormalMatrix':\r\n            shader.uniformLocations.normalMatrix = location;\r\n            break;\r\n          case 'uProjectionMatrix':\r\n            shader.uniformLocations.projectionMatrix = location;\r\n            break;\r\n          case 'uSamplerNormal':\r\n            shader.uniformLocations.textureNormal = location;\r\n            break;\r\n          case 'uSamplerDiffuse':\r\n            shader.uniformLocations.textureDiffuse = location;\r\n            break;\r\n          case 'uShowTexture':\r\n            shader.uniformLocations.textureShow = location;\r\n            break;\r\n          case 'uCameraPos':\r\n            shader.uniformLocations.cameraPosition = location;\r\n            break;\r\n          case 'uAmbientLight':\r\n            shader.uniformLocations.ambientLight = location;\r\n            break;\r\n          case 'uDirectionalLight.color':\r\n            shader.uniformLocations.directionalLight.color = location;\r\n            break;\r\n          case 'uDirectionalLight.direction':\r\n            shader.uniformLocations.directionalLight.direction = location;\r\n            break;\r\n          case 'uPointLight.color':\r\n            shader.uniformLocations.pointLight.color = location;\r\n            break;\r\n          case 'uPointLight.position':\r\n            shader.uniformLocations.pointLight.position = location;\r\n            break;\r\n          default:\r\n            alert('unknown uniform of ' + uniform.name);\r\n        }\r\n      });\r\n      const buffers = this._initBuffers(gl, shader, geometry);\r\n      this.model = {\r\n        shader,\r\n        buffers,\r\n        texture\r\n      }\r\n    });\r\n  }\r\n\r\n  _initBuffers(gl, shader, geometry) {\r\n    const positions = [];\r\n    const tangents = [];\r\n    const bitangents = [];\r\n    const textureCoordinates = [];\r\n    const indices = [];\r\n    const tangent = vec3.create();\r\n    const bitangent = vec3.create();\r\n    let offset = 0;\r\n\r\n    const addSquare = (c0, c1, c2, c3) => {\r\n      positions.push(...c0, ...c1, ...c2, ...c3);\r\n      indices.push(offset + 0, offset + 1, offset + 2, offset + 0, offset + 3, offset + 1);\r\n      offset += 4;\r\n\r\n      if (shader.attribLocations.vertexTangent) {\r\n        vec3.subtract(tangent, c3, c0);\r\n        vec3.normalize(tangent, tangent);\r\n        tangents.push(...tangent, ...tangent, ...tangent, ...tangent);\r\n      }\r\n\r\n      if (shader.attribLocations.vertexBitangent) {\r\n        vec3.subtract(bitangent, c0, c2);\r\n        vec3.normalize(bitangent, bitangent);\r\n        bitangents.push(...bitangent, ...bitangent, ...bitangent, ...bitangent);\r\n      }\r\n\r\n      if (shader.attribLocations.vertexTextureCoord) {\r\n        textureCoordinates.push(0, 0, 1, 1, 0, 1, 1, 0);\r\n      }\r\n    }\r\n\r\n    geometry({ addSquare });\r\n\r\n    const positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const indexBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\r\n\r\n    const buffers = { position: positionBuffer, indices: indexBuffer, vertexCount: indices.length }\r\n\r\n    if (shader.attribLocations.vertexTangent) {\r\n      const tangentBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, tangentBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(tangents), gl.STATIC_DRAW);\r\n      buffers.tangent = tangentBuffer;\r\n    }\r\n\r\n    if (shader.attribLocations.vertexBitangent) {\r\n      const bitangentBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, bitangentBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(bitangents), gl.STATIC_DRAW);\r\n      buffers.bitangent = bitangentBuffer;\r\n    }\r\n\r\n    if (shader.attribLocations.vertexTextureCoord) {\r\n      const textureCoordBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, textureCoordBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW);\r\n      buffers.textureCoord = textureCoordBuffer;\r\n    }\r\n\r\n    return buffers;\r\n  }\r\n\r\n  _drawModel(options) {\r\n    if (!options.model) {\r\n      return;\r\n    }\r\n\r\n    const { gl, model, projectionMatrix, viewMatrix, modelMatrix, textureShow } = options;\r\n    const { shader, buffers, texture } = model;\r\n\r\n    {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexPosition, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexPosition);\r\n    }\r\n\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\r\n\r\n    if (shader.attribLocations.vertexTangent) {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.tangent);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexTangent, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexTangent);\r\n    }\r\n\r\n    if (shader.attribLocations.vertexBitangent) {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.bitangent);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexBitangent, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexBitangent);\r\n    }\r\n\r\n    if (shader.attribLocations.vertexTextureCoord) {\r\n      const numComponents = 2;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.textureCoord);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexTextureCoord, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexTextureCoord);\r\n    }\r\n\r\n    gl.useProgram(shader.program);\r\n    gl.uniformMatrix4fv(shader.uniformLocations.projectionMatrix, false, projectionMatrix);\r\n    gl.uniformMatrix4fv(shader.uniformLocations.modelMatrix, false, modelMatrix);\r\n    gl.uniformMatrix4fv(shader.uniformLocations.viewMatrix, false, viewMatrix);\r\n\r\n    if (shader.uniformLocations.normalMatrix) {\r\n      const normalMatrix = mat4.create();\r\n      mat4.invert(normalMatrix, modelMatrix);\r\n      mat4.transpose(normalMatrix, normalMatrix);\r\n      gl.uniformMatrix4fv(shader.uniformLocations.normalMatrix, false, normalMatrix);\r\n    }\r\n\r\n    if (shader.uniformLocations.textureShow) {\r\n      gl.uniform1i(shader.uniformLocations.textureShow, textureShow);\r\n    }\r\n\r\n    if (shader.uniformLocations.ambientLight) {\r\n      gl.uniform3fv(shader.uniformLocations.ambientLight, options.ambientLight);\r\n    }\r\n\r\n    if (shader.uniformLocations.directionalLight) {\r\n      const direction = vec3.clone(options.directionalLight.direction);\r\n      vec3.normalize(direction, direction);\r\n      gl.uniform3fv(shader.uniformLocations.directionalLight.color, options.directionalLight.color);\r\n      gl.uniform3fv(shader.uniformLocations.directionalLight.direction, direction);\r\n    }\r\n\r\n    if (shader.uniformLocations.pointLight) {\r\n      gl.uniform3fv(shader.uniformLocations.pointLight.color, options.pointLight.color);\r\n      gl.uniform3fv(shader.uniformLocations.pointLight.position, options.pointLight.position);\r\n    }\r\n\r\n    if (shader.uniformLocations.cameraPosition) {\r\n      gl.uniform3fv(shader.uniformLocations.cameraPosition, options.cameraPosition);\r\n    }\r\n\r\n    if (shader.uniformLocations.textureNormal) {\r\n      gl.activeTexture(gl.TEXTURE0);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.normal);\r\n      gl.uniform1i(shader.uniformLocations.textureNormal, 0);\r\n    }\r\n\r\n    if (shader.uniformLocations.textureDiffuse) {\r\n      gl.activeTexture(gl.TEXTURE1);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.diffuse);\r\n      gl.uniform1i(shader.uniformLocations.textureDiffuse, 1);\r\n    }\r\n\r\n    {\r\n      const vertexCount = buffers.vertexCount;\r\n      const type = gl.UNSIGNED_SHORT;\r\n      const offset = 0;\r\n      gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Model;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen } from './utility'\r\nimport BrickWallModel from './BrickWallModel';\r\n\r\nclass BrickWallScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const model = new BrickWallModel(gl);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [0.0, 0.0, -5.5],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.4\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.2\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      mat4.rotate(modelMatrix, modelMatrix, rotation.angle, rotation.axis);\r\n    }\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      rotation.angle += deltaTime * rotation.speed;\r\n    }\r\n  }\r\n}\r\n\r\nexport default BrickWallScene;\r\n","import React from 'react';\r\nimport ColoredSquareScene from './ColoredSquareScene';\r\nimport ColoredCubeScene from './ColoredCubeScene';\r\nimport TexturedCubeScene from './TexturedCubeScene';\r\nimport LightedCubeScene from './LightedCubeScene';\r\nimport MazeScene from './MazeScene';\r\nimport BrickWallScene from './BrickWallScene';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onClickCanvas = this.onClickCanvas.bind(this);\r\n    this.renderCanvas = this.renderCanvas.bind(this);\r\n    this.scenes = [\r\n      { init: false, render: new ColoredSquareScene() },\r\n      { init: false, render: new ColoredCubeScene() },\r\n      { init: false, render: new TexturedCubeScene() },\r\n      { init: false, render: new LightedCubeScene() },\r\n      { init: false, render: new MazeScene() },\r\n      { init: false, render: new BrickWallScene() }\r\n    ];\r\n    this.sceneIndex = this.scenes.length - 1;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const canvas = this.canvas;\r\n    const rect = canvas.getBoundingClientRect()\r\n    canvas.width = rect.width;\r\n    canvas.height = rect.height;\r\n    this.gl = canvas.getContext('webgl');\r\n    if (this.gl === null) {\r\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n    } else {\r\n      this.gl.enable(this.gl.CULL_FACE);\r\n      this.gl.cullFace(this.gl.BACK);\r\n      this.gl.getExtension('OES_element_index_uint');\r\n      const scene = this.scenes[this.sceneIndex];\r\n      if (!scene.init) {\r\n        scene.init = true;\r\n        scene.render.initScene(this.gl);\r\n      }\r\n      this.frame = window.requestAnimationFrame(this.renderCanvas);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.cancelAnimationFrame(this.frame);\r\n  }\r\n\r\n  onClickCanvas(event) {\r\n    event.preventDefault();\r\n    this.sceneIndex = (this.sceneIndex + 1) % this.scenes.length;\r\n    const scene = this.scenes[this.sceneIndex];\r\n    if (!scene.init) {\r\n      scene.init = true;\r\n      scene.render.initScene(this.gl);\r\n    }\r\n  }\r\n\r\n  renderCanvas(timeStamp) {\r\n    timeStamp *= 0.001;\r\n    if (!this.timeStamp) {\r\n      this.timeStamp = timeStamp;\r\n    }\r\n    const deltaTime = timeStamp - this.timeStamp;\r\n    this.timeStamp = timeStamp;\r\n    const scene = this.scenes[this.sceneIndex];\r\n    scene.render.drawScene(this.gl, deltaTime);\r\n    this.frame = window.requestAnimationFrame(this.renderCanvas);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"screen\">\r\n        <canvas className=\"canvas\" ref={elem => this.canvas = elem} onClick={this.onClickCanvas}></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}