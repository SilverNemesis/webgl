{"version":3,"sources":["utility.js","ColoredSquareScene.js","ColoredCubeScene.js","Model.js","TexturedCubeModel.js","TexturedCubeScene.js","LightedCubeModel.js","LightedCubeScene.js","MazeModel.js","MazeScene.js","BrickWallModel.js","BrickWallScene.js","App.js","serviceWorker.js","index.js"],"names":["initShaderProgram","gl","vsSource","fsSource","vertexShader","_loadShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","alert","getProgramInfoLog","_typeToString","type","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","loadTexture","url","texture","createTexture","bindTexture","TEXTURE_2D","internalFormat","RGBA","srcFormat","srcType","UNSIGNED_BYTE","pixel","Uint8Array","texImage2D","image","Image","onload","_isPowerOf2","width","height","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","src","value","clearScreen","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","_directions","x","y","generateMaze","windiness","carve","pos","data","canCarve","dir","isInBounds","addDir","nxt","len","push","Array","fill","lastDir","start","cells","length","cell","posCells","i","includes","Math","random","floor","pop","ColoredSquareScene","this","initScene","bind","drawScene","programInfo","program","attribLocations","vertexPosition","getAttribLocation","vertexColor","uniformLocations","projectionMatrix","getUniformLocation","modelViewMatrix","buffers","_initBuffers","scene","squareRotation","deltaTime","bindBuffer","ARRAY_BUFFER","color","vertexAttribPointer","enableVertexAttribArray","position","fieldOfView","PI","aspect","canvas","clientWidth","clientHeight","mat4","useProgram","uniformMatrix4fv","drawArrays","TRIANGLE_STRIP","createBuffer","bufferData","Float32Array","STATIC_DRAW","ColoredCubeScene","cubeRotation","ELEMENT_ARRAY_BUFFER","indices","UNSIGNED_SHORT","drawElements","TRIANGLES","positionBuffer","faceColors","colors","j","c","concat","colorBuffer","indexBuffer","Uint16Array","Model","options","geometry","diffuse","normal","Promise","all","fetch","vertex","then","response","text","fragment","shaderParameters","attributeCount","ACTIVE_ATTRIBUTES","attributes","attribute","getActiveAttrib","name","uniformCount","ACTIVE_UNIFORMS","uniforms","uniform","getActiveUniform","getShaderParameters","forEach","location","vertexNormal","vertexTangent","vertexBitangent","vertexTextureCoord","modelMatrix","viewMatrix","normalMatrix","textureNormal","textureDiffuse","textureShow","perPixel","cameraPosition","ambientLight","directionalLight","direction","pointLight","model","positions","normals","tangents","bitangents","textureCoordinates","vec3","tangent","bitangent","offset","addSquare","c0","c1","c2","c3","vertexCount","normalBuffer","tangentBuffer","bitangentBuffer","textureCoordBuffer","textureCoord","uniform1i","uniform3fv","activeTexture","TEXTURE0","TEXTURE1","TexturedCubeModel","draw","_initModel","_geometry","_drawModel","f0","f1","f2","f3","b0","b1","b2","b3","TexturedCubeScene","actors","rotations","angle","axis","speed","camera","actor","_renderActor","_animateActor","rotation","LightedCubeModel","LightedCubeScene","rotationSpeed","cameraDir","MazeModel","maze","_initShaders","_freeBuffers","UNSIGNED_INT","addSquareXY","left","right","top","bottom","base","addSquareXZ","addSquareYZ","floorColor","ceilingColor","wallColor_Top","wallColor_Bottom","wallColor_Left","wallColor_Right","ofs_x","ofs_y","Uint32Array","deleteBuffer","MazeScene","totalDelta","size","update","BrickWallModel","BrickWallScene","App","props","onClickCanvas","renderCanvas","scenes","init","render","sceneIndex","rect","getBoundingClientRect","getContext","CULL_FACE","cullFace","BACK","getExtension","frame","window","requestAnimationFrame","cancelAnimationFrame","event","preventDefault","timeStamp","className","ref","elem","onClick","React","Component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aff2c19b.chunk.js","sourcesContent":["export function degreesToRadians(degrees) {\r\n  var pi = Math.PI;\r\n  return degrees * (pi / 180);\r\n}\r\n\r\nexport function initShaderProgram(gl, vsSource, fsSource) {\r\n  const vertexShader = _loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n  const fragmentShader = _loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n  const shaderProgram = gl.createProgram();\r\n  gl.attachShader(shaderProgram, vertexShader);\r\n  gl.attachShader(shaderProgram, fragmentShader);\r\n  gl.linkProgram(shaderProgram);\r\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n    alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n    return null;\r\n  }\r\n  return shaderProgram;\r\n}\r\n\r\nexport function getShaderParameters(gl, shaderProgram) {\r\n  const attributeCount = gl.getProgramParameter(shaderProgram, gl.ACTIVE_ATTRIBUTES);\r\n  const attributes = [];\r\n  for (let i = 0; i < attributeCount; i++) {\r\n    const attribute = gl.getActiveAttrib(shaderProgram, i);\r\n    attributes.push({ name: attribute.name, type: _typeToString(gl, attribute.type) });\r\n  }\r\n  const uniformCount = gl.getProgramParameter(shaderProgram, gl.ACTIVE_UNIFORMS);\r\n  const uniforms = [];\r\n  for (let i = 0; i < uniformCount; i++) {\r\n    const uniform = gl.getActiveUniform(shaderProgram, i);\r\n    uniforms.push({ name: uniform.name, type: _typeToString(gl, uniform.type) });\r\n  }\r\n  return {\r\n    attributes,\r\n    uniforms\r\n  };\r\n}\r\n\r\nfunction _typeToString(gl, type) {\r\n  switch (type) {\r\n    case gl.FLOAT:\r\n      return \"FLOAT\";\r\n    case gl.FLOAT_VEC2:\r\n      return \"FLOAT_VEC2\";\r\n    case gl.FLOAT_VEC3:\r\n      return \"FLOAT_VEC3\";\r\n    case gl.FLOAT_VEC4:\r\n      return \"FLOAT_VEC4\";\r\n    case gl.INT:\r\n      return \"INT\";\r\n    case gl.INT_VEC2:\r\n      return \"INT_VEC2\";\r\n    case gl.INT_VEC3:\r\n      return \"INT_VEC3\";\r\n    case gl.INT_VEC4:\r\n      return \"INT_VEC4\";\r\n    case gl.BOOL:\r\n      return \"BOOL\";\r\n    case gl.BOOL_VEC2:\r\n      return \"BOOL_VEC2\";\r\n    case gl.BOOL_VEC3:\r\n      return \"BOOL_VEC3\";\r\n    case gl.BOOL_VEC4:\r\n      return \"BOOL_VEC4\";\r\n    case gl.FLOAT_MAT2:\r\n      return \"FLOAT_MAT2\";\r\n    case gl.FLOAT_MAT3:\r\n      return \"FLOAT_MAT3\";\r\n    case gl.FLOAT_MAT4:\r\n      return \"FLOAT_MAT4\";\r\n    case gl.SAMPLER_2D:\r\n      return \"SAMPLER_2D\";\r\n    case gl.SAMPLER_CUBE:\r\n      return \"SAMPLER_CUBE\";\r\n    default:\r\n      return \"UNKNOWN\";\r\n  }\r\n}\r\n\r\nfunction _loadShader(gl, type, source) {\r\n  const shader = gl.createShader(type);\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\r\n    gl.deleteShader(shader);\r\n    return null;\r\n  }\r\n  return shader;\r\n}\r\n\r\nexport function loadTexture(gl, url) {\r\n  const texture = gl.createTexture();\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n  const level = 0;\r\n  const internalFormat = gl.RGBA;\r\n  const width = 1;\r\n  const height = 1;\r\n  const border = 0;\r\n  const srcFormat = gl.RGBA;\r\n  const srcType = gl.UNSIGNED_BYTE;\r\n  const pixel = new Uint8Array([0, 0, 255, 255]);\r\n  gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, srcFormat, srcType, pixel);\r\n  const image = new Image();\r\n  image.onload = () => {\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\r\n      srcFormat, srcType, image);\r\n    if (_isPowerOf2(image.width) && _isPowerOf2(image.height)) {\r\n      gl.generateMipmap(gl.TEXTURE_2D);\r\n    } else {\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n  };\r\n  image.src = url;\r\n  return texture;\r\n}\r\n\r\nfunction _isPowerOf2(value) {\r\n  return (value & (value - 1)) === 0;\r\n}\r\n\r\nexport function clearScreen(gl) {\r\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n  gl.clearDepth(1.0);\r\n  gl.enable(gl.DEPTH_TEST);\r\n  gl.depthFunc(gl.LEQUAL);\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n}\r\n\r\nconst _directions = [\r\n  { x: -1, y: 0 },\r\n  { x: 0, y: -1 },\r\n  { x: 1, y: 0 },\r\n  { x: 0, y: 1 }\r\n];\r\n\r\nexport function generateMaze(width, height, windiness = 0.8) {\r\n  const carve = (pos) => {\r\n    data[pos.y][pos.x] = 0;\r\n  }\r\n\r\n  const canCarve = (pos, dir) => {\r\n    if (!isInBounds(addDir(pos, dir, 3))) {\r\n      return false;\r\n    }\r\n    const nxt = addDir(pos, dir, 2);\r\n    return data[nxt.y][nxt.x] === 1;\r\n  }\r\n\r\n  const isInBounds = (pos) => {\r\n    if (pos.x < 0 || pos.y < 0 || pos.x >= width || pos.y >= height) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const addDir = (pos, dir, len) => {\r\n    return {\r\n      x: pos.x + dir.x * len,\r\n      y: pos.y + dir.y * len\r\n    }\r\n  }\r\n\r\n  const data = [];\r\n  for (let y = 0; y < height; y++) {\r\n    data.push(new Array(width).fill(1));\r\n  }\r\n\r\n  const start = { x: 1, y: 1 };\r\n  const cells = [];\r\n  let lastDir;\r\n  carve(start);\r\n  cells.push(start);\r\n  while (cells.length > 0) {\r\n    const cell = cells[cells.length - 1];\r\n    const posCells = [];\r\n    for (let i = 0; i < _directions.length; i++) {\r\n      const dir = _directions[i];\r\n      if (canCarve(cell, dir)) {\r\n        posCells.push(dir);\r\n      }\r\n    }\r\n    if (posCells.length > 0) {\r\n      let dir;\r\n      if (posCells.includes(lastDir) && Math.random() > windiness) {\r\n        dir = lastDir;\r\n      } else {\r\n        dir = posCells[Math.floor(Math.random() * posCells.length)];\r\n      }\r\n      carve(addDir(cell, dir, 1));\r\n      carve(addDir(cell, dir, 2));\r\n      cells.push(addDir(cell, dir, 2));\r\n      lastDir = dir;\r\n    } else {\r\n      cells.pop();\r\n      lastDir = null;\r\n    }\r\n  }\r\n  return {\r\n    width,\r\n    height,\r\n    data\r\n  };\r\n}\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { initShaderProgram, clearScreen } from './utility'\r\n\r\nclass ColoredSquareScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const vsSource = `\r\n    attribute vec4 aVertexPosition;\r\n    attribute vec4 aVertexColor;\r\n\r\n    uniform mat4 uModelViewMatrix;\r\n    uniform mat4 uProjectionMatrix;\r\n\r\n    varying lowp vec4 vColor;\r\n\r\n    void main(void) {\r\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n      vColor = aVertexColor;\r\n    }\r\n  `;\r\n\r\n    const fsSource = `\r\n    varying lowp vec4 vColor;\r\n\r\n    void main(void) {\r\n      gl_FragColor = vColor;\r\n    }\r\n  `;\r\n\r\n    const shaderProgram = initShaderProgram(gl, vsSource, fsSource);\r\n\r\n    const programInfo = {\r\n      program: shaderProgram,\r\n      attribLocations: {\r\n        vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\r\n        vertexColor: gl.getAttribLocation(shaderProgram, 'aVertexColor')\r\n      },\r\n      uniformLocations: {\r\n        projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\r\n        modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix')\r\n      }\r\n    };\r\n\r\n    const buffers = this._initBuffers(gl);\r\n\r\n    this.scene = { programInfo, buffers, squareRotation: 0.0 };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n    const { programInfo, buffers } = scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    {\r\n      const numComponents = 4;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\r\n      gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexColor,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n      gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.vertexColor);\r\n    }\r\n\r\n    {\r\n      const numComponents = 2;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexPosition,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n      gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.vertexPosition);\r\n    }\r\n\r\n    {\r\n      const fieldOfView = 45 * Math.PI / 180;\r\n      const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n      const zNear = 0.1;\r\n      const zFar = 100.0;\r\n      const projectionMatrix = mat4.create();\r\n      mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n      const modelViewMatrix = mat4.create();\r\n      mat4.translate(modelViewMatrix, modelViewMatrix, [-0.0, 0.0, -6.0]);\r\n      mat4.rotate(modelViewMatrix, modelViewMatrix, scene.squareRotation, [0, 0, 1]);\r\n      gl.useProgram(programInfo.program);\r\n      gl.uniformMatrix4fv(\r\n        programInfo.uniformLocations.projectionMatrix,\r\n        false,\r\n        projectionMatrix);\r\n      gl.uniformMatrix4fv(\r\n        programInfo.uniformLocations.modelViewMatrix,\r\n        false,\r\n        modelViewMatrix);\r\n    }\r\n\r\n    {\r\n      const offset = 0;\r\n      const vertexCount = 4;\r\n      gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount);\r\n    }\r\n\r\n    scene.squareRotation += deltaTime;\r\n  }\r\n\r\n  _initBuffers(gl) {\r\n    const positions = [\r\n      1.0, 1.0,\r\n      -1.0, 1.0,\r\n      1.0, -1.0,\r\n      -1.0, -1.0,\r\n    ];\r\n    const position = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, position);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const colors = [\r\n      1.0, 1.0, 1.0, 1.0,\r\n      1.0, 0.0, 0.0, 1.0,\r\n      0.0, 1.0, 0.0, 1.0,\r\n      0.0, 0.0, 1.0, 1.0\r\n    ];\r\n    const color = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, color);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\r\n\r\n    return { position, color };\r\n  }\r\n}\r\n\r\nexport default ColoredSquareScene;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { initShaderProgram, clearScreen } from './utility'\r\n\r\nclass ColoredCubeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const vsSource = `\r\n    attribute vec4 aVertexPosition;\r\n    attribute vec4 aVertexColor;\r\n\r\n    uniform mat4 uModelViewMatrix;\r\n    uniform mat4 uProjectionMatrix;\r\n\r\n    varying lowp vec4 vColor;\r\n\r\n    void main(void) {\r\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n      vColor = aVertexColor;\r\n    }\r\n  `;\r\n\r\n    const fsSource = `\r\n    varying lowp vec4 vColor;\r\n\r\n    void main(void) {\r\n      gl_FragColor = vColor;\r\n    }\r\n  `;\r\n\r\n    const shaderProgram = initShaderProgram(gl, vsSource, fsSource);\r\n\r\n    const programInfo = {\r\n      program: shaderProgram,\r\n      attribLocations: {\r\n        vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\r\n        vertexColor: gl.getAttribLocation(shaderProgram, 'aVertexColor')\r\n      },\r\n      uniformLocations: {\r\n        projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\r\n        modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix')\r\n      }\r\n    };\r\n\r\n    const buffers = this._initBuffers(gl);\r\n\r\n    this.scene = { programInfo, buffers, cubeRotation: 0.0 };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n    const { programInfo, buffers } = scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexPosition,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n      gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);\r\n    }\r\n\r\n    {\r\n      const numComponents = 4;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\r\n      gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexColor,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n      gl.enableVertexAttribArray(programInfo.attribLocations.vertexColor);\r\n    }\r\n\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\r\n\r\n    {\r\n      const fieldOfView = 45 * Math.PI / 180;\r\n      const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n      const zNear = 0.1;\r\n      const zFar = 100.0;\r\n      const projectionMatrix = mat4.create();\r\n      mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n      const modelViewMatrix = mat4.create();\r\n      mat4.translate(modelViewMatrix, modelViewMatrix, [-0.0, 0.0, -6.0]);\r\n      mat4.rotate(modelViewMatrix, modelViewMatrix, scene.cubeRotation, [0, 0, 1]);\r\n      mat4.rotate(modelViewMatrix, modelViewMatrix, scene.cubeRotation * 0.7, [0, 1, 0]);\r\n      gl.useProgram(programInfo.program);\r\n      gl.uniformMatrix4fv(\r\n        programInfo.uniformLocations.projectionMatrix,\r\n        false,\r\n        projectionMatrix);\r\n      gl.uniformMatrix4fv(\r\n        programInfo.uniformLocations.modelViewMatrix,\r\n        false,\r\n        modelViewMatrix);\r\n    }\r\n\r\n    {\r\n      const vertexCount = 36;\r\n      const type = gl.UNSIGNED_SHORT;\r\n      const offset = 0;\r\n      gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\r\n    }\r\n\r\n    scene.cubeRotation += deltaTime;\r\n  }\r\n\r\n  _initBuffers(gl) {\r\n    const positions = [\r\n      // Front face\r\n      -1.0, -1.0, 1.0,\r\n      1.0, -1.0, 1.0,\r\n      1.0, 1.0, 1.0,\r\n      -1.0, 1.0, 1.0,\r\n\r\n      // Back face\r\n      -1.0, -1.0, -1.0,\r\n      -1.0, 1.0, -1.0,\r\n      1.0, 1.0, -1.0,\r\n      1.0, -1.0, -1.0,\r\n\r\n      // Top face\r\n      -1.0, 1.0, -1.0,\r\n      -1.0, 1.0, 1.0,\r\n      1.0, 1.0, 1.0,\r\n      1.0, 1.0, -1.0,\r\n\r\n      // Bottom face\r\n      -1.0, -1.0, -1.0,\r\n      1.0, -1.0, -1.0,\r\n      1.0, -1.0, 1.0,\r\n      -1.0, -1.0, 1.0,\r\n\r\n      // Right face\r\n      1.0, -1.0, -1.0,\r\n      1.0, 1.0, -1.0,\r\n      1.0, 1.0, 1.0,\r\n      1.0, -1.0, 1.0,\r\n\r\n      // Left face\r\n      -1.0, -1.0, -1.0,\r\n      -1.0, -1.0, 1.0,\r\n      -1.0, 1.0, 1.0,\r\n      -1.0, 1.0, -1.0,\r\n    ];\r\n    const positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const faceColors = [\r\n      [1.0, 1.0, 1.0, 1.0],    // Front face: white\r\n      [1.0, 0.0, 0.0, 1.0],    // Back face: red\r\n      [0.0, 1.0, 0.0, 1.0],    // Top face: green\r\n      [0.0, 0.0, 1.0, 1.0],    // Bottom face: blue\r\n      [1.0, 1.0, 0.0, 1.0],    // Right face: yellow\r\n      [1.0, 0.0, 1.0, 1.0],    // Left face: purple\r\n    ];\r\n    let colors = [];\r\n    for (let j = 0; j < faceColors.length; ++j) {\r\n      const c = faceColors[j];\r\n      colors = colors.concat(c, c, c, c);\r\n    }\r\n    const colorBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\r\n\r\n    const indices = [\r\n      0, 1, 2, 0, 2, 3,   // front\r\n      4, 5, 6, 4, 6, 7,   // back\r\n      8, 9, 10, 8, 10, 11,   // top\r\n      12, 13, 14, 12, 14, 15,   // bottom\r\n      16, 17, 18, 16, 18, 19,   // right\r\n      20, 21, 22, 20, 22, 23,   // left\r\n    ];\r\n    const indexBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\r\n\r\n    return { position: positionBuffer, color: colorBuffer, indices: indexBuffer };\r\n  }\r\n}\r\n\r\nexport default ColoredCubeScene;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport * as vec3 from 'gl-matrix/vec3';\r\nimport { loadTexture, initShaderProgram, getShaderParameters } from './utility'\r\n\r\nclass Model {\r\n  _initModel(options) {\r\n    const { gl, geometry } = options;\r\n    let texture\r\n    if (options.texture) {\r\n      texture = {};\r\n      texture.diffuse = loadTexture(gl, options.texture.diffuse);\r\n      texture.normal = loadTexture(gl, options.texture.normal);\r\n    }\r\n    let vertexShader;\r\n    let fragmentShader;\r\n    Promise.all([\r\n      fetch(options.shader.vertex).then((response) => response.text()).then((text) => vertexShader = text),\r\n      fetch(options.shader.fragment).then((response) => response.text()).then((text) => fragmentShader = text)\r\n    ]).then(() => {\r\n      const shaderProgram = initShaderProgram(gl, vertexShader, fragmentShader);\r\n      const shaderParameters = getShaderParameters(gl, shaderProgram);\r\n      const shader = {\r\n        program: shaderProgram,\r\n        attribLocations: {},\r\n        uniformLocations: {}\r\n      };\r\n      shaderParameters.attributes.forEach((attribute) => {\r\n        const location = gl.getAttribLocation(shaderProgram, attribute.name)\r\n        switch (attribute.name) {\r\n          case 'aVertexPosition':\r\n            shader.attribLocations.vertexPosition = location;\r\n            break;\r\n          case 'aVertexNormal':\r\n            shader.attribLocations.vertexNormal = location;\r\n            break;\r\n          case 'aVertexTangent':\r\n            shader.attribLocations.vertexTangent = location;\r\n            break;\r\n          case 'aVertexBitangent':\r\n            shader.attribLocations.vertexBitangent = location;\r\n            break;\r\n          case 'aTextureCoord':\r\n            shader.attribLocations.vertexTextureCoord = location;\r\n            break;\r\n          default:\r\n            alert('unknown attribute of ' + attribute.name);\r\n        }\r\n      });\r\n      shaderParameters.uniforms.forEach((uniform) => {\r\n        const location = gl.getUniformLocation(shaderProgram, uniform.name)\r\n        switch (uniform.name) {\r\n          case 'uModelMatrix':\r\n            shader.uniformLocations.modelMatrix = location;\r\n            break;\r\n          case 'uViewMatrix':\r\n            shader.uniformLocations.viewMatrix = location;\r\n            break;\r\n          case 'uNormalMatrix':\r\n            shader.uniformLocations.normalMatrix = location;\r\n            break;\r\n          case 'uProjectionMatrix':\r\n            shader.uniformLocations.projectionMatrix = location;\r\n            break;\r\n          case 'uSamplerNormal':\r\n            shader.uniformLocations.textureNormal = location;\r\n            break;\r\n          case 'uSamplerDiffuse':\r\n            shader.uniformLocations.textureDiffuse = location;\r\n            break;\r\n          case 'uShowTexture':\r\n            shader.uniformLocations.textureShow = location;\r\n            break;\r\n          case 'uPerPixel':\r\n            shader.uniformLocations.perPixel = location;\r\n            break;\r\n          case 'uCameraPos':\r\n            shader.uniformLocations.cameraPosition = location;\r\n            break;\r\n          case 'uAmbientLight':\r\n            shader.uniformLocations.ambientLight = location;\r\n            break;\r\n          case 'uDirectionalLight.color':\r\n            if (!shader.uniformLocations.directionalLight) {\r\n              shader.uniformLocations.directionalLight = {};\r\n            }\r\n            shader.uniformLocations.directionalLight.color = location;\r\n            break;\r\n          case 'uDirectionalLight.direction':\r\n            if (!shader.uniformLocations.directionalLight) {\r\n              shader.uniformLocations.directionalLight = {};\r\n            }\r\n            shader.uniformLocations.directionalLight.direction = location;\r\n            break;\r\n          case 'uPointLight.color':\r\n            if (!shader.uniformLocations.pointLight) {\r\n              shader.uniformLocations.pointLight = {};\r\n            }\r\n            shader.uniformLocations.pointLight.color = location;\r\n            break;\r\n          case 'uPointLight.position':\r\n            if (!shader.uniformLocations.pointLight) {\r\n              shader.uniformLocations.pointLight = {};\r\n            }\r\n            shader.uniformLocations.pointLight.position = location;\r\n            break;\r\n          default:\r\n            alert('unknown uniform of ' + uniform.name);\r\n        }\r\n      });\r\n      const buffers = this._initBuffers(gl, shader, geometry);\r\n      this.model = {\r\n        shader,\r\n        buffers,\r\n        texture\r\n      };\r\n    });\r\n  }\r\n\r\n  _initBuffers(gl, shader, geometry) {\r\n    const positions = [];\r\n    const normals = [];\r\n    const tangents = [];\r\n    const bitangents = [];\r\n    const textureCoordinates = [];\r\n    const indices = [];\r\n    const normal = vec3.create();\r\n    const tangent = vec3.create();\r\n    const bitangent = vec3.create();\r\n    let offset = 0;\r\n\r\n    const addSquare = (c0, c1, c2, c3) => {\r\n      positions.push(...c0, ...c1, ...c2, ...c3);\r\n      indices.push(offset + 0, offset + 1, offset + 2, offset + 0, offset + 3, offset + 1);\r\n      offset += 4;\r\n\r\n      if (shader.attribLocations.vertexNormal || shader.attribLocations.vertexTangent || shader.attribLocations.vertexBitangent) {\r\n        vec3.subtract(tangent, c3, c0);\r\n        vec3.subtract(bitangent, c0, c2);\r\n\r\n        if (shader.attribLocations.vertexNormal) {\r\n          vec3.cross(normal, tangent, bitangent);\r\n          vec3.normalize(normal, normal);\r\n          normals.push(...normal, ...normal, ...normal, ...normal);\r\n        }\r\n\r\n        if (shader.attribLocations.vertexTangent) {\r\n          vec3.normalize(tangent, tangent);\r\n          tangents.push(...tangent, ...tangent, ...tangent, ...tangent);\r\n        }\r\n\r\n        if (shader.attribLocations.vertexBitangent) {\r\n          vec3.normalize(bitangent, bitangent);\r\n          bitangents.push(...bitangent, ...bitangent, ...bitangent, ...bitangent);\r\n        }\r\n      }\r\n\r\n      if (shader.attribLocations.vertexTextureCoord) {\r\n        textureCoordinates.push(0, 0, 1, 1, 0, 1, 1, 0);\r\n      }\r\n    }\r\n\r\n    geometry({ addSquare });\r\n\r\n    const positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const indexBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\r\n\r\n    const buffers = { position: positionBuffer, indices: indexBuffer, vertexCount: indices.length }\r\n\r\n    if (shader.attribLocations.vertexNormal) {\r\n      const normalBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normals), gl.STATIC_DRAW);\r\n      buffers.normal = normalBuffer;\r\n    }\r\n\r\n    if (shader.attribLocations.vertexTangent) {\r\n      const tangentBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, tangentBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(tangents), gl.STATIC_DRAW);\r\n      buffers.tangent = tangentBuffer;\r\n    }\r\n\r\n    if (shader.attribLocations.vertexBitangent) {\r\n      const bitangentBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, bitangentBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(bitangents), gl.STATIC_DRAW);\r\n      buffers.bitangent = bitangentBuffer;\r\n    }\r\n\r\n    if (shader.attribLocations.vertexTextureCoord) {\r\n      const textureCoordBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, textureCoordBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW);\r\n      buffers.textureCoord = textureCoordBuffer;\r\n    }\r\n\r\n    return buffers;\r\n  }\r\n\r\n  _drawModel(options) {\r\n    if (!options.model) {\r\n      return;\r\n    }\r\n\r\n    const { gl, model, projectionMatrix, viewMatrix, modelMatrix } = options;\r\n    const { shader, buffers, texture } = model;\r\n\r\n    {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexPosition, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexPosition);\r\n    }\r\n\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\r\n\r\n    if (shader.attribLocations.vertexNormal) {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.normal);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexNormal, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexNormal);\r\n    }\r\n\r\n    if (shader.attribLocations.vertexTangent) {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.tangent);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexTangent, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexTangent);\r\n    }\r\n\r\n    if (shader.attribLocations.vertexBitangent) {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.bitangent);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexBitangent, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexBitangent);\r\n    }\r\n\r\n    if (shader.attribLocations.vertexTextureCoord) {\r\n      const numComponents = 2;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.textureCoord);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexTextureCoord, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexTextureCoord);\r\n    }\r\n\r\n    gl.useProgram(shader.program);\r\n    gl.uniformMatrix4fv(shader.uniformLocations.projectionMatrix, false, projectionMatrix);\r\n    gl.uniformMatrix4fv(shader.uniformLocations.modelMatrix, false, modelMatrix);\r\n    gl.uniformMatrix4fv(shader.uniformLocations.viewMatrix, false, viewMatrix);\r\n\r\n    if (shader.uniformLocations.normalMatrix) {\r\n      const normalMatrix = mat4.create();\r\n      mat4.invert(normalMatrix, modelMatrix);\r\n      mat4.transpose(normalMatrix, normalMatrix);\r\n      gl.uniformMatrix4fv(shader.uniformLocations.normalMatrix, false, normalMatrix);\r\n    }\r\n\r\n    if (shader.uniformLocations.textureShow) {\r\n      gl.uniform1i(shader.uniformLocations.textureShow, options.textureShow);\r\n    }\r\n\r\n    if (shader.uniformLocations.perPixel) {\r\n      gl.uniform1i(shader.uniformLocations.perPixel, options.perPixel);\r\n    }\r\n\r\n    if (shader.uniformLocations.ambientLight) {\r\n      gl.uniform3fv(shader.uniformLocations.ambientLight, options.ambientLight);\r\n    }\r\n\r\n    if (shader.uniformLocations.directionalLight) {\r\n      const direction = vec3.clone(options.directionalLight.direction);\r\n      vec3.normalize(direction, direction);\r\n      gl.uniform3fv(shader.uniformLocations.directionalLight.color, options.directionalLight.color);\r\n      gl.uniform3fv(shader.uniformLocations.directionalLight.direction, direction);\r\n    }\r\n\r\n    if (shader.uniformLocations.pointLight) {\r\n      gl.uniform3fv(shader.uniformLocations.pointLight.color, options.pointLight.color);\r\n      gl.uniform3fv(shader.uniformLocations.pointLight.position, options.pointLight.position);\r\n    }\r\n\r\n    if (shader.uniformLocations.cameraPosition) {\r\n      gl.uniform3fv(shader.uniformLocations.cameraPosition, options.cameraPosition);\r\n    }\r\n\r\n    if (shader.uniformLocations.textureNormal) {\r\n      gl.activeTexture(gl.TEXTURE0);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.normal);\r\n      gl.uniform1i(shader.uniformLocations.textureNormal, 0);\r\n    }\r\n\r\n    if (shader.uniformLocations.textureDiffuse) {\r\n      gl.activeTexture(gl.TEXTURE1);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.diffuse);\r\n      gl.uniform1i(shader.uniformLocations.textureDiffuse, 1);\r\n    }\r\n\r\n    {\r\n      const vertexCount = buffers.vertexCount;\r\n      const type = gl.UNSIGNED_SHORT;\r\n      const offset = 0;\r\n      gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Model;\r\n","import Model from './Model';\r\n\r\nclass TexturedCubeModel extends Model {\r\n  constructor(gl) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: this._geometry,\r\n      texture: {\r\n        diffuse: 'images/cubetexture.png'\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/texturedcube/vertex.glsl',\r\n        fragment: 'shaders/texturedcube/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix\r\n    });\r\n  }\r\n\r\n  _geometry({ addSquare }) {\r\n    const f0 = [-1, -1, 1];\r\n    const f1 = [1, 1, 1];\r\n    const f2 = [-1, 1, 1];\r\n    const f3 = [1, -1, 1];\r\n    const b0 = [-1, -1, -1];\r\n    const b1 = [1, 1, -1];\r\n    const b2 = [-1, 1, -1];\r\n    const b3 = [1, -1, -1];\r\n    addSquare(f0, f1, f2, f3);  // front\r\n    addSquare(b3, b2, b1, b0);  // back\r\n    addSquare(b0, f2, b2, f0);  // left\r\n    addSquare(f3, b1, f1, b3);  // right\r\n    addSquare(b0, f3, f0, b3);  // bottom\r\n    addSquare(b1, f2, f1, b2);  // top\r\n  }\r\n}\r\n\r\nexport default TexturedCubeModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen } from './utility'\r\nimport TexturedCubeModel from './TexturedCubeModel';\r\n\r\nclass TexturedCubeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const model = new TexturedCubeModel(gl);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [0.0, 0.0, -6.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 0, 1],\r\n              speed: 1.0\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.7\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      mat4.rotate(modelMatrix, modelMatrix, rotation.angle, rotation.axis);\r\n    }\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      rotation.angle += deltaTime * rotation.speed;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TexturedCubeScene;\r\n","import Model from './Model';\r\n\r\nclass LightedCubeModel extends Model {\r\n  constructor(gl) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: this._geometry,\r\n      texture: {\r\n        diffuse: 'images/cubetexture.png'\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/lightedcube/vertex.glsl',\r\n        fragment: 'shaders/lightedcube/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix, perPixel) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix,\r\n      ambientLight: [0.3, 0.3, 0.3],\r\n      directionalLight: {\r\n        color: [0.5, 0.5, 0.5],\r\n        direction: [0.0, 1.0, 0.0]\r\n      },\r\n      pointLight: {\r\n        color: [0.7, 0.7, 0.7],\r\n        position: [0.0, 0.0, 0.0]\r\n      },\r\n      cameraPosition: [0.0, 0.0, 0.0],\r\n      perPixel\r\n    });\r\n  }\r\n\r\n  _geometry({ addSquare }) {\r\n    const f0 = [-1, -1, 1];\r\n    const f1 = [1, 1, 1];\r\n    const f2 = [-1, 1, 1];\r\n    const f3 = [1, -1, 1];\r\n    const b0 = [-1, -1, -1];\r\n    const b1 = [1, 1, -1];\r\n    const b2 = [-1, 1, -1];\r\n    const b3 = [1, -1, -1];\r\n    addSquare(f0, f1, f2, f3);  // front\r\n    addSquare(b3, b2, b1, b0);  // back\r\n    addSquare(b0, f2, b2, f0);  // left\r\n    addSquare(f3, b1, f1, b3);  // right\r\n    addSquare(b0, f3, f0, b3);  // bottom\r\n    addSquare(b1, f2, f1, b2);  // top\r\n  }\r\n}\r\n\r\nexport default LightedCubeModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen } from './utility'\r\nimport LightedCubeModel from './LightedCubeModel';\r\n\r\nclass LightedCubeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const model = new LightedCubeModel(gl);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [-2.0, 0.0, -5.5],\r\n          rotation: 0.0,\r\n          rotationSpeed: 1.0,\r\n          perPixel: false\r\n        },\r\n        {\r\n          model,\r\n          location: [2.0, 0.0, -5.5],\r\n          rotation: 0.0,\r\n          rotationSpeed: 1.0,\r\n          perPixel: true\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0],\r\n      cameraDir: [0.0, 0.0, 2.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n\r\n    if (scene.camera[2] > 16.0) {\r\n      scene.camera[2] = 16.0;\r\n      scene.cameraDir[2] = -2.0;\r\n    } else if (scene.camera[2] < 0.0) {\r\n      scene.camera[2] = 0.0;\r\n      scene.cameraDir[2] = 2.0;\r\n    }\r\n\r\n    scene.camera[0] += scene.cameraDir[0] * deltaTime;\r\n    scene.camera[1] += scene.cameraDir[1] * deltaTime;\r\n    scene.camera[2] += scene.cameraDir[2] * deltaTime;\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation, [0, 0, 1]);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation * 0.7, [0, 1, 0]);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation * 0.3, [1, 0, 0]);\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix, actor.perPixel);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    actor.rotation += deltaTime * actor.rotationSpeed;\r\n  }\r\n}\r\n\r\nexport default LightedCubeScene;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { initShaderProgram } from './utility'\r\n\r\nclass MazeModel {\r\n  constructor(gl, maze) {\r\n    this.gl = gl;\r\n    this.maze = maze;\r\n    this.draw = this.draw.bind(this);\r\n    const shaderProgram = this._initShaders(gl);\r\n    this.model = {\r\n      program: shaderProgram,\r\n      attribLocations: {\r\n        vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\r\n        vertexColor: gl.getAttribLocation(shaderProgram, 'aVertexColor')\r\n      },\r\n      uniformLocations: {\r\n        projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\r\n        modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix')\r\n      },\r\n      buffers: this._initBuffers(gl, maze)\r\n    }\r\n  }\r\n\r\n  update(maze) {\r\n    this._freeBuffers(this.gl, this.model.buffers);\r\n    this.maze = maze;\r\n    this.model.buffers = this._initBuffers(this.gl, maze);\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix) {\r\n    const gl = this.gl;\r\n    const model = this.model;\r\n    const { buffers } = this.model;\r\n\r\n    {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(model.attribLocations.vertexPosition, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(model.attribLocations.vertexPosition);\r\n    }\r\n\r\n    {\r\n      const numComponents = 4;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\r\n      gl.vertexAttribPointer(model.attribLocations.vertexColor, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(model.attribLocations.vertexColor);\r\n    }\r\n\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\r\n\r\n    const modelViewMatrix = mat4.create();\r\n    mat4.multiply(modelViewMatrix, viewMatrix, modelMatrix);\r\n\r\n    gl.useProgram(model.program);\r\n    gl.uniformMatrix4fv(model.uniformLocations.projectionMatrix, false, projectionMatrix);\r\n    gl.uniformMatrix4fv(model.uniformLocations.modelViewMatrix, false, modelViewMatrix);\r\n\r\n    {\r\n      const vertexCount = buffers.vertexCount;\r\n      const type = gl.UNSIGNED_INT;\r\n      const offset = 0;\r\n      gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\r\n    }\r\n  }\r\n\r\n  _initShaders(gl) {\r\n    const vsSource = `\r\n      attribute vec4 aVertexPosition;\r\n      attribute vec4 aVertexColor;\r\n\r\n      uniform mat4 uModelViewMatrix;\r\n      uniform mat4 uProjectionMatrix;\r\n\r\n      varying lowp vec4 vColor;\r\n\r\n      void main(void) {\r\n        gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n        vColor = aVertexColor;\r\n      }\r\n    `;\r\n\r\n    const fsSource = `\r\n      varying lowp vec4 vColor;\r\n\r\n      void main(void) {\r\n        gl_FragColor = vColor;\r\n      }\r\n    `;\r\n\r\n    return initShaderProgram(gl, vsSource, fsSource);\r\n  }\r\n\r\n  _initBuffers(gl, maze) {\r\n    const positions = []\r\n    const colors = [];\r\n    const indices = [];\r\n    let offset = 0;\r\n\r\n    const addSquareXY = (left, right, top, bottom, base, color) => {\r\n      positions.push\r\n        (\r\n          left, top, base,\r\n          right, top, base,\r\n          right, bottom, base,\r\n          left, bottom, base\r\n        );\r\n      indices.push\r\n        (\r\n          offset + 0, offset + 1, offset + 2, offset + 0, offset + 2, offset + 3\r\n        );\r\n      offset += 4;\r\n      for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 4; j++) {\r\n          colors.push(color[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    const addSquareXZ = (left, right, top, bottom, base, color) => {\r\n      positions.push\r\n        (\r\n          left, base, top,\r\n          right, base, top,\r\n          right, base, bottom,\r\n          left, base, bottom\r\n        );\r\n      indices.push\r\n        (\r\n          offset + 0, offset + 1, offset + 2, offset + 0, offset + 2, offset + 3\r\n        );\r\n      offset += 4;\r\n      for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 4; j++) {\r\n          colors.push(color[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    const addSquareYZ = (left, right, top, bottom, base, color) => {\r\n      positions.push\r\n        (\r\n          base, left, top,\r\n          base, right, top,\r\n          base, right, bottom,\r\n          base, left, bottom\r\n        );\r\n      indices.push\r\n        (\r\n          offset + 0, offset + 1, offset + 2, offset + 0, offset + 2, offset + 3\r\n        );\r\n      offset += 4;\r\n      for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 4; j++) {\r\n          colors.push(color[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    const floorColor = [.2, .2, .2, 1.0];\r\n    const ceilingColor = [.7, .7, .7, 1];\r\n    const wallColor_Top = [.5, 0, .5, 1];\r\n    const wallColor_Bottom = [0, .5, 0, 1];\r\n    const wallColor_Left = [.5, 0, 0, 1];\r\n    const wallColor_Right = [0, .0, .5, 1];\r\n\r\n    const ofs_x = -maze.width / 2;\r\n    const ofs_y = -maze.height / 2;\r\n    for (let y = 0; y < maze.height; y++) {\r\n      for (let x = 0; x < maze.width; x++) {\r\n        const left = x + ofs_x;\r\n        const right = left + 1;\r\n        const top = y + ofs_y;\r\n        const bottom = top + 1;\r\n\r\n        if (maze.data[y][x] === 0) {\r\n          addSquareXY(left, right, top, bottom, 0.0, floorColor);\r\n        } else {\r\n          addSquareXY(left, right, top, bottom, 1.0, ceilingColor);\r\n\r\n          if (y === 0 || maze.data[y - 1][x] === 0) {\r\n            addSquareXZ(left, right, 0.0, 1.0, top, wallColor_Top);\r\n          }\r\n\r\n          if (x === 0 || maze.data[y][x - 1] === 0) {\r\n            addSquareYZ(bottom, top, 0.0, 1.0, left, wallColor_Left);\r\n          }\r\n\r\n          if (y === maze.height - 1 || maze.data[y + 1][x] === 0) {\r\n            addSquareXZ(right, left, 0.0, 1.0, bottom, wallColor_Bottom);\r\n          }\r\n\r\n          if (x === maze.width - 1 || maze.data[y][x + 1] === 0) {\r\n            addSquareYZ(top, bottom, 0.0, 1.0, right, wallColor_Right);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const colorBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\r\n\r\n    const indexBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint32Array(indices), gl.STATIC_DRAW);\r\n\r\n    return { position: positionBuffer, color: colorBuffer, indices: indexBuffer, vertexCount: indices.length };\r\n  }\r\n\r\n  _freeBuffers(gl, buffers) {\r\n    gl.deleteBuffer(buffers.position);\r\n    gl.deleteBuffer(buffers.color);\r\n    gl.deleteBuffer(buffers.indices);\r\n  }\r\n}\r\n\r\nexport default MazeModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen, degreesToRadians, generateMaze } from './utility'\r\nimport MazeModel from './MazeModel';\r\n\r\nclass MazeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n    this.totalDelta = 0.0;\r\n  }\r\n\r\n  initScene(gl) {\r\n    const size = Math.floor(Math.random() * 45) * 2 + 11;\r\n    const maze = generateMaze(size, size);\r\n    const model = new MazeModel(gl, maze);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [0.0, 0.0, -2.0 * size],\r\n          rotation: { angle: 0.0, axis: [0, 0, 1], speed: 0.5 }\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0],\r\n      cameraDir: [0.0, 0.0, 8.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 500.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    mat4.rotate(modelMatrix, modelMatrix, degreesToRadians(-45), [1, 0, 0]);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation.angle, actor.rotation.axis);\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    actor.rotation.angle += deltaTime * actor.rotation.speed;\r\n    this.totalDelta += deltaTime;\r\n    if (this.totalDelta >= 10.0) {\r\n      this.totalDelta -= 10.0;\r\n      const size = Math.floor(Math.random() * 45) * 2 + 11;\r\n      const maze = generateMaze(size, size);\r\n      actor.location[2] = -2.0 * size;\r\n      actor.model.update(maze);\r\n    }\r\n  }\r\n}\r\n\r\nexport default MazeScene;\r\n","import Model from './Model';\r\n\r\nclass BrickWallModel extends Model {\r\n  constructor(gl) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: this._geometry,\r\n      texture: {\r\n        diffuse: 'images/Brick_Wall_017_basecolor.jpg',\r\n        normal: 'images/Brick_Wall_017_normal.jpg'\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/brickwall/vertex.glsl',\r\n        fragment: 'shaders/brickwall/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix,\r\n      textureShow: 1,\r\n      ambientLight: [0.2, 0.2, 0.2],\r\n      directionalLight: {\r\n        color: [1.0, 1.0, 1.0],\r\n        direction: [0.0, 1.0, 0.0]\r\n      },\r\n      pointLight: {\r\n        color: [1.0, 1.0, 1.0],\r\n        position: [0.0, 0.0, 0.0]\r\n      },\r\n      cameraPosition: [0.0, 0.0, 0.0]\r\n    });\r\n  }\r\n\r\n  _geometry({ addSquare }) {\r\n    const f0 = [-1, -1, 1];\r\n    const f1 = [1, 1, 1];\r\n    const f2 = [-1, 1, 1];\r\n    const f3 = [1, -1, 1];\r\n    const b0 = [-1, -1, -1];\r\n    const b1 = [1, 1, -1];\r\n    const b2 = [-1, 1, -1];\r\n    const b3 = [1, -1, -1];\r\n    addSquare(f0, f1, f2, f3);  // front\r\n    addSquare(b3, b2, b1, b0);  // back\r\n    addSquare(b0, f2, b2, f0);  // left\r\n    addSquare(f3, b1, f1, b3);  // right\r\n    addSquare(b0, f3, f0, b3);  // bottom\r\n    addSquare(b1, f2, f1, b2);  // top\r\n  }\r\n}\r\n\r\nexport default BrickWallModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen } from './utility'\r\nimport BrickWallModel from './BrickWallModel';\r\n\r\nclass BrickWallScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const model = new BrickWallModel(gl);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [0.0, 0.0, -5.5],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.4\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.2\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      mat4.rotate(modelMatrix, modelMatrix, rotation.angle, rotation.axis);\r\n    }\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      rotation.angle += deltaTime * rotation.speed;\r\n    }\r\n  }\r\n}\r\n\r\nexport default BrickWallScene;\r\n","import React from 'react';\r\nimport ColoredSquareScene from './ColoredSquareScene';\r\nimport ColoredCubeScene from './ColoredCubeScene';\r\nimport TexturedCubeScene from './TexturedCubeScene';\r\nimport LightedCubeScene from './LightedCubeScene';\r\nimport MazeScene from './MazeScene';\r\nimport BrickWallScene from './BrickWallScene';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onClickCanvas = this.onClickCanvas.bind(this);\r\n    this.renderCanvas = this.renderCanvas.bind(this);\r\n    this.scenes = [\r\n      { init: false, render: new ColoredSquareScene() },\r\n      { init: false, render: new ColoredCubeScene() },\r\n      { init: false, render: new TexturedCubeScene() },\r\n      { init: false, render: new LightedCubeScene() },\r\n      { init: false, render: new MazeScene() },\r\n      { init: false, render: new BrickWallScene() }\r\n    ];\r\n    this.sceneIndex = this.scenes.length - 1;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const canvas = this.canvas;\r\n    const rect = canvas.getBoundingClientRect()\r\n    canvas.width = rect.width;\r\n    canvas.height = rect.height;\r\n    this.gl = canvas.getContext('webgl');\r\n    if (this.gl === null) {\r\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n    } else {\r\n      this.gl.enable(this.gl.CULL_FACE);\r\n      this.gl.cullFace(this.gl.BACK);\r\n      this.gl.getExtension('OES_element_index_uint');\r\n      const scene = this.scenes[this.sceneIndex];\r\n      if (!scene.init) {\r\n        scene.init = true;\r\n        scene.render.initScene(this.gl);\r\n      }\r\n      this.frame = window.requestAnimationFrame(this.renderCanvas);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.cancelAnimationFrame(this.frame);\r\n  }\r\n\r\n  onClickCanvas(event) {\r\n    event.preventDefault();\r\n    this.sceneIndex = (this.sceneIndex + 1) % this.scenes.length;\r\n    const scene = this.scenes[this.sceneIndex];\r\n    if (!scene.init) {\r\n      scene.init = true;\r\n      scene.render.initScene(this.gl);\r\n    }\r\n  }\r\n\r\n  renderCanvas(timeStamp) {\r\n    timeStamp *= 0.001;\r\n    if (!this.timeStamp) {\r\n      this.timeStamp = timeStamp;\r\n    }\r\n    const deltaTime = timeStamp - this.timeStamp;\r\n    this.timeStamp = timeStamp;\r\n    const scene = this.scenes[this.sceneIndex];\r\n    scene.render.drawScene(this.gl, deltaTime);\r\n    this.frame = window.requestAnimationFrame(this.renderCanvas);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"screen\">\r\n        <canvas className=\"canvas\" ref={elem => this.canvas = elem} onClick={this.onClickCanvas}></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}