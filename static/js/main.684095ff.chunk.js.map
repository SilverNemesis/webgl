{"version":3,"sources":["lib/utility.js","scenes/ColoredSquareScene.js","models/Model.js","models/ColoredModel.js","scenes/ColoredCubeScene.js","models/TexturedCubeModel.js","scenes/TexturedCubeScene.js","models/LightedCubeModel.js","scenes/LightedCubeScene.js","models/MazeModel.js","scenes/MazeScene.js","models/BrickWallModel.js","scenes/BrickWallScene.js","models/MaterialModel.js","scenes/MaterialScene.js","components/App.js","serviceWorker.js","index.js"],"names":["initShaderProgram","gl","vsSource","fsSource","vertexShader","_loadShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","alert","getProgramInfoLog","_typeToString","type","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","loadTexture","url","texture","createTexture","bindTexture","TEXTURE_2D","internalFormat","RGBA","srcFormat","srcType","UNSIGNED_BYTE","pixel","Uint8Array","texImage2D","image","Image","onload","_isPowerOf2","width","height","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","src","value","clearScreen","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","_directions","x","y","generateMaze","windiness","carve","pos","data","canCarve","dir","isInBounds","addDir","nxt","len","push","Array","fill","lastDir","start","cells","length","cell","posCells","i","includes","Math","random","floor","pop","getShape","shape","s3","sqrt","s6","vertices","faces","r","a","phi","b","c","_materials","emerald","ambient","diffuse","specular","shininess","jade","obsidian","pearl","ruby","turquoise","brass","bronze","chrome","copper","gold","silver","blackPlastic","cyanPlastic","greenPlastic","redPlastic","whitePlastic","yellowPlastic","blackRubber","cyanRubber","greenRubber","redRubber","whiteRubber","yellowRubber","getMaterial","name","ColoredSquareScene","this","initScene","bind","drawScene","programInfo","program","attribLocations","vertexPosition","getAttribLocation","vertexColor","uniformLocations","projectionMatrix","getUniformLocation","modelViewMatrix","buffers","_initBuffers","scene","squareRotation","deltaTime","bindBuffer","ARRAY_BUFFER","color","vertexAttribPointer","enableVertexAttribArray","position","fieldOfView","PI","aspect","canvas","clientWidth","clientHeight","mat4","useProgram","uniformMatrix4fv","drawArrays","TRIANGLE_STRIP","createBuffer","bufferData","Float32Array","STATIC_DRAW","Model","options","geometry","normal","occlusion","Promise","all","fetch","vertex","then","response","text","fragment","shaderParameters","attributeCount","ACTIVE_ATTRIBUTES","attributes","attribute","getActiveAttrib","uniformCount","ACTIVE_UNIFORMS","uniforms","uniform","getActiveUniform","getShaderParameters","forEach","location","vertexNormal","vertexTangent","vertexBitangent","vertexTextureCoord","modelMatrix","viewMatrix","normalMatrix","textureDiffuse","textureNormal","textureHeight","textureOcclusion","showDiffuseMap","showNormalMap","showAmbientOcclusionMap","perPixel","parallaxHeightScale","parallaxSteps","parallaxOcclusionMapping","cameraPosition","ambientLight","directionalLight","direction","pointLight","lights","material","model","positions","normals","tangents","bitangents","textureCoordinates","colors","indices","vec3","tangent","bitangent","offset","addSquare","c0","c1","c2","c3","addFace","face","addTriangle","c4","addPentagon","addFaces","option","positionBuffer","indexBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","vertexCount","normalBuffer","tangentBuffer","bitangentBuffer","textureCoordBuffer","textureCoord","colorBuffer","uniform1i","uniform1f","uniform3fv","light","activeTexture","TEXTURE0","TEXTURE1","TEXTURE2","TEXTURE3","UNSIGNED_SHORT","drawElements","TRIANGLES","ColoredModel","shapeName","draw","_initModel","_drawModel","ColoredCubeScene","model6","model12","actors","scale","rotations","angle","axis","speed","camera","actor","_renderActor","_animateActor","rotation","TexturedCubeModel","_geometry","f0","f1","f2","f3","b0","b1","b2","b3","TexturedCubeScene","LightedCubeModel","LightedCubeScene","rotationSpeed","cameraDir","MazeModel","maze","update","deleteBuffer","floorColor","ceilingColor","wallColor_Back","wallColor_Front","wallColor_Left","wallColor_Right","ofs_x","ofs_y","left","right","back","front","MazeScene","totalDelta","size","BrickWallModel","BrickWallScene","MaterialModel","MaterialScene","model4","model8","model10","model20","App","props","onResize","onKeyDown","onKeyUp","onClickPrevious","onClickNext","renderCanvas","scenes","init","render","sceneIndex","state","showControls","keys","rect","getBoundingClientRect","getContext","viewport","CULL_FACE","cullFace","BACK","frame","window","requestAnimationFrame","addEventListener","cancelAnimationFrame","removeEventListener","event","preventDefault","indexOf","key","onKeyPress","setState","filter","v","previousScene","nextScene","console","log","timeStamp","className","id","ref","elem","hidden","onClick","React","Component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.684095ff.chunk.js","sourcesContent":["export function degreesToRadians(degrees) {\r\n  var pi = Math.PI;\r\n  return degrees * (pi / 180);\r\n}\r\n\r\nexport function initShaderProgram(gl, vsSource, fsSource) {\r\n  const vertexShader = _loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n  const fragmentShader = _loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n  const shaderProgram = gl.createProgram();\r\n  gl.attachShader(shaderProgram, vertexShader);\r\n  gl.attachShader(shaderProgram, fragmentShader);\r\n  gl.linkProgram(shaderProgram);\r\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n    alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n    return null;\r\n  }\r\n  return shaderProgram;\r\n}\r\n\r\nexport function getShaderParameters(gl, shaderProgram) {\r\n  const attributeCount = gl.getProgramParameter(shaderProgram, gl.ACTIVE_ATTRIBUTES);\r\n  const attributes = [];\r\n  for (let i = 0; i < attributeCount; i++) {\r\n    const attribute = gl.getActiveAttrib(shaderProgram, i);\r\n    attributes.push({ name: attribute.name, type: _typeToString(gl, attribute.type) });\r\n  }\r\n  const uniformCount = gl.getProgramParameter(shaderProgram, gl.ACTIVE_UNIFORMS);\r\n  const uniforms = [];\r\n  for (let i = 0; i < uniformCount; i++) {\r\n    const uniform = gl.getActiveUniform(shaderProgram, i);\r\n    uniforms.push({ name: uniform.name, type: _typeToString(gl, uniform.type) });\r\n  }\r\n  return {\r\n    attributes,\r\n    uniforms\r\n  };\r\n}\r\n\r\nfunction _typeToString(gl, type) {\r\n  switch (type) {\r\n    case gl.FLOAT:\r\n      return \"FLOAT\";\r\n    case gl.FLOAT_VEC2:\r\n      return \"FLOAT_VEC2\";\r\n    case gl.FLOAT_VEC3:\r\n      return \"FLOAT_VEC3\";\r\n    case gl.FLOAT_VEC4:\r\n      return \"FLOAT_VEC4\";\r\n    case gl.INT:\r\n      return \"INT\";\r\n    case gl.INT_VEC2:\r\n      return \"INT_VEC2\";\r\n    case gl.INT_VEC3:\r\n      return \"INT_VEC3\";\r\n    case gl.INT_VEC4:\r\n      return \"INT_VEC4\";\r\n    case gl.BOOL:\r\n      return \"BOOL\";\r\n    case gl.BOOL_VEC2:\r\n      return \"BOOL_VEC2\";\r\n    case gl.BOOL_VEC3:\r\n      return \"BOOL_VEC3\";\r\n    case gl.BOOL_VEC4:\r\n      return \"BOOL_VEC4\";\r\n    case gl.FLOAT_MAT2:\r\n      return \"FLOAT_MAT2\";\r\n    case gl.FLOAT_MAT3:\r\n      return \"FLOAT_MAT3\";\r\n    case gl.FLOAT_MAT4:\r\n      return \"FLOAT_MAT4\";\r\n    case gl.SAMPLER_2D:\r\n      return \"SAMPLER_2D\";\r\n    case gl.SAMPLER_CUBE:\r\n      return \"SAMPLER_CUBE\";\r\n    default:\r\n      return \"UNKNOWN\";\r\n  }\r\n}\r\n\r\nfunction _loadShader(gl, type, source) {\r\n  const shader = gl.createShader(type);\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\r\n    gl.deleteShader(shader);\r\n    return null;\r\n  }\r\n  return shader;\r\n}\r\n\r\nexport function loadTexture(gl, url) {\r\n  const texture = gl.createTexture();\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n  const level = 0;\r\n  const internalFormat = gl.RGBA;\r\n  const width = 1;\r\n  const height = 1;\r\n  const border = 0;\r\n  const srcFormat = gl.RGBA;\r\n  const srcType = gl.UNSIGNED_BYTE;\r\n  const pixel = new Uint8Array([0, 0, 255, 255]);\r\n  gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, srcFormat, srcType, pixel);\r\n  const image = new Image();\r\n  image.onload = () => {\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\r\n      srcFormat, srcType, image);\r\n    if (_isPowerOf2(image.width) && _isPowerOf2(image.height)) {\r\n      gl.generateMipmap(gl.TEXTURE_2D);\r\n    } else {\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n  };\r\n  image.src = url;\r\n  return texture;\r\n}\r\n\r\nfunction _isPowerOf2(value) {\r\n  return (value & (value - 1)) === 0;\r\n}\r\n\r\nexport function clearScreen(gl) {\r\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n  gl.clearDepth(1.0);\r\n  gl.enable(gl.DEPTH_TEST);\r\n  gl.depthFunc(gl.LEQUAL);\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n}\r\n\r\nconst _directions = [\r\n  { x: -1, y: 0 },\r\n  { x: 0, y: -1 },\r\n  { x: 1, y: 0 },\r\n  { x: 0, y: 1 }\r\n];\r\n\r\nexport function generateMaze(width, height, windiness = 0.8) {\r\n  const carve = (pos) => {\r\n    data[pos.y][pos.x] = 0;\r\n  }\r\n\r\n  const canCarve = (pos, dir) => {\r\n    if (!isInBounds(addDir(pos, dir, 3))) {\r\n      return false;\r\n    }\r\n    const nxt = addDir(pos, dir, 2);\r\n    return data[nxt.y][nxt.x] === 1;\r\n  }\r\n\r\n  const isInBounds = (pos) => {\r\n    if (pos.x < 0 || pos.y < 0 || pos.x >= width || pos.y >= height) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const addDir = (pos, dir, len) => {\r\n    return {\r\n      x: pos.x + dir.x * len,\r\n      y: pos.y + dir.y * len\r\n    }\r\n  }\r\n\r\n  const data = [];\r\n  for (let y = 0; y < height; y++) {\r\n    data.push(new Array(width).fill(1));\r\n  }\r\n\r\n  const start = { x: 1, y: 1 };\r\n  const cells = [];\r\n  let lastDir;\r\n  carve(start);\r\n  cells.push(start);\r\n  while (cells.length > 0) {\r\n    const cell = cells[cells.length - 1];\r\n    const posCells = [];\r\n    for (let i = 0; i < _directions.length; i++) {\r\n      const dir = _directions[i];\r\n      if (canCarve(cell, dir)) {\r\n        posCells.push(dir);\r\n      }\r\n    }\r\n    if (posCells.length > 0) {\r\n      let dir;\r\n      if (posCells.includes(lastDir) && Math.random() > windiness) {\r\n        dir = lastDir;\r\n      } else {\r\n        dir = posCells[Math.floor(Math.random() * posCells.length)];\r\n      }\r\n      carve(addDir(cell, dir, 1));\r\n      carve(addDir(cell, dir, 2));\r\n      cells.push(addDir(cell, dir, 2));\r\n      lastDir = dir;\r\n    } else {\r\n      cells.pop();\r\n      lastDir = null;\r\n    }\r\n  }\r\n  return {\r\n    width,\r\n    height,\r\n    data\r\n  };\r\n}\r\n\r\nexport function getShape(shape) {\r\n  if (shape === 'tetrahedron') {\r\n    const s3 = Math.sqrt(3);\r\n    const s6 = Math.sqrt(6);\r\n\r\n    const vertices = [\r\n      [s3 / 3, -s6 / 3 * 0.333 + s6 * 0.025, 0],         // right\r\n      [-s3 / 6, -s6 / 3 * 0.333 + s6 * 0.025, 1 / 2],    // left front\r\n      [-s3 / 6, -s6 / 3 * 0.333 + s6 * 0.025, -1 / 2],   // left back\r\n      [0, s6 / 3 * 0.666 + s6 * 0.025, 0]                // top\r\n    ];\r\n\r\n    const faces = [\r\n      [0, 1, 2],\r\n      [3, 1, 0],\r\n      [3, 0, 2],\r\n      [3, 2, 1]\r\n    ];\r\n\r\n    return { vertices, faces };\r\n  }\r\n\r\n  if (shape === 'cube') {\r\n    const r = .3;\r\n\r\n    const vertices = [\r\n      [-r, -r, -r],\r\n      [-r, -r, r],\r\n      [r, -r, r],\r\n      [r, -r, -r],\r\n      [-r, r, -r],\r\n      [-r, r, r],\r\n      [r, r, r],\r\n      [r, r, -r]\r\n    ];\r\n\r\n    const faces = [\r\n      [0, 3, 2, 1],   // bottom\r\n      [4, 5, 6, 7],   // top\r\n      [0, 1, 5, 4],   // left\r\n      [2, 3, 7, 6],   // right\r\n      [1, 2, 6, 5],   // front\r\n      [3, 0, 4, 7]    // back\r\n    ];\r\n\r\n    return { vertices, faces };\r\n  }\r\n\r\n  if (shape === 'octahedron') {\r\n    const a = 1 / (2 * Math.sqrt(2));\r\n    const b = 1 / 2;\r\n\r\n    const vertices = [\r\n      [-a, 0, a],    // front left\r\n      [a, 0, a],     // front right\r\n      [a, 0, -a],    // back right\r\n      [-a, 0, -a],   // back left\r\n      [0, b, 0],     // top\r\n      [0, -b, 0]     // bottom\r\n    ];\r\n\r\n    const faces = [\r\n      [3, 0, 4],\r\n      [2, 3, 4],\r\n      [1, 2, 4],\r\n      [0, 1, 4],\r\n      [3, 2, 5],\r\n      [0, 3, 5],\r\n      [2, 1, 5],\r\n      [1, 0, 5]\r\n    ];\r\n\r\n    return { vertices, faces };\r\n  }\r\n\r\n  if (shape === 'pentagonaltrapezohedron') {\r\n    const vertices = [\r\n      [0.210292440, 0.15278640, 0.340260320],\r\n      [-0.08032456, 0.24721360, 0.340260320],\r\n      [-0.25993576, 0.00000000, 0.340260320],\r\n      [0.210292440, -0.6472136, 0.340260320],\r\n      [0.420584800, 0.00000000, -0.08032456],\r\n      [0.340260320, 0.24721360, 0.080324560],\r\n      [-0.21029244, 0.64721360, -0.34026032],\r\n      [-0.42058480, 0.00000000, 0.080324560],\r\n      [-0.34026032, -0.2472136, -0.08032456],\r\n      [0.080324560, -0.2472136, -0.34026032],\r\n      [0.259935760, 0.00000000, -0.34026032],\r\n      [-0.21029244, -0.1527864, -0.34026032]\r\n    ];\r\n\r\n    const faces = [\r\n      [3, 0, 1, 2],\r\n      [0, 3, 4, 5],\r\n      [1, 0, 5, 6],\r\n      [2, 1, 6, 7],\r\n      [3, 2, 7, 8],\r\n      [4, 3, 9, 10],\r\n      [5, 4, 10, 6],\r\n      [7, 6, 11, 8],\r\n      [3, 8, 11, 9],\r\n      [10, 9, 11, 6]\r\n    ];\r\n\r\n    return { vertices, faces };\r\n  }\r\n\r\n  if (shape === 'dodecahedron') {\r\n    const phi = (1 + Math.sqrt(5)) / 2;\r\n    const a = 0.5;\r\n    const b = 0.5 * 1 / phi;\r\n    const c = 0.5 * (2 - phi);\r\n\r\n    const vertices = [\r\n      [c, 0, a],\r\n      [-c, 0, a],\r\n      [-b, b, b],\r\n      [0, a, c],\r\n      [b, b, b],\r\n      [b, -b, b],\r\n      [0, -a, c],\r\n      [-b, -b, b],\r\n      [c, 0, -a],\r\n      [-c, 0, -a],\r\n      [-b, -b, -b],\r\n      [0, -a, -c],\r\n      [b, -b, -b],\r\n      [b, b, -b],\r\n      [0, a, -c],\r\n      [-b, b, -b],\r\n      [a, c, 0],\r\n      [-a, c, 0],\r\n      [-a, -c, 0],\r\n      [a, -c, 0]\r\n    ];\r\n\r\n    const faces = [\r\n      [4, 3, 2, 1, 0],\r\n      [7, 6, 5, 0, 1],\r\n      [12, 11, 10, 9, 8],\r\n      [15, 14, 13, 8, 9],\r\n      [14, 3, 4, 16, 13],\r\n      [3, 14, 15, 17, 2],\r\n      [11, 6, 7, 18, 10],\r\n      [6, 11, 12, 19, 5],\r\n      [4, 0, 5, 19, 16],\r\n      [12, 8, 13, 16, 19],\r\n      [15, 9, 10, 18, 17],\r\n      [7, 1, 2, 17, 18]\r\n    ];\r\n\r\n    return { vertices, faces };\r\n  }\r\n\r\n  if (shape === 'icosahedron') {\r\n    const phi = (1 + Math.sqrt(5)) / 2;\r\n    const a = 1 / 2;\r\n    const b = 1 / (2 * phi);\r\n\r\n    const vertices = [\r\n      [0, b, -a],\r\n      [b, a, 0],\r\n      [-b, a, 0],\r\n      [0, b, a],\r\n      [0, -b, a],\r\n      [-a, 0, b],\r\n      [a, 0, b],\r\n      [0, -b, -a],\r\n      [a, 0, -b],\r\n      [-a, 0, -b],\r\n      [b, -a, 0],\r\n      [-b, -a, 0]\r\n    ];\r\n\r\n    const faces = [\r\n      [1, 0, 2],\r\n      [2, 3, 1],\r\n      [4, 3, 5],\r\n      [6, 3, 4],\r\n      [7, 0, 8],\r\n      [9, 0, 7],\r\n      [10, 4, 11],\r\n      [11, 7, 10],\r\n      [5, 2, 9],\r\n      [9, 11, 5],\r\n      [8, 1, 6],\r\n      [6, 10, 8],\r\n      [5, 3, 2],\r\n      [1, 3, 6],\r\n      [2, 0, 9],\r\n      [8, 0, 1],\r\n      [9, 7, 11],\r\n      [10, 7, 8],\r\n      [11, 4, 5],\r\n      [6, 4, 10]\r\n    ];\r\n\r\n    return { vertices, faces };\r\n  }\r\n}\r\n\r\nconst _materials = {\r\n  emerald: {\r\n    ambient: [0.0215, 0.1745, 0.0215], diffuse: [0.07568, 0.61424, 0.07568], specular: [0.633, 0.727811, 0.633], shininess: 0.6\r\n  },\r\n  jade: {\r\n    ambient: [0.135, 0.2225, 0.1575], diffuse: [0.54, 0.89, 0.63], specular: [0.316228, 0.316228, 0.316228], shininess: 0.1\r\n  },\r\n  obsidian: {\r\n    ambient: [0.05375, 0.05, 0.06625], diffuse: [0.18275, 0.17, 0.22525], specular: [0.332741, 0.328634, 0.346435], shininess: 0.3\r\n  },\r\n  pearl: {\r\n    ambient: [0.25, 0.20725, 0.20725], diffuse: [1, 0.829, 0.829], specular: [0.296648, 0.296648, 0.296648], shininess: 0.088\r\n  },\r\n  ruby: {\r\n    ambient: [0.1745, 0.01175, 0.01175], diffuse: [0.61424, 0.04136, 0.04136], specular: [0.727811, 0.626959, 0.626959], shininess: 0.6\r\n  },\r\n  turquoise: {\r\n    ambient: [0.1, 0.18725, 0.1745], diffuse: [0.396, 0.74151, 0.69102], specular: [0.297254, 0.30829, 0.306678], shininess: 0.1\r\n  },\r\n  brass: {\r\n    ambient: [0.329412, 0.223529, 0.027451], diffuse: [0.780392, 0.568627, 0.113725], specular: [0.992157, 0.941176, 0.807843], shininess: 0.21794872\r\n  },\r\n  bronze: {\r\n    ambient: [0.2125, 0.1275, 0.054], diffuse: [0.714, 0.4284, 0.18144], specular: [0.393548, 0.271906, 0.166721], shininess: 0.2\r\n  },\r\n  chrome: {\r\n    ambient: [0.25, 0.25, 0.25], diffuse: [0.4, 0.4, 0.4], specular: [0.774597, 0.774597, 0.774597], shininess: 0.6\r\n  },\r\n  copper: {\r\n    ambient: [0.19125, 0.0735, 0.0225], diffuse: [0.7038, 0.27048, 0.0828], specular: [0.256777, 0.137622, 0.086014], shininess: 0.1\r\n  },\r\n  gold: {\r\n    ambient: [0.24725, 0.1995, 0.0745], diffuse: [0.75164, 0.60648, 0.22648], specular: [0.628281, 0.555802, 0.366065], shininess: 0.4\r\n  },\r\n  silver: {\r\n    ambient: [0.19225, 0.19225, 0.19225], diffuse: [0.50754, 0.50754, 0.50754], specular: [0.508273, 0.508273, 0.508273], shininess: 0.4\r\n  },\r\n  blackPlastic: {\r\n    ambient: [0.0, 0.0, 0.0], diffuse: [0.01, 0.01, 0.01], specular: [0.50, 0.50, 0.50], shininess: 0.25\r\n  },\r\n  cyanPlastic: {\r\n    ambient: [0.0, 0.1, 0.06], diffuse: [0.0, 0.50980392, 0.50980392], specular: [0.50196078, 0.50196078, 0.50196078], shininess: 0.25\r\n  },\r\n  greenPlastic: {\r\n    ambient: [0.0, 0.0, 0.0], diffuse: [0.1, 0.35, 0.1], specular: [0.45, 0.55, 0.45], shininess: 0.25\r\n  },\r\n  redPlastic: {\r\n    ambient: [0.0, 0.0, 0.0], diffuse: [0.5, 0.0, 0.0], specular: [0.7, 0.6, 0.6], shininess: 0.25\r\n  },\r\n  whitePlastic: {\r\n    ambient: [0.0, 0.0, 0.0], diffuse: [0.55, 0.55, 0.55], specular: [0.70, 0.70, 0.70], shininess: 0.25\r\n  },\r\n  yellowPlastic: {\r\n    ambient: [0.0, 0.0, 0.0], diffuse: [0.5, 0.5, 0.0], specular: [0.60, 0.60, 0.50], shininess: 0.25\r\n  },\r\n  blackRubber: {\r\n    ambient: [0.02, 0.02, 0.02], diffuse: [0.01, 0.01, 0.01], specular: [0.4, 0.4, 0.4], shininess: 0.078125\r\n  },\r\n  cyanRubber: {\r\n    ambient: [0.0, 0.05, 0.05], diffuse: [0.4, 0.5, 0.5], specular: [0.04, 0.7, 0.7], shininess: 0.078125\r\n  },\r\n  greenRubber: {\r\n    ambient: [0.0, 0.05, 0.0], diffuse: [0.4, 0.5, 0.4], specular: [0.04, 0.7, 0.04], shininess: 0.078125\r\n  },\r\n  redRubber: {\r\n    ambient: [0.05, 0.0, 0.0], diffuse: [0.5, 0.4, 0.4], specular: [0.7, 0.04, 0.04], shininess: 0.078125\r\n  },\r\n  whiteRubber: {\r\n    ambient: [0.05, 0.05, 0.05], diffuse: [0.5, 0.5, 0.5], specular: [0.7, 0.7, 0.7], shininess: 0.078125\r\n  },\r\n  yellowRubber: {\r\n    ambient: [0.05, 0.05, 0.0], diffuse: [0.5, 0.5, 0.4], specular: [0.7, 0.7, 0.04], shininess: 0.078125\r\n  }\r\n};\r\n\r\nexport function getMaterial(name) {\r\n  return _materials[name];\r\n}\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { initShaderProgram, clearScreen } from '../lib/utility'\r\n\r\nclass ColoredSquareScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const vsSource = `\r\n    attribute vec4 aVertexPosition;\r\n    attribute vec4 aVertexColor;\r\n\r\n    uniform mat4 uModelViewMatrix;\r\n    uniform mat4 uProjectionMatrix;\r\n\r\n    varying lowp vec4 vColor;\r\n\r\n    void main(void) {\r\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n      vColor = aVertexColor;\r\n    }\r\n  `;\r\n\r\n    const fsSource = `\r\n    varying lowp vec4 vColor;\r\n\r\n    void main(void) {\r\n      gl_FragColor = vColor;\r\n    }\r\n  `;\r\n\r\n    const shaderProgram = initShaderProgram(gl, vsSource, fsSource);\r\n\r\n    const programInfo = {\r\n      program: shaderProgram,\r\n      attribLocations: {\r\n        vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\r\n        vertexColor: gl.getAttribLocation(shaderProgram, 'aVertexColor')\r\n      },\r\n      uniformLocations: {\r\n        projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\r\n        modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix')\r\n      }\r\n    };\r\n\r\n    const buffers = this._initBuffers(gl);\r\n\r\n    this.scene = { programInfo, buffers, squareRotation: 0.0 };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n    const { programInfo, buffers } = scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    {\r\n      const numComponents = 4;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\r\n      gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexColor,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n      gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.vertexColor);\r\n    }\r\n\r\n    {\r\n      const numComponents = 2;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexPosition,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n      gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.vertexPosition);\r\n    }\r\n\r\n    {\r\n      const fieldOfView = 45 * Math.PI / 180;\r\n      const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n      const zNear = 0.1;\r\n      const zFar = 100.0;\r\n      const projectionMatrix = mat4.create();\r\n      mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n      const modelViewMatrix = mat4.create();\r\n      mat4.translate(modelViewMatrix, modelViewMatrix, [-0.0, 0.0, -6.0]);\r\n      mat4.rotate(modelViewMatrix, modelViewMatrix, scene.squareRotation, [0, 0, 1]);\r\n      gl.useProgram(programInfo.program);\r\n      gl.uniformMatrix4fv(\r\n        programInfo.uniformLocations.projectionMatrix,\r\n        false,\r\n        projectionMatrix);\r\n      gl.uniformMatrix4fv(\r\n        programInfo.uniformLocations.modelViewMatrix,\r\n        false,\r\n        modelViewMatrix);\r\n    }\r\n\r\n    {\r\n      const offset = 0;\r\n      const vertexCount = 4;\r\n      gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount);\r\n    }\r\n\r\n    scene.squareRotation += deltaTime;\r\n  }\r\n\r\n  _initBuffers(gl) {\r\n    const positions = [\r\n      1.0, 1.0,\r\n      -1.0, 1.0,\r\n      1.0, -1.0,\r\n      -1.0, -1.0,\r\n    ];\r\n    const position = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, position);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const colors = [\r\n      1.0, 1.0, 1.0, 1.0,\r\n      1.0, 0.0, 0.0, 1.0,\r\n      0.0, 1.0, 0.0, 1.0,\r\n      0.0, 0.0, 1.0, 1.0\r\n    ];\r\n    const color = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, color);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\r\n\r\n    return { position, color };\r\n  }\r\n}\r\n\r\nexport default ColoredSquareScene;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport * as vec3 from 'gl-matrix/vec3';\r\nimport { loadTexture, initShaderProgram, getShaderParameters } from '../lib/utility'\r\n\r\nclass Model {\r\n  _initModel(options) {\r\n    const { gl, geometry } = options;\r\n    let texture\r\n    if (options.texture) {\r\n      texture = {};\r\n      if (options.texture.diffuse) {\r\n        texture.diffuse = loadTexture(gl, options.texture.diffuse);\r\n      }\r\n      if (options.texture.normal) {\r\n        texture.normal = loadTexture(gl, options.texture.normal);\r\n      }\r\n      if (options.texture.height) {\r\n        texture.height = loadTexture(gl, options.texture.height);\r\n      }\r\n      if (options.texture.occlusion) {\r\n        texture.occlusion = loadTexture(gl, options.texture.occlusion);\r\n      }\r\n    }\r\n    let vertexShader;\r\n    let fragmentShader;\r\n    Promise.all([\r\n      fetch(options.shader.vertex).then((response) => response.text()).then((text) => vertexShader = text),\r\n      fetch(options.shader.fragment).then((response) => response.text()).then((text) => fragmentShader = text)\r\n    ]).then(() => {\r\n      const shaderProgram = initShaderProgram(gl, vertexShader, fragmentShader);\r\n      const shaderParameters = getShaderParameters(gl, shaderProgram);\r\n      const shader = {\r\n        program: shaderProgram,\r\n        attribLocations: {},\r\n        uniformLocations: {}\r\n      };\r\n      shaderParameters.attributes.forEach((attribute) => {\r\n        const location = gl.getAttribLocation(shaderProgram, attribute.name)\r\n        switch (attribute.name) {\r\n          case 'aVertexPosition':\r\n            shader.attribLocations.vertexPosition = location;\r\n            break;\r\n          case 'aVertexNormal':\r\n            shader.attribLocations.vertexNormal = location;\r\n            break;\r\n          case 'aVertexTangent':\r\n            shader.attribLocations.vertexTangent = location;\r\n            break;\r\n          case 'aVertexBitangent':\r\n            shader.attribLocations.vertexBitangent = location;\r\n            break;\r\n          case 'aVertexColor':\r\n            shader.attribLocations.vertexColor = location;\r\n            break;\r\n          case 'aTextureCoord':\r\n            shader.attribLocations.vertexTextureCoord = location;\r\n            break;\r\n          default:\r\n            alert('unknown attribute of ' + attribute.name);\r\n        }\r\n      });\r\n      shaderParameters.uniforms.forEach((uniform) => {\r\n        const location = gl.getUniformLocation(shaderProgram, uniform.name)\r\n        switch (uniform.name) {\r\n          case 'uModelMatrix':\r\n            shader.uniformLocations.modelMatrix = location;\r\n            break;\r\n          case 'uViewMatrix':\r\n            shader.uniformLocations.viewMatrix = location;\r\n            break;\r\n          case 'uNormalMatrix':\r\n            shader.uniformLocations.normalMatrix = location;\r\n            break;\r\n          case 'uProjectionMatrix':\r\n            shader.uniformLocations.projectionMatrix = location;\r\n            break;\r\n          case 'uSamplerDiffuse':\r\n            shader.uniformLocations.textureDiffuse = location;\r\n            break;\r\n          case 'uSamplerNormal':\r\n            shader.uniformLocations.textureNormal = location;\r\n            break;\r\n          case 'uSamplerHeight':\r\n            shader.uniformLocations.textureHeight = location;\r\n            break;\r\n          case 'uSamplerOcclusion':\r\n            shader.uniformLocations.textureOcclusion = location;\r\n            break;\r\n          case 'uShowDiffuseMap':\r\n            shader.uniformLocations.showDiffuseMap = location;\r\n            break;\r\n          case 'uShowNormalMap':\r\n            shader.uniformLocations.showNormalMap = location;\r\n            break;\r\n          case 'uShowAmbientOcclusionMap':\r\n            shader.uniformLocations.showAmbientOcclusionMap = location;\r\n            break;\r\n          case 'uPerPixel':\r\n            shader.uniformLocations.perPixel = location;\r\n            break;\r\n          case 'uParallaxHeightScale':\r\n            shader.uniformLocations.parallaxHeightScale = location;\r\n            break;\r\n          case 'uParallaxSteps':\r\n            shader.uniformLocations.parallaxSteps = location;\r\n            break;\r\n          case 'uParallaxOcclusionMapping':\r\n            shader.uniformLocations.parallaxOcclusionMapping = location;\r\n            break;\r\n          case 'uCameraPos':\r\n            shader.uniformLocations.cameraPosition = location;\r\n            break;\r\n          case 'uAmbientLight':\r\n            shader.uniformLocations.ambientLight = location;\r\n            break;\r\n          case 'uDirectionalLight.color':\r\n            if (!shader.uniformLocations.directionalLight) {\r\n              shader.uniformLocations.directionalLight = {};\r\n            }\r\n            shader.uniformLocations.directionalLight.color = location;\r\n            break;\r\n          case 'uDirectionalLight.direction':\r\n            if (!shader.uniformLocations.directionalLight) {\r\n              shader.uniformLocations.directionalLight = {};\r\n            }\r\n            shader.uniformLocations.directionalLight.direction = location;\r\n            break;\r\n          case 'uPointLight.color':\r\n            if (!shader.uniformLocations.pointLight) {\r\n              shader.uniformLocations.pointLight = {};\r\n            }\r\n            shader.uniformLocations.pointLight.color = location;\r\n            break;\r\n          case 'uPointLight.position':\r\n            if (!shader.uniformLocations.pointLight) {\r\n              shader.uniformLocations.pointLight = {};\r\n            }\r\n            shader.uniformLocations.pointLight.position = location;\r\n            break;\r\n          case 'uLight[0].position':\r\n            if (!shader.uniformLocations.lights) {\r\n              shader.uniformLocations.lights = [];\r\n            }\r\n            while (shader.uniformLocations.lights.length < 1) {\r\n              shader.uniformLocations.lights.push({});\r\n            }\r\n            shader.uniformLocations.lights[0].position = location;\r\n            break;\r\n          case 'uLight[0].ambient':\r\n            if (!shader.uniformLocations.lights) {\r\n              shader.uniformLocations.lights = [];\r\n            }\r\n            while (shader.uniformLocations.lights.length < 1) {\r\n              shader.uniformLocations.lights.push({});\r\n            }\r\n            shader.uniformLocations.lights[0].ambient = location;\r\n            break;\r\n          case 'uLight[0].diffuse':\r\n            if (!shader.uniformLocations.lights) {\r\n              shader.uniformLocations.lights = [];\r\n            }\r\n            while (shader.uniformLocations.lights.length < 1) {\r\n              shader.uniformLocations.lights.push({});\r\n            }\r\n            shader.uniformLocations.lights[0].diffuse = location;\r\n            break;\r\n          case 'uLight[0].specular':\r\n            if (!shader.uniformLocations.lights) {\r\n              shader.uniformLocations.lights = [];\r\n            }\r\n            while (shader.uniformLocations.lights.length < 1) {\r\n              shader.uniformLocations.lights.push({});\r\n            }\r\n            shader.uniformLocations.lights[0].specular = location;\r\n            break;\r\n          case 'uLight[1].position':\r\n            if (!shader.uniformLocations.lights) {\r\n              shader.uniformLocations.lights = [];\r\n            }\r\n            while (shader.uniformLocations.lights.length < 2) {\r\n              shader.uniformLocations.lights.push({});\r\n            }\r\n            shader.uniformLocations.lights[1].position = location;\r\n            break;\r\n          case 'uLight[1].ambient':\r\n            if (!shader.uniformLocations.lights) {\r\n              shader.uniformLocations.lights = [];\r\n            }\r\n            while (shader.uniformLocations.lights.length < 2) {\r\n              shader.uniformLocations.lights.push({});\r\n            }\r\n            shader.uniformLocations.lights[1].ambient = location;\r\n            break;\r\n          case 'uLight[1].diffuse':\r\n            if (!shader.uniformLocations.lights) {\r\n              shader.uniformLocations.lights = [];\r\n            }\r\n            while (shader.uniformLocations.lights.length < 2) {\r\n              shader.uniformLocations.lights.push({});\r\n            }\r\n            shader.uniformLocations.lights[1].diffuse = location;\r\n            break;\r\n          case 'uLight[1].specular':\r\n            if (!shader.uniformLocations.lights) {\r\n              shader.uniformLocations.lights = [];\r\n            }\r\n            while (shader.uniformLocations.lights.length < 2) {\r\n              shader.uniformLocations.lights.push({});\r\n            }\r\n            shader.uniformLocations.lights[1].specular = location;\r\n            break;\r\n          case 'uMaterial.ambient':\r\n            if (!shader.uniformLocations.material) {\r\n              shader.uniformLocations.material = {};\r\n            }\r\n            shader.uniformLocations.material.ambient = location;\r\n            break;\r\n          case 'uMaterial.diffuse':\r\n            if (!shader.uniformLocations.material) {\r\n              shader.uniformLocations.material = {};\r\n            }\r\n            shader.uniformLocations.material.diffuse = location;\r\n            break;\r\n          case 'uMaterial.specular':\r\n            if (!shader.uniformLocations.material) {\r\n              shader.uniformLocations.material = {};\r\n            }\r\n            shader.uniformLocations.material.specular = location;\r\n            break;\r\n          case 'uMaterial.shininess':\r\n            if (!shader.uniformLocations.material) {\r\n              shader.uniformLocations.material = {};\r\n            }\r\n            shader.uniformLocations.material.shininess = location;\r\n            break;\r\n          default:\r\n            alert('unknown uniform of ' + uniform.name);\r\n        }\r\n      });\r\n      const buffers = this._initBuffers(gl, shader, geometry);\r\n      this.model = {\r\n        shader,\r\n        buffers,\r\n        texture\r\n      };\r\n    });\r\n  }\r\n\r\n  _initBuffers(gl, shader, geometry) {\r\n    const positions = [];\r\n    const normals = [];\r\n    const tangents = [];\r\n    const bitangents = [];\r\n    const textureCoordinates = [];\r\n    const colors = [];\r\n    const indices = [];\r\n    const normal = vec3.create();\r\n    const tangent = vec3.create();\r\n    const bitangent = vec3.create();\r\n    let offset = 0;\r\n\r\n    const addSquare = (c0, c1, c2, c3, options) => {\r\n      positions.push(...c0, ...c1, ...c2, ...c3);\r\n      indices.push(offset + 0, offset + 1, offset + 2, offset + 2, offset + 3, offset + 0);\r\n      offset += 4;\r\n\r\n      if (shader.attribLocations.vertexNormal || shader.attribLocations.vertexTangent || shader.attribLocations.vertexBitangent) {\r\n        vec3.subtract(tangent, c1, c0);\r\n        vec3.subtract(bitangent, c3, c0);\r\n\r\n        if (shader.attribLocations.vertexNormal) {\r\n          vec3.cross(normal, tangent, bitangent);\r\n          vec3.normalize(normal, normal);\r\n          normals.push(...normal, ...normal, ...normal, ...normal);\r\n        }\r\n\r\n        if (shader.attribLocations.vertexTangent) {\r\n          vec3.normalize(tangent, tangent);\r\n          tangents.push(...tangent, ...tangent, ...tangent, ...tangent);\r\n        }\r\n\r\n        if (shader.attribLocations.vertexBitangent) {\r\n          vec3.normalize(bitangent, bitangent);\r\n          bitangents.push(...bitangent, ...bitangent, ...bitangent, ...bitangent);\r\n        }\r\n      }\r\n\r\n      if (shader.attribLocations.vertexTextureCoord) {\r\n        textureCoordinates.push(0, 0, 1, 0, 1, 1, 0, 1);\r\n      }\r\n\r\n      if (shader.attribLocations.vertexColor) {\r\n        colors.push(...options.color, ...options.color, ...options.color, ...options.color);\r\n      }\r\n    }\r\n\r\n    const addTriangle = (c0, c1, c2, options) => {\r\n      positions.push(...c0, ...c1, ...c2);\r\n      indices.push(offset + 0, offset + 1, offset + 2);\r\n      offset += 3;\r\n\r\n      if (shader.attribLocations.vertexNormal || shader.attribLocations.vertexTangent || shader.attribLocations.vertexBitangent) {\r\n        vec3.subtract(tangent, c1, c0);\r\n        vec3.subtract(bitangent, c2, c0);\r\n\r\n        if (shader.attribLocations.vertexNormal) {\r\n          vec3.cross(normal, tangent, bitangent);\r\n          vec3.normalize(normal, normal);\r\n          normals.push(...normal, ...normal, ...normal);\r\n        }\r\n\r\n        if (shader.attribLocations.vertexTangent) {\r\n          vec3.normalize(tangent, tangent);\r\n          tangents.push(...tangent, ...tangent, ...tangent);\r\n        }\r\n\r\n        if (shader.attribLocations.vertexBitangent) {\r\n          vec3.normalize(bitangent, bitangent);\r\n          bitangents.push(...bitangent, ...bitangent, ...bitangent);\r\n        }\r\n      }\r\n\r\n      if (shader.attribLocations.vertexColor) {\r\n        colors.push(...options.color, ...options.color, ...options.color);\r\n      }\r\n    }\r\n\r\n    const addPentagon = (c0, c1, c2, c3, c4, options) => {\r\n      positions.push(...c0, ...c1, ...c2, ...c3, ...c4);\r\n      indices.push(offset + 0, offset + 3, offset + 4, offset + 0, offset + 1, offset + 3, offset + 1, offset + 2, offset + 3);\r\n      offset += 5;\r\n\r\n      if (shader.attribLocations.vertexNormal || shader.attribLocations.vertexTangent || shader.attribLocations.vertexBitangent) {\r\n        vec3.subtract(tangent, c1, c0);\r\n        vec3.subtract(bitangent, c4, c0);\r\n\r\n        if (shader.attribLocations.vertexNormal) {\r\n          vec3.cross(normal, tangent, bitangent);\r\n          vec3.normalize(normal, normal);\r\n          normals.push(...normal, ...normal, ...normal, ...normal, ...normal);\r\n        }\r\n\r\n        if (shader.attribLocations.vertexTangent) {\r\n          vec3.normalize(tangent, tangent);\r\n          tangents.push(...tangent, ...tangent, ...tangent, ...tangent, ...tangent);\r\n        }\r\n\r\n        if (shader.attribLocations.vertexBitangent) {\r\n          vec3.normalize(bitangent, bitangent);\r\n          bitangents.push(...bitangent, ...bitangent, ...bitangent, ...bitangent, ...bitangent);\r\n        }\r\n      }\r\n\r\n      if (shader.attribLocations.vertexColor) {\r\n        colors.push(...options.color, ...options.color, ...options.color, ...options.color, ...options.color);\r\n      }\r\n    }\r\n\r\n    const addFace = (vertices, face, options) => {\r\n      switch (face.length) {\r\n        case 3:\r\n          addTriangle(vertices[face[0]], vertices[face[1]], vertices[face[2]], options);\r\n          break;\r\n        case 4:\r\n          addSquare(vertices[face[0]], vertices[face[1]], vertices[face[2]], vertices[face[3]], options);\r\n          break;\r\n        case 5:\r\n          addPentagon(vertices[face[0]], vertices[face[1]], vertices[face[2]], vertices[face[3]], vertices[face[4]], options);\r\n          break;\r\n        default:\r\n          alert('faces with ' + face.length + ' vertices are not supported');\r\n      }\r\n    }\r\n\r\n    const addFaces = (vertices, faces, options) => {\r\n      for (let i = 0; i < faces.length; i++) {\r\n        let option = {}\r\n        if (options) {\r\n          if (options.colors) {\r\n            option.color = options.colors[i % options.colors.length];\r\n          }\r\n        }\r\n        addFace(vertices, faces[i], option);\r\n      }\r\n    }\r\n\r\n    geometry({ addSquare, addFaces });\r\n\r\n    const positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const indexBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\r\n\r\n    const buffers = { position: positionBuffer, indices: indexBuffer, vertexCount: indices.length }\r\n\r\n    if (shader.attribLocations.vertexNormal) {\r\n      const normalBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normals), gl.STATIC_DRAW);\r\n      buffers.normal = normalBuffer;\r\n    }\r\n\r\n    if (shader.attribLocations.vertexTangent) {\r\n      const tangentBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, tangentBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(tangents), gl.STATIC_DRAW);\r\n      buffers.tangent = tangentBuffer;\r\n    }\r\n\r\n    if (shader.attribLocations.vertexBitangent) {\r\n      const bitangentBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, bitangentBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(bitangents), gl.STATIC_DRAW);\r\n      buffers.bitangent = bitangentBuffer;\r\n    }\r\n\r\n    if (shader.attribLocations.vertexTextureCoord) {\r\n      const textureCoordBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, textureCoordBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW);\r\n      buffers.textureCoord = textureCoordBuffer;\r\n    }\r\n\r\n    if (shader.attribLocations.vertexColor) {\r\n      const colorBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\r\n      buffers.color = colorBuffer;\r\n    }\r\n\r\n    return buffers;\r\n  }\r\n\r\n  _drawModel(options) {\r\n    if (!options.model) {\r\n      return;\r\n    }\r\n\r\n    const { gl, model, projectionMatrix, viewMatrix, modelMatrix } = options;\r\n    const { shader, buffers, texture } = model;\r\n\r\n    {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexPosition, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexPosition);\r\n    }\r\n\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\r\n\r\n    if (shader.attribLocations.vertexNormal) {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.normal);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexNormal, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexNormal);\r\n    }\r\n\r\n    if (shader.attribLocations.vertexTangent) {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.tangent);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexTangent, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexTangent);\r\n    }\r\n\r\n    if (shader.attribLocations.vertexBitangent) {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.bitangent);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexBitangent, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexBitangent);\r\n    }\r\n\r\n    if (shader.attribLocations.vertexTextureCoord) {\r\n      const numComponents = 2;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.textureCoord);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexTextureCoord, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexTextureCoord);\r\n    }\r\n\r\n    if (shader.attribLocations.vertexColor) {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexColor, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexColor);\r\n    }\r\n\r\n    gl.useProgram(shader.program);\r\n    gl.uniformMatrix4fv(shader.uniformLocations.projectionMatrix, false, projectionMatrix);\r\n    gl.uniformMatrix4fv(shader.uniformLocations.modelMatrix, false, modelMatrix);\r\n    gl.uniformMatrix4fv(shader.uniformLocations.viewMatrix, false, viewMatrix);\r\n\r\n    if (shader.uniformLocations.normalMatrix) {\r\n      const normalMatrix = mat4.create();\r\n      mat4.invert(normalMatrix, modelMatrix);\r\n      mat4.transpose(normalMatrix, normalMatrix);\r\n      gl.uniformMatrix4fv(shader.uniformLocations.normalMatrix, false, normalMatrix);\r\n    }\r\n\r\n    if (shader.uniformLocations.showDiffuseMap) {\r\n      gl.uniform1i(shader.uniformLocations.showDiffuseMap, options.showDiffuseMap);\r\n    }\r\n\r\n    if (shader.uniformLocations.showNormalMap) {\r\n      gl.uniform1i(shader.uniformLocations.showNormalMap, options.showNormalMap);\r\n    }\r\n\r\n    if (shader.uniformLocations.showAmbientOcclusionMap) {\r\n      gl.uniform1i(shader.uniformLocations.showAmbientOcclusionMap, options.showAmbientOcclusionMap);\r\n    }\r\n\r\n    if (shader.uniformLocations.perPixel) {\r\n      gl.uniform1i(shader.uniformLocations.perPixel, options.perPixel);\r\n    }\r\n\r\n    if (shader.uniformLocations.parallaxHeightScale) {\r\n      gl.uniform1f(shader.uniformLocations.parallaxHeightScale, options.parallaxHeightScale);\r\n    }\r\n\r\n    if (shader.uniformLocations.parallaxSteps) {\r\n      gl.uniform1i(shader.uniformLocations.parallaxSteps, options.parallaxSteps);\r\n    }\r\n\r\n    if (shader.uniformLocations.parallaxOcclusionMapping) {\r\n      gl.uniform1i(shader.uniformLocations.parallaxOcclusionMapping, options.parallaxOcclusionMapping);\r\n    }\r\n\r\n    if (shader.uniformLocations.ambientLight) {\r\n      gl.uniform3fv(shader.uniformLocations.ambientLight, options.ambientLight);\r\n    }\r\n\r\n    if (shader.uniformLocations.directionalLight) {\r\n      const direction = vec3.clone(options.directionalLight.direction);\r\n      vec3.normalize(direction, direction);\r\n      gl.uniform3fv(shader.uniformLocations.directionalLight.color, options.directionalLight.color);\r\n      gl.uniform3fv(shader.uniformLocations.directionalLight.direction, direction);\r\n    }\r\n\r\n    if (shader.uniformLocations.pointLight) {\r\n      gl.uniform3fv(shader.uniformLocations.pointLight.color, options.pointLight.color);\r\n      gl.uniform3fv(shader.uniformLocations.pointLight.position, options.pointLight.position);\r\n    }\r\n\r\n    if (options.lights) {\r\n      const lights = options.lights;\r\n      for (let i = 0; i < lights.length; i++) {\r\n        const light = lights[i];\r\n        gl.uniform3fv(shader.uniformLocations.lights[i].position, light.position);\r\n        gl.uniform3fv(shader.uniformLocations.lights[i].ambient, light.ambient);\r\n        gl.uniform3fv(shader.uniformLocations.lights[i].diffuse, light.diffuse);\r\n        gl.uniform3fv(shader.uniformLocations.lights[i].specular, light.specular);\r\n      }\r\n    }\r\n\r\n    if (options.material) {\r\n      const material = options.material;\r\n      gl.uniform3fv(shader.uniformLocations.material.ambient, material.ambient);\r\n      gl.uniform3fv(shader.uniformLocations.material.diffuse, material.diffuse);\r\n      gl.uniform3fv(shader.uniformLocations.material.specular, material.specular);\r\n      gl.uniform1f(shader.uniformLocations.material.shininess, material.shininess);\r\n    }\r\n\r\n    if (shader.uniformLocations.cameraPosition) {\r\n      gl.uniform3fv(shader.uniformLocations.cameraPosition, options.cameraPosition);\r\n    }\r\n\r\n    if (shader.uniformLocations.textureDiffuse) {\r\n      gl.activeTexture(gl.TEXTURE0);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.diffuse);\r\n      gl.uniform1i(shader.uniformLocations.textureDiffuse, 0);\r\n    }\r\n\r\n    if (shader.uniformLocations.textureNormal) {\r\n      gl.activeTexture(gl.TEXTURE1);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.normal);\r\n      gl.uniform1i(shader.uniformLocations.textureNormal, 1);\r\n    }\r\n\r\n    if (shader.uniformLocations.textureHeight) {\r\n      gl.activeTexture(gl.TEXTURE2);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.height);\r\n      gl.uniform1i(shader.uniformLocations.textureHeight, 2);\r\n    }\r\n\r\n    if (shader.uniformLocations.textureOcclusion) {\r\n      gl.activeTexture(gl.TEXTURE3);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.occlusion);\r\n      gl.uniform1i(shader.uniformLocations.textureOcclusion, 3);\r\n    }\r\n\r\n    {\r\n      const vertexCount = buffers.vertexCount;\r\n      const type = gl.UNSIGNED_SHORT;\r\n      const offset = 0;\r\n      gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Model;\r\n","import Model from './Model';\r\nimport { getShape } from '../lib/utility';\r\n\r\nclass ColoredModel extends Model {\r\n  constructor(gl, shapeName, colors) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: ({ addFaces }) => {\r\n        const shape = getShape(shapeName);\r\n        addFaces(shape.vertices, shape.faces, { colors });\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/colored/vertex.glsl',\r\n        fragment: 'shaders/colored/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix, lights, material) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix,\r\n      lights,\r\n      material\r\n    });\r\n  }\r\n}\r\n\r\nexport default ColoredModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen } from '../lib/utility'\r\nimport ColoredModel from '../models/ColoredModel';\r\n\r\nclass ColoredCubeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const colors1 = [\r\n      [0.0, 0.0, 1.0],    // Bottom face: blue\r\n      [0.0, 1.0, 0.0],    // Top face: green\r\n      [1.0, 0.0, 1.0],    // Left face: purple\r\n      [1.0, 1.0, 0.0],    // Right face: yellow\r\n      [1.0, 1.0, 1.0],    // Front face: white\r\n      [1.0, 0.0, 0.0]     // Back face: red\r\n    ];\r\n    const model6 = new ColoredModel(gl, 'cube', colors1);\r\n    const colors2 = [\r\n      [1.0, 0.0, 0.0],\r\n      [0.0, 0.0, 1.0],\r\n      [0.0, 1.0, 0.0],\r\n      [1.0, 1.0, 0.0],\r\n      [0.0, 1.0, 1.0],\r\n      [1.0, 0.0, 1.0],\r\n      [1.0, 0.5, 0.0],\r\n      [0.0, 1.0, 0.5],\r\n      [1.0, 0.0, 0.5],\r\n      [0.5, 1.0, 0.0],\r\n      [0.0, 0.5, 1.0],\r\n      [0.5, 0.0, 1.0]\r\n    ];\r\n    const model12 = new ColoredModel(gl, 'dodecahedron', colors2);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model: model6,\r\n          location: [-1.6, 0.0, -6.0],\r\n          scale: [3.0, 3.0, 3.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 1.0\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.7\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model12,\r\n          location: [1.6, 0.0, -6.0],\r\n          scale: [2.8, 2.8, 2.8],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 1.0\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.7\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    if (actor.scale) {\r\n      mat4.scale(modelMatrix, modelMatrix, actor.scale);\r\n    }\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      mat4.rotate(modelMatrix, modelMatrix, rotation.angle, rotation.axis);\r\n    }\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      rotation.angle += deltaTime * rotation.speed;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ColoredCubeScene;\r\n","import Model from './Model';\r\n\r\nclass TexturedCubeModel extends Model {\r\n  constructor(gl) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: this._geometry,\r\n      texture: {\r\n        diffuse: 'images/cubetexture.png'\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/texturedcube/vertex.glsl',\r\n        fragment: 'shaders/texturedcube/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix\r\n    });\r\n  }\r\n\r\n  _geometry({ addSquare }) {\r\n    const f0 = [-1, -1, 1];\r\n    const f1 = [1, -1, 1];\r\n    const f2 = [1, 1, 1];\r\n    const f3 = [-1, 1, 1];\r\n    const b0 = [-1, -1, -1];\r\n    const b1 = [1, -1, -1];\r\n    const b2 = [1, 1, -1];\r\n    const b3 = [-1, 1, -1];\r\n    addSquare(f0, f1, f2, f3);  // front\r\n    addSquare(b1, b0, b3, b2);  // back\r\n    addSquare(b0, f0, f3, b3);  // left\r\n    addSquare(f1, b1, b2, f2);  // right\r\n    addSquare(b0, b1, f1, f0);  // bottom\r\n    addSquare(b2, b3, f3, f2);  // top\r\n  }\r\n}\r\n\r\nexport default TexturedCubeModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen } from '../lib/utility'\r\nimport TexturedCubeModel from '../models/TexturedCubeModel';\r\n\r\nclass TexturedCubeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const model = new TexturedCubeModel(gl);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [0.0, 0.0, -6.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 1.0\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.7\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      mat4.rotate(modelMatrix, modelMatrix, rotation.angle, rotation.axis);\r\n    }\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      rotation.angle += deltaTime * rotation.speed;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TexturedCubeScene;\r\n","import Model from './Model';\r\n\r\nclass LightedCubeModel extends Model {\r\n  constructor(gl) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: this._geometry,\r\n      texture: {\r\n        diffuse: 'images/cubetexture.png'\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/lightedcube/vertex.glsl',\r\n        fragment: 'shaders/lightedcube/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix, perPixel) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix,\r\n      ambientLight: [0.3, 0.3, 0.3],\r\n      directionalLight: {\r\n        color: [0.5, 0.5, 0.5],\r\n        direction: [0.0, 1.0, 0.0]\r\n      },\r\n      pointLight: {\r\n        color: [0.7, 0.7, 0.7],\r\n        position: [0.0, 0.0, 0.0]\r\n      },\r\n      cameraPosition: [0.0, 0.0, 0.0],\r\n      perPixel\r\n    });\r\n  }\r\n\r\n  _geometry({ addSquare }) {\r\n    const f0 = [-1, -1, 1];\r\n    const f1 = [1, -1, 1];\r\n    const f2 = [1, 1, 1];\r\n    const f3 = [-1, 1, 1];\r\n    const b0 = [-1, -1, -1];\r\n    const b1 = [1, -1, -1];\r\n    const b2 = [1, 1, -1];\r\n    const b3 = [-1, 1, -1];\r\n    addSquare(f0, f1, f2, f3);  // front\r\n    addSquare(b1, b0, b3, b2);  // back\r\n    addSquare(b0, f0, f3, b3);  // left\r\n    addSquare(f1, b1, b2, f2);  // right\r\n    addSquare(b0, b1, f1, f0);  // bottom\r\n    addSquare(b2, b3, f3, f2);  // top\r\n  }\r\n}\r\n\r\nexport default LightedCubeModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen } from '../lib/utility'\r\nimport LightedCubeModel from '../models/LightedCubeModel';\r\n\r\nclass LightedCubeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const model = new LightedCubeModel(gl);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [-2.0, 0.0, -5.5],\r\n          rotation: 0.0,\r\n          rotationSpeed: 1.0,\r\n          perPixel: false\r\n        },\r\n        {\r\n          model,\r\n          location: [2.0, 0.0, -5.5],\r\n          rotation: 0.0,\r\n          rotationSpeed: 1.0,\r\n          perPixel: true\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0],\r\n      cameraDir: [0.0, 0.0, 2.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n\r\n    if (scene.camera[2] > 16.0) {\r\n      scene.camera[2] = 16.0;\r\n      scene.cameraDir[2] = -2.0;\r\n    } else if (scene.camera[2] < 0.0) {\r\n      scene.camera[2] = 0.0;\r\n      scene.cameraDir[2] = 2.0;\r\n    }\r\n\r\n    scene.camera[0] += scene.cameraDir[0] * deltaTime;\r\n    scene.camera[1] += scene.cameraDir[1] * deltaTime;\r\n    scene.camera[2] += scene.cameraDir[2] * deltaTime;\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation, [0, 0, 1]);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation * 0.7, [0, 1, 0]);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation * 0.3, [1, 0, 0]);\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix, actor.perPixel);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    actor.rotation += deltaTime * actor.rotationSpeed;\r\n  }\r\n}\r\n\r\nexport default LightedCubeScene;\r\n","import Model from './Model';\r\n\r\nclass MazeModel extends Model {\r\n  constructor(gl, maze) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this.update = this.update.bind(this);\r\n    this.geometry = this.geometry.bind(this);\r\n    this.maze = maze;\r\n    this._initModel({\r\n      gl,\r\n      geometry: this.geometry,\r\n      shader: {\r\n        vertex: 'shaders/colored/vertex.glsl',\r\n        fragment: 'shaders/colored/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix, lights, material) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix,\r\n      lights,\r\n      material\r\n    });\r\n  }\r\n\r\n  update(maze) {\r\n    const gl = this.gl;\r\n    const buffers = this.model.buffers;\r\n    gl.deleteBuffer(buffers.position);\r\n    gl.deleteBuffer(buffers.color);\r\n    gl.deleteBuffer(buffers.indices);\r\n    this.maze = maze;\r\n    this.model.buffers = this._initBuffers(gl, this.model.shader, this.geometry);\r\n  }\r\n\r\n  geometry({ addSquare }) {\r\n    const maze = this.maze;\r\n\r\n    const floorColor = [.2, .2, .2];\r\n    const ceilingColor = [.7, .7, .7];\r\n    const wallColor_Back = [.5, 0, .5];\r\n    const wallColor_Front = [0, .5, 0];\r\n    const wallColor_Left = [.5, 0, 0];\r\n    const wallColor_Right = [0, .0, .5];\r\n\r\n    const ofs_x = -maze.width / 2;\r\n    const ofs_y = -maze.height / 2;\r\n    for (let y = 0; y < maze.height; y++) {\r\n      for (let x = 0; x < maze.width; x++) {\r\n        const left = x + ofs_x;\r\n        const right = left + 1;\r\n        const back = y + ofs_y;\r\n        const front = back + 1;\r\n        const top = 1;\r\n        const bottom = 0;\r\n\r\n        const f0 = [left, top, front];\r\n        const f1 = [right, top, front];\r\n        const f2 = [right, bottom, front];\r\n        const f3 = [left, bottom, front];\r\n        const b0 = [left, top, back];\r\n        const b1 = [right, top, back];\r\n        const b2 = [right, bottom, back];\r\n        const b3 = [left, bottom, back];\r\n\r\n        if (maze.data[y][x] === 0) {\r\n          addSquare(b2, b3, f3, f2, { color: floorColor });\r\n        } else {\r\n          addSquare(b1, b0, f0, f1, { color: ceilingColor });\r\n\r\n          if (y === 0 || maze.data[y - 1][x] === 0) {\r\n            addSquare(b0, b1, b2, b3, { color: wallColor_Back });\r\n          }\r\n\r\n          if (x === 0 || maze.data[y][x - 1] === 0) {\r\n            addSquare(f0, b0, b3, f3, { color: wallColor_Left });\r\n          }\r\n\r\n          if (y === maze.height - 1 || maze.data[y + 1][x] === 0) {\r\n            addSquare(f1, f0, f3, f2, { color: wallColor_Front });\r\n          }\r\n\r\n          if (x === maze.width - 1 || maze.data[y][x + 1] === 0) {\r\n            addSquare(b1, f1, f2, b2, { color: wallColor_Right });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default MazeModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen, degreesToRadians, generateMaze } from '../lib/utility'\r\nimport MazeModel from '../models/MazeModel';\r\n\r\nclass MazeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n    this.totalDelta = 0.0;\r\n  }\r\n\r\n  initScene(gl) {\r\n    const size = Math.floor(Math.random() * 35) * 2 + 11;\r\n    const maze = generateMaze(size, size);\r\n    const model = new MazeModel(gl, maze);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [0.0, 0.0, -2.0 * size],\r\n          rotation: { angle: 0.0, axis: [0, 1, 0], speed: 0.5 }\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 500.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    mat4.rotate(modelMatrix, modelMatrix, degreesToRadians(45), [1, 0, 0]);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation.angle, actor.rotation.axis);\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    actor.rotation.angle += deltaTime * actor.rotation.speed;\r\n    this.totalDelta += deltaTime;\r\n    if (this.totalDelta >= 10.0) {\r\n      this.totalDelta -= 10.0;\r\n      const size = Math.floor(Math.random() * 35) * 2 + 11;\r\n      const maze = generateMaze(size, size);\r\n      actor.location[2] = -2.0 * size;\r\n      actor.model.update(maze);\r\n    }\r\n  }\r\n}\r\n\r\nexport default MazeScene;\r\n","import Model from './Model';\r\n\r\nclass BrickWallModel extends Model {\r\n  constructor(gl) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: this._geometry,\r\n      texture: {\r\n        diffuse: 'images/Brick_Wall_017_basecolor.jpg',\r\n        normal: 'images/Brick_Wall_017_normal.jpg',\r\n        height: 'images/Brick_Wall_017_height.png',\r\n        occlusion: 'images/Brick_Wall_017_ambientOcclusion.jpg'\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/brickwall/vertex.glsl',\r\n        fragment: 'shaders/brickwall/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix,\r\n      showDiffuseMap: 1,\r\n      showNormalMap: 1,\r\n      showAmbientOcclusionMap: 1,\r\n      parallaxHeightScale: 0.04,\r\n      parallaxSteps: 32,\r\n      parallaxOcclusionMapping: 1,\r\n      ambientLight: [0.3, 0.3, 0.3],\r\n      directionalLight: {\r\n        color: [0.4, 0.4, 0.4],\r\n        direction: [0.0, -1.0, 1.0]\r\n      },\r\n      pointLight: {\r\n        color: [1.0, 1.0, 1.0],\r\n        position: [0.0, 0.0, 0.0]\r\n      },\r\n      cameraPosition: [0.0, 0.0, 0.0]\r\n    });\r\n  }\r\n\r\n  _geometry({ addSquare }) {\r\n    const f0 = [-1, -1, 1];\r\n    const f1 = [1, -1, 1];\r\n    const f2 = [1, 1, 1];\r\n    const f3 = [-1, 1, 1];\r\n    const b0 = [-1, -1, -1];\r\n    const b1 = [1, -1, -1];\r\n    const b2 = [1, 1, -1];\r\n    const b3 = [-1, 1, -1];\r\n    addSquare(f0, f1, f2, f3);  // front\r\n    addSquare(b1, b0, b3, b2);  // back\r\n    addSquare(b0, f0, f3, b3);  // left\r\n    addSquare(f1, b1, b2, f2);  // right\r\n    addSquare(b0, b1, f1, f0);  // top\r\n    addSquare(b2, b3, f3, f2);  // bottom\r\n  }\r\n}\r\n\r\nexport default BrickWallModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen } from '../lib/utility'\r\nimport BrickWallModel from '../models/BrickWallModel';\r\n\r\nclass BrickWallScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const model = new BrickWallModel(gl);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [0.0, 0.0, -5.5],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.4\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.2\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      mat4.rotate(modelMatrix, modelMatrix, rotation.angle, rotation.axis);\r\n    }\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      rotation.angle += deltaTime * rotation.speed;\r\n    }\r\n  }\r\n}\r\n\r\nexport default BrickWallScene;\r\n","import Model from './Model';\r\nimport { getShape } from '../lib/utility';\r\n\r\nclass MaterialModel extends Model {\r\n  constructor(gl, shapeName) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: ({ addFaces }) => {\r\n        const shape = getShape(shapeName);\r\n        addFaces(shape.vertices, shape.faces);\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/material/vertex.glsl',\r\n        fragment: 'shaders/material/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix, lights, material) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix,\r\n      lights,\r\n      material\r\n    });\r\n  }\r\n}\r\n\r\nexport default MaterialModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen, getMaterial } from '../lib/utility'\r\nimport MaterialModel from '../models/MaterialModel';\r\n\r\nclass MaterialScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const model4 = new MaterialModel(gl, 'tetrahedron');\r\n    const model6 = new MaterialModel(gl, 'cube');\r\n    const model8 = new MaterialModel(gl, 'octahedron');\r\n    const model10 = new MaterialModel(gl, 'pentagonaltrapezohedron');\r\n    const model12 = new MaterialModel(gl, 'dodecahedron');\r\n    const model20 = new MaterialModel(gl, 'icosahedron');\r\n\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model: model4,\r\n          material: getMaterial('gold'),\r\n          location: [-3.75, 0.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model6,\r\n          material: getMaterial('gold'),\r\n          location: [-2.25, 0.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model8,\r\n          material: getMaterial('gold'),\r\n          location: [-0.75, 0.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model10,\r\n          material: getMaterial('gold'),\r\n          location: [0.75, 0.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model12,\r\n          material: getMaterial('gold'),\r\n          location: [2.25, 0.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model20,\r\n          material: getMaterial('gold'),\r\n          location: [3.75, 0.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model4,\r\n          material: getMaterial('chrome'),\r\n          location: [-3.75, 2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model6,\r\n          material: getMaterial('chrome'),\r\n          location: [-2.25, 2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model8,\r\n          material: getMaterial('chrome'),\r\n          location: [-0.75, 2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model10,\r\n          material: getMaterial('chrome'),\r\n          location: [0.75, 2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model12,\r\n          material: getMaterial('chrome'),\r\n          location: [2.25, 2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model20,\r\n          material: getMaterial('chrome'),\r\n          location: [3.75, 2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model4,\r\n          material: getMaterial('obsidian'),\r\n          location: [-3.75, -2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model6,\r\n          material: getMaterial('obsidian'),\r\n          location: [-2.25, -2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model8,\r\n          material: getMaterial('obsidian'),\r\n          location: [-0.75, -2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model10,\r\n          material: getMaterial('obsidian'),\r\n          location: [0.75, -2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model12,\r\n          material: getMaterial('obsidian'),\r\n          location: [2.25, -2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model20,\r\n          material: getMaterial('obsidian'),\r\n          location: [3.75, -2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      mat4.rotate(modelMatrix, modelMatrix, rotation.angle, rotation.axis);\r\n    }\r\n\r\n    const lights = [\r\n      {\r\n        position: [10.0, -10.0, 0.0],\r\n        ambient: [0.2, 0.2, 0.2],\r\n        diffuse: [0.5, 0.5, 0.5],\r\n        specular: [0.9, 0.9, 0.9]\r\n      },\r\n      {\r\n        position: [-10.0, 10.0, 0.0],\r\n        ambient: [0.2, 0.2, 0.2],\r\n        diffuse: [0.5, 0.5, 0.5],\r\n        specular: [0.9, 0.9, 0.9]\r\n      }\r\n    ];\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix, lights, actor.material);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      rotation.angle += deltaTime * rotation.speed;\r\n    }\r\n  }\r\n}\r\n\r\nexport default MaterialScene;\r\n","import React from 'react';\r\nimport ColoredSquareScene from '../scenes/ColoredSquareScene';\r\nimport ColoredCubeScene from '../scenes/ColoredCubeScene';\r\nimport TexturedCubeScene from '../scenes/TexturedCubeScene';\r\nimport LightedCubeScene from '../scenes/LightedCubeScene';\r\nimport MazeScene from '../scenes/MazeScene';\r\nimport BrickWallScene from '../scenes/BrickWallScene';\r\nimport MaterialScene from '../scenes/MaterialScene';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onResize = this.onResize.bind(this);\r\n    this.onKeyDown = this.onKeyDown.bind(this);\r\n    this.onKeyUp = this.onKeyUp.bind(this);\r\n    this.onClickPrevious = this.onClickPrevious.bind(this);\r\n    this.onClickNext = this.onClickNext.bind(this);\r\n    this.renderCanvas = this.renderCanvas.bind(this);\r\n    this.scenes = [\r\n      { init: false, render: new ColoredSquareScene() },\r\n      { init: false, render: new ColoredCubeScene() },\r\n      { init: false, render: new TexturedCubeScene() },\r\n      { init: false, render: new LightedCubeScene() },\r\n      { init: false, render: new MazeScene() },\r\n      { init: false, render: new BrickWallScene() },\r\n      { init: false, render: new MaterialScene() }\r\n    ];\r\n    this.sceneIndex = this.scenes.length - 1;\r\n    this.state = {\r\n      showControls: false,\r\n      keys: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const canvas = this.canvas;\r\n    const rect = canvas.getBoundingClientRect()\r\n    canvas.width = rect.width;\r\n    canvas.height = rect.height;\r\n    this.gl = canvas.getContext('webgl');\r\n    if (this.gl === null) {\r\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n    } else {\r\n      this.gl.viewport(0, 0, canvas.width, canvas.height);\r\n      this.gl.enable(this.gl.CULL_FACE);\r\n      this.gl.cullFace(this.gl.BACK);\r\n      const scene = this.scenes[this.sceneIndex];\r\n      if (!scene.init) {\r\n        scene.init = true;\r\n        scene.render.initScene(this.gl);\r\n      }\r\n      this.frame = window.requestAnimationFrame(this.renderCanvas);\r\n    }\r\n    window.addEventListener('resize', this.onResize);\r\n    window.addEventListener('keydown', this.onKeyDown);\r\n    window.addEventListener('keyup', this.onKeyUp);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.cancelAnimationFrame(this.frame);\r\n    window.removeEventListener('resize', this.onResize);\r\n    window.removeEventListener('keydown', this.onKeyDown);\r\n    window.removeEventListener('keyup', this.onKeyUp);\r\n  }\r\n\r\n  onResize() {\r\n    const canvas = this.canvas;\r\n    const rect = canvas.getBoundingClientRect()\r\n    canvas.width = rect.width;\r\n    canvas.height = rect.height;\r\n    this.gl.viewport(0, 0, canvas.width, canvas.height);\r\n  }\r\n\r\n  onKeyDown(event) {\r\n    event.preventDefault();\r\n    if (this.state.keys.indexOf(event.key) === -1) {\r\n      this.onKeyPress(event.key);\r\n      this.setState({ keys: [event.key, ...this.state.keys] });\r\n    }\r\n  }\r\n\r\n  onKeyUp(event) {\r\n    event.preventDefault();\r\n    this.setState({ keys: this.state.keys.filter((v) => v !== event.key) });\r\n  }\r\n\r\n  onKeyPress(key) {\r\n    if (key === 'Escape') {\r\n      this.setState({ showControls: !this.state.showControls });\r\n    } else if (key === 'PageUp') {\r\n      this.previousScene();\r\n    } else if (key === 'PageDown') {\r\n      this.nextScene();\r\n    }\r\n    else {\r\n      console.log(key);\r\n    }\r\n  }\r\n\r\n  onClickPrevious(event) {\r\n    event.preventDefault();\r\n    this.previousScene();\r\n  }\r\n\r\n  onClickNext(event) {\r\n    event.preventDefault();\r\n    this.nextScene();\r\n  }\r\n\r\n  previousScene() {\r\n    this.sceneIndex = (this.sceneIndex - 1) % this.scenes.length;\r\n    if (this.sceneIndex < 0) {\r\n      this.sceneIndex = this.scenes.length - 1;\r\n    }\r\n    const scene = this.scenes[this.sceneIndex];\r\n    if (!scene.init) {\r\n      scene.init = true;\r\n      scene.render.initScene(this.gl);\r\n    }\r\n  }\r\n\r\n  nextScene() {\r\n    this.sceneIndex = (this.sceneIndex + 1) % this.scenes.length;\r\n    const scene = this.scenes[this.sceneIndex];\r\n    if (!scene.init) {\r\n      scene.init = true;\r\n      scene.render.initScene(this.gl);\r\n    }\r\n  }\r\n\r\n  renderCanvas(timeStamp) {\r\n    timeStamp *= 0.001;\r\n    if (!this.timeStamp) {\r\n      this.timeStamp = timeStamp;\r\n    }\r\n    const deltaTime = timeStamp - this.timeStamp;\r\n    this.timeStamp = timeStamp;\r\n    const scene = this.scenes[this.sceneIndex];\r\n    scene.render.drawScene(this.gl, deltaTime);\r\n    this.frame = window.requestAnimationFrame(this.renderCanvas);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"screen\">\r\n        <canvas id=\"canvas\" ref={elem => this.canvas = elem}></canvas>\r\n        <div id=\"overlay\" hidden={!this.state.showControls}>\r\n          <span className=\"left\" onClick={this.onClickPrevious}>❮ PREV</span>\r\n          <span className=\"right\" onClick={this.onClickNext}>NEXT ❯</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}