{"version":3,"sources":["components/Message.js","components/Controls.js","lib/utility.js","scenes/ColoredSquareScene.js","models/Model.js","models/ColoredModel.js","scenes/ColoredCubeScene.js","models/TexturedCubeModel.js","scenes/TexturedCubeScene.js","models/LightedCubeModel.js","scenes/LightedCubeScene.js","models/MazeModel.js","scenes/MazeScene.js","models/BrickWallModel.js","scenes/BrickWallScene.js","models/MaterialModel.js","scenes/MaterialScene.js","components/SceneManager.js","components/App.js","serviceWorker.js","index.js"],"names":["Message","message","id","map","text","index","key","Controls","show","children","initShaderProgram","gl","vsSource","fsSource","vertexShader","_loadShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","alert","getProgramInfoLog","_typeToString","type","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","loadTexture","url","texture","createTexture","bindTexture","TEXTURE_2D","internalFormat","RGBA","srcFormat","srcType","UNSIGNED_BYTE","pixel","Uint8Array","texImage2D","image","Image","onload","_isPowerOf2","width","height","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","src","value","clearScreen","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","_directions","x","y","getShape","shape","s3","Math","sqrt","s6","vertices","faces","r","a","phi","b","c","_materials","emerald","ambient","diffuse","specular","shininess","jade","obsidian","pearl","ruby","turquoise","brass","bronze","chrome","copper","gold","silver","blackPlastic","cyanPlastic","greenPlastic","redPlastic","whitePlastic","yellowPlastic","blackRubber","cyanRubber","greenRubber","redRubber","whiteRubber","yellowRubber","getMaterial","name","ColoredSquareScene","this","initScene","bind","drawScene","programInfo","program","attribLocations","vertexPosition","getAttribLocation","vertexColor","uniformLocations","projectionMatrix","getUniformLocation","modelViewMatrix","buffers","_initBuffers","scene","squareRotation","deltaTime","bindBuffer","ARRAY_BUFFER","color","vertexAttribPointer","enableVertexAttribArray","position","fieldOfView","PI","aspect","canvas","clientWidth","clientHeight","mat4","useProgram","uniformMatrix4fv","drawArrays","TRIANGLE_STRIP","createBuffer","bufferData","Float32Array","STATIC_DRAW","Model","options","geometry","normal","occlusion","Promise","all","fetch","vertex","then","response","fragment","_setupShader","model","shaders","vertexShaders","Array","length","fill","fragmentShaders","pendingLoads","i","push","shaderParameters","attributeCount","ACTIVE_ATTRIBUTES","attributes","attribute","getActiveAttrib","uniformCount","ACTIVE_UNIFORMS","uniforms","uniform","getActiveUniform","getShaderParameters","forEach","location","vertexNormal","vertexTangent","vertexBitangent","vertexTextureCoord","modelMatrix","viewMatrix","normalMatrix","textureDiffuse","textureNormal","textureHeight","textureOcclusion","showDiffuseMap","showNormalMap","showAmbientOcclusionMap","perPixel","parallaxHeightScale","parallaxSteps","parallaxOcclusionMapping","cameraPosition","ambientLight","directionalLight","direction","pointLight","lights","material","requirements","positions","normals","tangents","bitangents","textureCoordinates","colors","indices","vec3","tangent","bitangent","offset","addSquare","c0","c1","c2","c3","addFace","face","addTriangle","c4","addPentagon","addFaces","option","positionBuffer","indexBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","vertexCount","normalBuffer","tangentBuffer","bitangentBuffer","textureCoordBuffer","textureCoord","colorBuffer","prop","hasOwnProperty","deleteBuffer","shaderIndex","uniform1i","uniform1f","uniform3fv","light","activeTexture","TEXTURE0","TEXTURE1","TEXTURE2","TEXTURE3","UNSIGNED_SHORT","drawElements","TRIANGLES","ColoredModel","shapeName","draw","_initModel","_drawModel","ColoredCubeScene","model6","model12","actors","scale","rotations","angle","axis","speed","camera","actor","_renderActor","_animateActor","rotation","TexturedCubeModel","_geometry","f0","f1","f2","f3","b0","b1","b2","b3","TexturedCubeScene","LightedCubeModel","LightedCubeScene","rotationSpeed","cameraDir","MazeModel","maze","update","_deleteBuffers","floorColor","ceilingColor","wallColor_Back","wallColor_Front","wallColor_Left","wallColor_Right","ofs_x","ofs_y","left","right","back","front","data","MazeScene","totalDelta","_generateMaze","size","floor","random","windiness","carve","pos","canCarve","dir","isInBounds","addDir","nxt","len","lastDir","start","cells","cell","posCells","includes","pop","generateMaze","undefined","materials","getMaterialList","BrickWallModel","BrickWallScene","MaterialModel","MaterialScene","model4","model8","model10","model20","SceneManager","resizeViewport","previousScene","nextScene","renderScene","scenes","init","render","sceneIndex","getContext","CULL_FACE","cullFace","BACK","rect","getBoundingClientRect","viewport","timeStamp","App","props","onResize","onKeyDown","onKeyUp","onClickPrevious","onClickNext","onAnimationFrame","state","showControls","keys","sceneManager","frame","window","requestAnimationFrame","addEventListener","showMessage","cancelAnimationFrame","removeEventListener","event","preventDefault","indexOf","onKeyPress","setState","filter","v","messageTimer","cancelMessage","setTimeout","clearMessage","clearTimeout","className","ref","elem","onClick","React","Component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc9e18ff.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Message = ({ message }) => {\r\n  if (!message) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div id=\"message\">\r\n      {message.map((text, index) => (<div key={index}>{text}</div>))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Message;\r\n","import React from 'react';\r\n\r\nconst Controls = ({ show, children }) => {\r\n  if (!show) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div id=\"overlay\">\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Controls;\r\n","export function degreesToRadians(degrees) {\r\n  var pi = Math.PI;\r\n  return degrees * (pi / 180);\r\n}\r\n\r\nexport function initShaderProgram(gl, vsSource, fsSource) {\r\n  const vertexShader = _loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n  const fragmentShader = _loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n  const shaderProgram = gl.createProgram();\r\n  gl.attachShader(shaderProgram, vertexShader);\r\n  gl.attachShader(shaderProgram, fragmentShader);\r\n  gl.linkProgram(shaderProgram);\r\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n    alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n    return null;\r\n  }\r\n  return shaderProgram;\r\n}\r\n\r\nexport function getShaderParameters(gl, shaderProgram) {\r\n  const attributeCount = gl.getProgramParameter(shaderProgram, gl.ACTIVE_ATTRIBUTES);\r\n  const attributes = [];\r\n  for (let i = 0; i < attributeCount; i++) {\r\n    const attribute = gl.getActiveAttrib(shaderProgram, i);\r\n    attributes.push({ name: attribute.name, type: _typeToString(gl, attribute.type) });\r\n  }\r\n  const uniformCount = gl.getProgramParameter(shaderProgram, gl.ACTIVE_UNIFORMS);\r\n  const uniforms = [];\r\n  for (let i = 0; i < uniformCount; i++) {\r\n    const uniform = gl.getActiveUniform(shaderProgram, i);\r\n    uniforms.push({ name: uniform.name, type: _typeToString(gl, uniform.type) });\r\n  }\r\n  return {\r\n    attributes,\r\n    uniforms\r\n  };\r\n}\r\n\r\nfunction _typeToString(gl, type) {\r\n  switch (type) {\r\n    case gl.FLOAT:\r\n      return \"FLOAT\";\r\n    case gl.FLOAT_VEC2:\r\n      return \"FLOAT_VEC2\";\r\n    case gl.FLOAT_VEC3:\r\n      return \"FLOAT_VEC3\";\r\n    case gl.FLOAT_VEC4:\r\n      return \"FLOAT_VEC4\";\r\n    case gl.INT:\r\n      return \"INT\";\r\n    case gl.INT_VEC2:\r\n      return \"INT_VEC2\";\r\n    case gl.INT_VEC3:\r\n      return \"INT_VEC3\";\r\n    case gl.INT_VEC4:\r\n      return \"INT_VEC4\";\r\n    case gl.BOOL:\r\n      return \"BOOL\";\r\n    case gl.BOOL_VEC2:\r\n      return \"BOOL_VEC2\";\r\n    case gl.BOOL_VEC3:\r\n      return \"BOOL_VEC3\";\r\n    case gl.BOOL_VEC4:\r\n      return \"BOOL_VEC4\";\r\n    case gl.FLOAT_MAT2:\r\n      return \"FLOAT_MAT2\";\r\n    case gl.FLOAT_MAT3:\r\n      return \"FLOAT_MAT3\";\r\n    case gl.FLOAT_MAT4:\r\n      return \"FLOAT_MAT4\";\r\n    case gl.SAMPLER_2D:\r\n      return \"SAMPLER_2D\";\r\n    case gl.SAMPLER_CUBE:\r\n      return \"SAMPLER_CUBE\";\r\n    default:\r\n      return \"UNKNOWN\";\r\n  }\r\n}\r\n\r\nfunction _loadShader(gl, type, source) {\r\n  const shader = gl.createShader(type);\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\r\n    gl.deleteShader(shader);\r\n    return null;\r\n  }\r\n  return shader;\r\n}\r\n\r\nexport function loadTexture(gl, url) {\r\n  const texture = gl.createTexture();\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n  const level = 0;\r\n  const internalFormat = gl.RGBA;\r\n  const width = 1;\r\n  const height = 1;\r\n  const border = 0;\r\n  const srcFormat = gl.RGBA;\r\n  const srcType = gl.UNSIGNED_BYTE;\r\n  const pixel = new Uint8Array([0, 0, 255, 255]);\r\n  gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, srcFormat, srcType, pixel);\r\n  const image = new Image();\r\n  image.onload = () => {\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\r\n      srcFormat, srcType, image);\r\n    if (_isPowerOf2(image.width) && _isPowerOf2(image.height)) {\r\n      gl.generateMipmap(gl.TEXTURE_2D);\r\n    } else {\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n  };\r\n  image.src = url;\r\n  return texture;\r\n}\r\n\r\nfunction _isPowerOf2(value) {\r\n  return (value & (value - 1)) === 0;\r\n}\r\n\r\nexport function clearScreen(gl) {\r\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n  gl.clearDepth(1.0);\r\n  gl.enable(gl.DEPTH_TEST);\r\n  gl.depthFunc(gl.LEQUAL);\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n}\r\n\r\nconst _directions = [\r\n  { x: -1, y: 0 },\r\n  { x: 0, y: -1 },\r\n  { x: 1, y: 0 },\r\n  { x: 0, y: 1 }\r\n];\r\n\r\nexport function generateMaze(width, height, windiness = 0.8) {\r\n  const carve = (pos) => {\r\n    data[pos.y][pos.x] = 0;\r\n  }\r\n\r\n  const canCarve = (pos, dir) => {\r\n    if (!isInBounds(addDir(pos, dir, 3))) {\r\n      return false;\r\n    }\r\n    const nxt = addDir(pos, dir, 2);\r\n    return data[nxt.y][nxt.x] === 1;\r\n  }\r\n\r\n  const isInBounds = (pos) => {\r\n    if (pos.x < 0 || pos.y < 0 || pos.x >= width || pos.y >= height) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const addDir = (pos, dir, len) => {\r\n    return {\r\n      x: pos.x + dir.x * len,\r\n      y: pos.y + dir.y * len\r\n    }\r\n  }\r\n\r\n  const data = [];\r\n  for (let y = 0; y < height; y++) {\r\n    data.push(new Array(width).fill(1));\r\n  }\r\n\r\n  const start = { x: 1, y: 1 };\r\n  const cells = [];\r\n  let lastDir;\r\n  carve(start);\r\n  cells.push(start);\r\n  while (cells.length > 0) {\r\n    const cell = cells[cells.length - 1];\r\n    const posCells = [];\r\n    for (let i = 0; i < _directions.length; i++) {\r\n      const dir = _directions[i];\r\n      if (canCarve(cell, dir)) {\r\n        posCells.push(dir);\r\n      }\r\n    }\r\n    if (posCells.length > 0) {\r\n      let dir;\r\n      if (posCells.includes(lastDir) && Math.random() > windiness) {\r\n        dir = lastDir;\r\n      } else {\r\n        dir = posCells[Math.floor(Math.random() * posCells.length)];\r\n      }\r\n      carve(addDir(cell, dir, 1));\r\n      carve(addDir(cell, dir, 2));\r\n      cells.push(addDir(cell, dir, 2));\r\n      lastDir = dir;\r\n    } else {\r\n      cells.pop();\r\n      lastDir = null;\r\n    }\r\n  }\r\n  return {\r\n    width,\r\n    height,\r\n    data\r\n  };\r\n}\r\n\r\nexport function getShape(shape) {\r\n  if (shape === 'tetrahedron') {\r\n    const s3 = Math.sqrt(3);\r\n    const s6 = Math.sqrt(6);\r\n\r\n    const vertices = [\r\n      [s3 / 3, -s6 / 3 * 0.333 + s6 * 0.025, 0],         // right\r\n      [-s3 / 6, -s6 / 3 * 0.333 + s6 * 0.025, 1 / 2],    // left front\r\n      [-s3 / 6, -s6 / 3 * 0.333 + s6 * 0.025, -1 / 2],   // left back\r\n      [0, s6 / 3 * 0.666 + s6 * 0.025, 0]                // top\r\n    ];\r\n\r\n    const faces = [\r\n      [0, 1, 2],\r\n      [3, 1, 0],\r\n      [3, 0, 2],\r\n      [3, 2, 1]\r\n    ];\r\n\r\n    return { vertices, faces };\r\n  }\r\n\r\n  if (shape === 'cube') {\r\n    const r = .3;\r\n\r\n    const vertices = [\r\n      [-r, -r, -r],\r\n      [-r, -r, r],\r\n      [r, -r, r],\r\n      [r, -r, -r],\r\n      [-r, r, -r],\r\n      [-r, r, r],\r\n      [r, r, r],\r\n      [r, r, -r]\r\n    ];\r\n\r\n    const faces = [\r\n      [0, 3, 2, 1],   // bottom\r\n      [4, 5, 6, 7],   // top\r\n      [0, 1, 5, 4],   // left\r\n      [2, 3, 7, 6],   // right\r\n      [1, 2, 6, 5],   // front\r\n      [3, 0, 4, 7]    // back\r\n    ];\r\n\r\n    return { vertices, faces };\r\n  }\r\n\r\n  if (shape === 'octahedron') {\r\n    const a = 1 / (2 * Math.sqrt(2));\r\n    const b = 1 / 2;\r\n\r\n    const vertices = [\r\n      [-a, 0, a],    // front left\r\n      [a, 0, a],     // front right\r\n      [a, 0, -a],    // back right\r\n      [-a, 0, -a],   // back left\r\n      [0, b, 0],     // top\r\n      [0, -b, 0]     // bottom\r\n    ];\r\n\r\n    const faces = [\r\n      [3, 0, 4],\r\n      [2, 3, 4],\r\n      [1, 2, 4],\r\n      [0, 1, 4],\r\n      [3, 2, 5],\r\n      [0, 3, 5],\r\n      [2, 1, 5],\r\n      [1, 0, 5]\r\n    ];\r\n\r\n    return { vertices, faces };\r\n  }\r\n\r\n  if (shape === 'pentagonaltrapezohedron') {\r\n    const vertices = [\r\n      [0.210292440, 0.15278640, 0.340260320],\r\n      [-0.08032456, 0.24721360, 0.340260320],\r\n      [-0.25993576, 0.00000000, 0.340260320],\r\n      [0.210292440, -0.6472136, 0.340260320],\r\n      [0.420584800, 0.00000000, -0.08032456],\r\n      [0.340260320, 0.24721360, 0.080324560],\r\n      [-0.21029244, 0.64721360, -0.34026032],\r\n      [-0.42058480, 0.00000000, 0.080324560],\r\n      [-0.34026032, -0.2472136, -0.08032456],\r\n      [0.080324560, -0.2472136, -0.34026032],\r\n      [0.259935760, 0.00000000, -0.34026032],\r\n      [-0.21029244, -0.1527864, -0.34026032]\r\n    ];\r\n\r\n    const faces = [\r\n      [3, 0, 1, 2],\r\n      [0, 3, 4, 5],\r\n      [1, 0, 5, 6],\r\n      [2, 1, 6, 7],\r\n      [3, 2, 7, 8],\r\n      [4, 3, 9, 10],\r\n      [5, 4, 10, 6],\r\n      [7, 6, 11, 8],\r\n      [3, 8, 11, 9],\r\n      [10, 9, 11, 6]\r\n    ];\r\n\r\n    return { vertices, faces };\r\n  }\r\n\r\n  if (shape === 'dodecahedron') {\r\n    const phi = (1 + Math.sqrt(5)) / 2;\r\n    const a = 0.5;\r\n    const b = 0.5 * 1 / phi;\r\n    const c = 0.5 * (2 - phi);\r\n\r\n    const vertices = [\r\n      [c, 0, a],\r\n      [-c, 0, a],\r\n      [-b, b, b],\r\n      [0, a, c],\r\n      [b, b, b],\r\n      [b, -b, b],\r\n      [0, -a, c],\r\n      [-b, -b, b],\r\n      [c, 0, -a],\r\n      [-c, 0, -a],\r\n      [-b, -b, -b],\r\n      [0, -a, -c],\r\n      [b, -b, -b],\r\n      [b, b, -b],\r\n      [0, a, -c],\r\n      [-b, b, -b],\r\n      [a, c, 0],\r\n      [-a, c, 0],\r\n      [-a, -c, 0],\r\n      [a, -c, 0]\r\n    ];\r\n\r\n    const faces = [\r\n      [4, 3, 2, 1, 0],\r\n      [7, 6, 5, 0, 1],\r\n      [12, 11, 10, 9, 8],\r\n      [15, 14, 13, 8, 9],\r\n      [14, 3, 4, 16, 13],\r\n      [3, 14, 15, 17, 2],\r\n      [11, 6, 7, 18, 10],\r\n      [6, 11, 12, 19, 5],\r\n      [4, 0, 5, 19, 16],\r\n      [12, 8, 13, 16, 19],\r\n      [15, 9, 10, 18, 17],\r\n      [7, 1, 2, 17, 18]\r\n    ];\r\n\r\n    return { vertices, faces };\r\n  }\r\n\r\n  if (shape === 'icosahedron') {\r\n    const phi = (1 + Math.sqrt(5)) / 2;\r\n    const a = 1 / 2;\r\n    const b = 1 / (2 * phi);\r\n\r\n    const vertices = [\r\n      [0, b, -a],\r\n      [b, a, 0],\r\n      [-b, a, 0],\r\n      [0, b, a],\r\n      [0, -b, a],\r\n      [-a, 0, b],\r\n      [a, 0, b],\r\n      [0, -b, -a],\r\n      [a, 0, -b],\r\n      [-a, 0, -b],\r\n      [b, -a, 0],\r\n      [-b, -a, 0]\r\n    ];\r\n\r\n    const faces = [\r\n      [1, 0, 2],\r\n      [2, 3, 1],\r\n      [4, 3, 5],\r\n      [6, 3, 4],\r\n      [7, 0, 8],\r\n      [9, 0, 7],\r\n      [10, 4, 11],\r\n      [11, 7, 10],\r\n      [5, 2, 9],\r\n      [9, 11, 5],\r\n      [8, 1, 6],\r\n      [6, 10, 8],\r\n      [5, 3, 2],\r\n      [1, 3, 6],\r\n      [2, 0, 9],\r\n      [8, 0, 1],\r\n      [9, 7, 11],\r\n      [10, 7, 8],\r\n      [11, 4, 5],\r\n      [6, 4, 10]\r\n    ];\r\n\r\n    return { vertices, faces };\r\n  }\r\n}\r\n\r\nconst _materials = {\r\n  emerald: {\r\n    ambient: [0.0215, 0.1745, 0.0215], diffuse: [0.07568, 0.61424, 0.07568], specular: [0.633, 0.727811, 0.633], shininess: 0.6\r\n  },\r\n  jade: {\r\n    ambient: [0.135, 0.2225, 0.1575], diffuse: [0.54, 0.89, 0.63], specular: [0.316228, 0.316228, 0.316228], shininess: 0.1\r\n  },\r\n  obsidian: {\r\n    ambient: [0.05375, 0.05, 0.06625], diffuse: [0.18275, 0.17, 0.22525], specular: [0.332741, 0.328634, 0.346435], shininess: 0.3\r\n  },\r\n  pearl: {\r\n    ambient: [0.25, 0.20725, 0.20725], diffuse: [1, 0.829, 0.829], specular: [0.296648, 0.296648, 0.296648], shininess: 0.088\r\n  },\r\n  ruby: {\r\n    ambient: [0.1745, 0.01175, 0.01175], diffuse: [0.61424, 0.04136, 0.04136], specular: [0.727811, 0.626959, 0.626959], shininess: 0.6\r\n  },\r\n  turquoise: {\r\n    ambient: [0.1, 0.18725, 0.1745], diffuse: [0.396, 0.74151, 0.69102], specular: [0.297254, 0.30829, 0.306678], shininess: 0.1\r\n  },\r\n  brass: {\r\n    ambient: [0.329412, 0.223529, 0.027451], diffuse: [0.780392, 0.568627, 0.113725], specular: [0.992157, 0.941176, 0.807843], shininess: 0.21794872\r\n  },\r\n  bronze: {\r\n    ambient: [0.2125, 0.1275, 0.054], diffuse: [0.714, 0.4284, 0.18144], specular: [0.393548, 0.271906, 0.166721], shininess: 0.2\r\n  },\r\n  chrome: {\r\n    ambient: [0.25, 0.25, 0.25], diffuse: [0.4, 0.4, 0.4], specular: [0.774597, 0.774597, 0.774597], shininess: 0.6\r\n  },\r\n  copper: {\r\n    ambient: [0.19125, 0.0735, 0.0225], diffuse: [0.7038, 0.27048, 0.0828], specular: [0.256777, 0.137622, 0.086014], shininess: 0.1\r\n  },\r\n  gold: {\r\n    ambient: [0.24725, 0.1995, 0.0745], diffuse: [0.75164, 0.60648, 0.22648], specular: [0.628281, 0.555802, 0.366065], shininess: 0.4\r\n  },\r\n  silver: {\r\n    ambient: [0.19225, 0.19225, 0.19225], diffuse: [0.50754, 0.50754, 0.50754], specular: [0.508273, 0.508273, 0.508273], shininess: 0.4\r\n  },\r\n  blackPlastic: {\r\n    ambient: [0.0, 0.0, 0.0], diffuse: [0.01, 0.01, 0.01], specular: [0.50, 0.50, 0.50], shininess: 0.25\r\n  },\r\n  cyanPlastic: {\r\n    ambient: [0.0, 0.1, 0.06], diffuse: [0.0, 0.50980392, 0.50980392], specular: [0.50196078, 0.50196078, 0.50196078], shininess: 0.25\r\n  },\r\n  greenPlastic: {\r\n    ambient: [0.0, 0.0, 0.0], diffuse: [0.1, 0.35, 0.1], specular: [0.45, 0.55, 0.45], shininess: 0.25\r\n  },\r\n  redPlastic: {\r\n    ambient: [0.0, 0.0, 0.0], diffuse: [0.5, 0.0, 0.0], specular: [0.7, 0.6, 0.6], shininess: 0.25\r\n  },\r\n  whitePlastic: {\r\n    ambient: [0.0, 0.0, 0.0], diffuse: [0.55, 0.55, 0.55], specular: [0.70, 0.70, 0.70], shininess: 0.25\r\n  },\r\n  yellowPlastic: {\r\n    ambient: [0.0, 0.0, 0.0], diffuse: [0.5, 0.5, 0.0], specular: [0.60, 0.60, 0.50], shininess: 0.25\r\n  },\r\n  blackRubber: {\r\n    ambient: [0.02, 0.02, 0.02], diffuse: [0.01, 0.01, 0.01], specular: [0.4, 0.4, 0.4], shininess: 0.078125\r\n  },\r\n  cyanRubber: {\r\n    ambient: [0.0, 0.05, 0.05], diffuse: [0.4, 0.5, 0.5], specular: [0.04, 0.7, 0.7], shininess: 0.078125\r\n  },\r\n  greenRubber: {\r\n    ambient: [0.0, 0.05, 0.0], diffuse: [0.4, 0.5, 0.4], specular: [0.04, 0.7, 0.04], shininess: 0.078125\r\n  },\r\n  redRubber: {\r\n    ambient: [0.05, 0.0, 0.0], diffuse: [0.5, 0.4, 0.4], specular: [0.7, 0.04, 0.04], shininess: 0.078125\r\n  },\r\n  whiteRubber: {\r\n    ambient: [0.05, 0.05, 0.05], diffuse: [0.5, 0.5, 0.5], specular: [0.7, 0.7, 0.7], shininess: 0.078125\r\n  },\r\n  yellowRubber: {\r\n    ambient: [0.05, 0.05, 0.0], diffuse: [0.5, 0.5, 0.4], specular: [0.7, 0.7, 0.04], shininess: 0.078125\r\n  }\r\n};\r\n\r\nexport function getMaterialList() {\r\n  const materials = [];\r\n  for (const prop in _materials) {\r\n    if (_materials.hasOwnProperty(prop)) {\r\n      materials.push(prop);\r\n    }\r\n  }\r\n  return materials;\r\n}\r\n\r\nexport function getMaterial(name) {\r\n  return _materials[name];\r\n}\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { initShaderProgram, clearScreen } from '../lib/utility'\r\n\r\nclass ColoredSquareScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const vsSource = `\r\n    attribute vec4 aVertexPosition;\r\n    attribute vec4 aVertexColor;\r\n\r\n    uniform mat4 uModelViewMatrix;\r\n    uniform mat4 uProjectionMatrix;\r\n\r\n    varying lowp vec4 vColor;\r\n\r\n    void main(void) {\r\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n      vColor = aVertexColor;\r\n    }\r\n  `;\r\n\r\n    const fsSource = `\r\n    varying lowp vec4 vColor;\r\n\r\n    void main(void) {\r\n      gl_FragColor = vColor;\r\n    }\r\n  `;\r\n\r\n    const shaderProgram = initShaderProgram(gl, vsSource, fsSource);\r\n\r\n    const programInfo = {\r\n      program: shaderProgram,\r\n      attribLocations: {\r\n        vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\r\n        vertexColor: gl.getAttribLocation(shaderProgram, 'aVertexColor')\r\n      },\r\n      uniformLocations: {\r\n        projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\r\n        modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix')\r\n      }\r\n    };\r\n\r\n    const buffers = this._initBuffers(gl);\r\n\r\n    this.scene = { programInfo, buffers, squareRotation: 0.0 };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n    const { programInfo, buffers } = scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    {\r\n      const numComponents = 4;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\r\n      gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexColor,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n      gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.vertexColor);\r\n    }\r\n\r\n    {\r\n      const numComponents = 2;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexPosition,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n      gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.vertexPosition);\r\n    }\r\n\r\n    {\r\n      const fieldOfView = 45 * Math.PI / 180;\r\n      const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n      const zNear = 0.1;\r\n      const zFar = 100.0;\r\n      const projectionMatrix = mat4.create();\r\n      mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n      const modelViewMatrix = mat4.create();\r\n      mat4.translate(modelViewMatrix, modelViewMatrix, [-0.0, 0.0, -6.0]);\r\n      mat4.rotate(modelViewMatrix, modelViewMatrix, scene.squareRotation, [0, 0, 1]);\r\n      gl.useProgram(programInfo.program);\r\n      gl.uniformMatrix4fv(\r\n        programInfo.uniformLocations.projectionMatrix,\r\n        false,\r\n        projectionMatrix);\r\n      gl.uniformMatrix4fv(\r\n        programInfo.uniformLocations.modelViewMatrix,\r\n        false,\r\n        modelViewMatrix);\r\n    }\r\n\r\n    {\r\n      const offset = 0;\r\n      const vertexCount = 4;\r\n      gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount);\r\n    }\r\n\r\n    scene.squareRotation += deltaTime;\r\n  }\r\n\r\n  _initBuffers(gl) {\r\n    const positions = [\r\n      1.0, 1.0,\r\n      -1.0, 1.0,\r\n      1.0, -1.0,\r\n      -1.0, -1.0,\r\n    ];\r\n    const position = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, position);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const colors = [\r\n      1.0, 1.0, 1.0, 1.0,\r\n      1.0, 0.0, 0.0, 1.0,\r\n      0.0, 1.0, 0.0, 1.0,\r\n      0.0, 0.0, 1.0, 1.0\r\n    ];\r\n    const color = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, color);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\r\n\r\n    return { position, color };\r\n  }\r\n}\r\n\r\nexport default ColoredSquareScene;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport * as vec3 from 'gl-matrix/vec3';\r\nimport { loadTexture, initShaderProgram, getShaderParameters } from '../lib/utility'\r\n\r\nclass Model {\r\n  _initModel(options) {\r\n    const { gl, geometry } = options;\r\n    let texture\r\n    if (options.texture) {\r\n      texture = {};\r\n      if (options.texture.diffuse) {\r\n        texture.diffuse = loadTexture(gl, options.texture.diffuse);\r\n      }\r\n      if (options.texture.normal) {\r\n        texture.normal = loadTexture(gl, options.texture.normal);\r\n      }\r\n      if (options.texture.height) {\r\n        texture.height = loadTexture(gl, options.texture.height);\r\n      }\r\n      if (options.texture.occlusion) {\r\n        texture.occlusion = loadTexture(gl, options.texture.occlusion);\r\n      }\r\n    }\r\n    if (options.shader) {\r\n      let vertexShader;\r\n      let fragmentShader;\r\n      Promise.all([\r\n        fetch(options.shader.vertex).then((response) => response.text()).then((text) => vertexShader = text),\r\n        fetch(options.shader.fragment).then((response) => response.text()).then((text) => fragmentShader = text)\r\n      ]).then(() => {\r\n        const shader = this._setupShader(gl, vertexShader, fragmentShader);\r\n        const buffers = this._initBuffers(gl, [shader], geometry);\r\n        this.model = {\r\n          shaders: [shader],\r\n          buffers,\r\n          texture\r\n        };\r\n      });\r\n    }\r\n    else {\r\n      const vertexShaders = new Array(options.shaders.length).fill(null);\r\n      const fragmentShaders = new Array(options.shaders.length).fill(null);\r\n      const pendingLoads = [];\r\n      for (let i = 0; i < options.shaders.length; i++) {\r\n        pendingLoads.push(fetch(options.shaders[i].vertex).then((response) => response.text()).then((text) => vertexShaders[i] = text));\r\n        pendingLoads.push(fetch(options.shaders[i].fragment).then((response) => response.text()).then((text) => fragmentShaders[i] = text));\r\n      }\r\n\r\n      Promise.all(pendingLoads)\r\n        .then(() => {\r\n          const shaders = [];\r\n          for (let i = 0; i < options.shaders.length; i++) {\r\n            shaders.push(this._setupShader(gl, vertexShaders[i], fragmentShaders[i]));\r\n          }\r\n          const buffers = this._initBuffers(gl, shaders, geometry);\r\n          this.model = {\r\n            shaders,\r\n            buffers,\r\n            texture\r\n          };\r\n        });\r\n    }\r\n  }\r\n\r\n  _setupShader(gl, vertexShader, fragmentShader) {\r\n    const shaderProgram = initShaderProgram(gl, vertexShader, fragmentShader);\r\n    const shaderParameters = getShaderParameters(gl, shaderProgram);\r\n    const shader = {\r\n      program: shaderProgram,\r\n      attribLocations: {},\r\n      uniformLocations: {}\r\n    };\r\n    shaderParameters.attributes.forEach((attribute) => {\r\n      const location = gl.getAttribLocation(shaderProgram, attribute.name)\r\n      switch (attribute.name) {\r\n        case 'aVertexPosition':\r\n          shader.attribLocations.vertexPosition = location;\r\n          break;\r\n        case 'aVertexNormal':\r\n          shader.attribLocations.vertexNormal = location;\r\n          break;\r\n        case 'aVertexTangent':\r\n          shader.attribLocations.vertexTangent = location;\r\n          break;\r\n        case 'aVertexBitangent':\r\n          shader.attribLocations.vertexBitangent = location;\r\n          break;\r\n        case 'aVertexColor':\r\n          shader.attribLocations.vertexColor = location;\r\n          break;\r\n        case 'aTextureCoord':\r\n          shader.attribLocations.vertexTextureCoord = location;\r\n          break;\r\n        default:\r\n          alert('unknown attribute of ' + attribute.name);\r\n      }\r\n    });\r\n    shaderParameters.uniforms.forEach((uniform) => {\r\n      const location = gl.getUniformLocation(shaderProgram, uniform.name)\r\n      switch (uniform.name) {\r\n        case 'uModelMatrix':\r\n          shader.uniformLocations.modelMatrix = location;\r\n          break;\r\n        case 'uViewMatrix':\r\n          shader.uniformLocations.viewMatrix = location;\r\n          break;\r\n        case 'uNormalMatrix':\r\n          shader.uniformLocations.normalMatrix = location;\r\n          break;\r\n        case 'uProjectionMatrix':\r\n          shader.uniformLocations.projectionMatrix = location;\r\n          break;\r\n        case 'uSamplerDiffuse':\r\n          shader.uniformLocations.textureDiffuse = location;\r\n          break;\r\n        case 'uSamplerNormal':\r\n          shader.uniformLocations.textureNormal = location;\r\n          break;\r\n        case 'uSamplerHeight':\r\n          shader.uniformLocations.textureHeight = location;\r\n          break;\r\n        case 'uSamplerOcclusion':\r\n          shader.uniformLocations.textureOcclusion = location;\r\n          break;\r\n        case 'uShowDiffuseMap':\r\n          shader.uniformLocations.showDiffuseMap = location;\r\n          break;\r\n        case 'uShowNormalMap':\r\n          shader.uniformLocations.showNormalMap = location;\r\n          break;\r\n        case 'uShowAmbientOcclusionMap':\r\n          shader.uniformLocations.showAmbientOcclusionMap = location;\r\n          break;\r\n        case 'uPerPixel':\r\n          shader.uniformLocations.perPixel = location;\r\n          break;\r\n        case 'uParallaxHeightScale':\r\n          shader.uniformLocations.parallaxHeightScale = location;\r\n          break;\r\n        case 'uParallaxSteps':\r\n          shader.uniformLocations.parallaxSteps = location;\r\n          break;\r\n        case 'uParallaxOcclusionMapping':\r\n          shader.uniformLocations.parallaxOcclusionMapping = location;\r\n          break;\r\n        case 'uCameraPos':\r\n          shader.uniformLocations.cameraPosition = location;\r\n          break;\r\n        case 'uAmbientLight':\r\n          shader.uniformLocations.ambientLight = location;\r\n          break;\r\n        case 'uDirectionalLight.color':\r\n          if (!shader.uniformLocations.directionalLight) {\r\n            shader.uniformLocations.directionalLight = {};\r\n          }\r\n          shader.uniformLocations.directionalLight.color = location;\r\n          break;\r\n        case 'uDirectionalLight.direction':\r\n          if (!shader.uniformLocations.directionalLight) {\r\n            shader.uniformLocations.directionalLight = {};\r\n          }\r\n          shader.uniformLocations.directionalLight.direction = location;\r\n          break;\r\n        case 'uPointLight.color':\r\n          if (!shader.uniformLocations.pointLight) {\r\n            shader.uniformLocations.pointLight = {};\r\n          }\r\n          shader.uniformLocations.pointLight.color = location;\r\n          break;\r\n        case 'uPointLight.position':\r\n          if (!shader.uniformLocations.pointLight) {\r\n            shader.uniformLocations.pointLight = {};\r\n          }\r\n          shader.uniformLocations.pointLight.position = location;\r\n          break;\r\n        case 'uLight[0].position':\r\n          if (!shader.uniformLocations.lights) {\r\n            shader.uniformLocations.lights = [];\r\n          }\r\n          while (shader.uniformLocations.lights.length < 1) {\r\n            shader.uniformLocations.lights.push({});\r\n          }\r\n          shader.uniformLocations.lights[0].position = location;\r\n          break;\r\n        case 'uLight[0].ambient':\r\n          if (!shader.uniformLocations.lights) {\r\n            shader.uniformLocations.lights = [];\r\n          }\r\n          while (shader.uniformLocations.lights.length < 1) {\r\n            shader.uniformLocations.lights.push({});\r\n          }\r\n          shader.uniformLocations.lights[0].ambient = location;\r\n          break;\r\n        case 'uLight[0].diffuse':\r\n          if (!shader.uniformLocations.lights) {\r\n            shader.uniformLocations.lights = [];\r\n          }\r\n          while (shader.uniformLocations.lights.length < 1) {\r\n            shader.uniformLocations.lights.push({});\r\n          }\r\n          shader.uniformLocations.lights[0].diffuse = location;\r\n          break;\r\n        case 'uLight[0].specular':\r\n          if (!shader.uniformLocations.lights) {\r\n            shader.uniformLocations.lights = [];\r\n          }\r\n          while (shader.uniformLocations.lights.length < 1) {\r\n            shader.uniformLocations.lights.push({});\r\n          }\r\n          shader.uniformLocations.lights[0].specular = location;\r\n          break;\r\n        case 'uLight[1].position':\r\n          if (!shader.uniformLocations.lights) {\r\n            shader.uniformLocations.lights = [];\r\n          }\r\n          while (shader.uniformLocations.lights.length < 2) {\r\n            shader.uniformLocations.lights.push({});\r\n          }\r\n          shader.uniformLocations.lights[1].position = location;\r\n          break;\r\n        case 'uLight[1].ambient':\r\n          if (!shader.uniformLocations.lights) {\r\n            shader.uniformLocations.lights = [];\r\n          }\r\n          while (shader.uniformLocations.lights.length < 2) {\r\n            shader.uniformLocations.lights.push({});\r\n          }\r\n          shader.uniformLocations.lights[1].ambient = location;\r\n          break;\r\n        case 'uLight[1].diffuse':\r\n          if (!shader.uniformLocations.lights) {\r\n            shader.uniformLocations.lights = [];\r\n          }\r\n          while (shader.uniformLocations.lights.length < 2) {\r\n            shader.uniformLocations.lights.push({});\r\n          }\r\n          shader.uniformLocations.lights[1].diffuse = location;\r\n          break;\r\n        case 'uLight[1].specular':\r\n          if (!shader.uniformLocations.lights) {\r\n            shader.uniformLocations.lights = [];\r\n          }\r\n          while (shader.uniformLocations.lights.length < 2) {\r\n            shader.uniformLocations.lights.push({});\r\n          }\r\n          shader.uniformLocations.lights[1].specular = location;\r\n          break;\r\n        case 'uMaterial.ambient':\r\n          if (!shader.uniformLocations.material) {\r\n            shader.uniformLocations.material = {};\r\n          }\r\n          shader.uniformLocations.material.ambient = location;\r\n          break;\r\n        case 'uMaterial.diffuse':\r\n          if (!shader.uniformLocations.material) {\r\n            shader.uniformLocations.material = {};\r\n          }\r\n          shader.uniformLocations.material.diffuse = location;\r\n          break;\r\n        case 'uMaterial.specular':\r\n          if (!shader.uniformLocations.material) {\r\n            shader.uniformLocations.material = {};\r\n          }\r\n          shader.uniformLocations.material.specular = location;\r\n          break;\r\n        case 'uMaterial.shininess':\r\n          if (!shader.uniformLocations.material) {\r\n            shader.uniformLocations.material = {};\r\n          }\r\n          shader.uniformLocations.material.shininess = location;\r\n          break;\r\n        default:\r\n          alert('unknown uniform of ' + uniform.name);\r\n      }\r\n    });\r\n\r\n    return shader;\r\n  }\r\n\r\n  _initBuffers(gl, shaders, geometry) {\r\n    const requirements = {};\r\n\r\n    for (let i = 0; i < shaders.length; i++) {\r\n      const shader = shaders[i];\r\n\r\n      if (shader.attribLocations.vertexNormal) {\r\n        requirements.vertexNormal = true;\r\n      }\r\n\r\n      if (shader.attribLocations.vertexTangent) {\r\n        requirements.vertexTangent = true;\r\n      }\r\n\r\n      if (shader.attribLocations.vertexBitangent) {\r\n        requirements.vertexBitangent = true;\r\n      }\r\n\r\n      if (shader.attribLocations.vertexTextureCoord) {\r\n        requirements.vertexTextureCoord = true;\r\n      }\r\n\r\n      if (shader.attribLocations.vertexColor) {\r\n        requirements.vertexColor = true;\r\n      }\r\n    }\r\n\r\n    const positions = [];\r\n    const normals = [];\r\n    const tangents = [];\r\n    const bitangents = [];\r\n    const textureCoordinates = [];\r\n    const colors = [];\r\n    const indices = [];\r\n    const normal = vec3.create();\r\n    const tangent = vec3.create();\r\n    const bitangent = vec3.create();\r\n    let offset = 0;\r\n\r\n    const addSquare = (c0, c1, c2, c3, options) => {\r\n      positions.push(...c0, ...c1, ...c2, ...c3);\r\n      indices.push(offset + 0, offset + 1, offset + 2, offset + 2, offset + 3, offset + 0);\r\n      offset += 4;\r\n\r\n      if (requirements.vertexNormal || requirements.vertexTangent || requirements.vertexBitangent) {\r\n        vec3.subtract(tangent, c1, c0);\r\n        vec3.subtract(bitangent, c3, c0);\r\n\r\n        if (requirements.vertexNormal) {\r\n          vec3.cross(normal, tangent, bitangent);\r\n          vec3.normalize(normal, normal);\r\n          normals.push(...normal, ...normal, ...normal, ...normal);\r\n        }\r\n\r\n        if (requirements.vertexTangent) {\r\n          vec3.normalize(tangent, tangent);\r\n          tangents.push(...tangent, ...tangent, ...tangent, ...tangent);\r\n        }\r\n\r\n        if (requirements.vertexBitangent) {\r\n          vec3.normalize(bitangent, bitangent);\r\n          bitangents.push(...bitangent, ...bitangent, ...bitangent, ...bitangent);\r\n        }\r\n      }\r\n\r\n      if (requirements.vertexTextureCoord) {\r\n        textureCoordinates.push(0, 0, 1, 0, 1, 1, 0, 1);\r\n      }\r\n\r\n      if (requirements.vertexColor) {\r\n        colors.push(...options.color, ...options.color, ...options.color, ...options.color);\r\n      }\r\n    }\r\n\r\n    const addTriangle = (c0, c1, c2, options) => {\r\n      positions.push(...c0, ...c1, ...c2);\r\n      indices.push(offset + 0, offset + 1, offset + 2);\r\n      offset += 3;\r\n\r\n      if (requirements.vertexNormal || requirements.vertexTangent || requirements.vertexBitangent) {\r\n        vec3.subtract(tangent, c1, c0);\r\n        vec3.subtract(bitangent, c2, c0);\r\n\r\n        if (requirements.vertexNormal) {\r\n          vec3.cross(normal, tangent, bitangent);\r\n          vec3.normalize(normal, normal);\r\n          normals.push(...normal, ...normal, ...normal);\r\n        }\r\n\r\n        if (requirements.vertexTangent) {\r\n          vec3.normalize(tangent, tangent);\r\n          tangents.push(...tangent, ...tangent, ...tangent);\r\n        }\r\n\r\n        if (requirements.vertexBitangent) {\r\n          vec3.normalize(bitangent, bitangent);\r\n          bitangents.push(...bitangent, ...bitangent, ...bitangent);\r\n        }\r\n      }\r\n\r\n      if (requirements.vertexColor) {\r\n        colors.push(...options.color, ...options.color, ...options.color);\r\n      }\r\n    }\r\n\r\n    const addPentagon = (c0, c1, c2, c3, c4, options) => {\r\n      positions.push(...c0, ...c1, ...c2, ...c3, ...c4);\r\n      indices.push(offset + 0, offset + 3, offset + 4, offset + 0, offset + 1, offset + 3, offset + 1, offset + 2, offset + 3);\r\n      offset += 5;\r\n\r\n      if (requirements.vertexNormal || requirements.vertexTangent || requirements.vertexBitangent) {\r\n        vec3.subtract(tangent, c1, c0);\r\n        vec3.subtract(bitangent, c4, c0);\r\n\r\n        if (requirements.vertexNormal) {\r\n          vec3.cross(normal, tangent, bitangent);\r\n          vec3.normalize(normal, normal);\r\n          normals.push(...normal, ...normal, ...normal, ...normal, ...normal);\r\n        }\r\n\r\n        if (requirements.vertexTangent) {\r\n          vec3.normalize(tangent, tangent);\r\n          tangents.push(...tangent, ...tangent, ...tangent, ...tangent, ...tangent);\r\n        }\r\n\r\n        if (requirements.vertexBitangent) {\r\n          vec3.normalize(bitangent, bitangent);\r\n          bitangents.push(...bitangent, ...bitangent, ...bitangent, ...bitangent, ...bitangent);\r\n        }\r\n      }\r\n\r\n      if (requirements.vertexColor) {\r\n        colors.push(...options.color, ...options.color, ...options.color, ...options.color, ...options.color);\r\n      }\r\n    }\r\n\r\n    const addFace = (vertices, face, options) => {\r\n      switch (face.length) {\r\n        case 3:\r\n          addTriangle(vertices[face[0]], vertices[face[1]], vertices[face[2]], options);\r\n          break;\r\n        case 4:\r\n          addSquare(vertices[face[0]], vertices[face[1]], vertices[face[2]], vertices[face[3]], options);\r\n          break;\r\n        case 5:\r\n          addPentagon(vertices[face[0]], vertices[face[1]], vertices[face[2]], vertices[face[3]], vertices[face[4]], options);\r\n          break;\r\n        default:\r\n          alert('faces with ' + face.length + ' vertices are not supported');\r\n      }\r\n    }\r\n\r\n    const addFaces = (vertices, faces, options) => {\r\n      for (let i = 0; i < faces.length; i++) {\r\n        let option = {}\r\n        if (options) {\r\n          if (options.colors) {\r\n            option.color = options.colors[i % options.colors.length];\r\n          }\r\n        }\r\n        addFace(vertices, faces[i], option);\r\n      }\r\n    }\r\n\r\n    geometry({ addSquare, addFaces });\r\n\r\n    const positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    const indexBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\r\n\r\n    const buffers = { position: positionBuffer, indices: indexBuffer, vertexCount: indices.length }\r\n\r\n    if (requirements.vertexNormal) {\r\n      const normalBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normals), gl.STATIC_DRAW);\r\n      buffers.normal = normalBuffer;\r\n    }\r\n\r\n    if (requirements.vertexTangent) {\r\n      const tangentBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, tangentBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(tangents), gl.STATIC_DRAW);\r\n      buffers.tangent = tangentBuffer;\r\n    }\r\n\r\n    if (requirements.vertexBitangent) {\r\n      const bitangentBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, bitangentBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(bitangents), gl.STATIC_DRAW);\r\n      buffers.bitangent = bitangentBuffer;\r\n    }\r\n\r\n    if (requirements.vertexTextureCoord) {\r\n      const textureCoordBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, textureCoordBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW);\r\n      buffers.textureCoord = textureCoordBuffer;\r\n    }\r\n\r\n    if (requirements.vertexColor) {\r\n      const colorBuffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\r\n      buffers.color = colorBuffer;\r\n    }\r\n\r\n    return buffers;\r\n  }\r\n\r\n  _deleteBuffers({ gl, buffers }) {\r\n    for (const prop in buffers) {\r\n      if (buffers.hasOwnProperty(prop)) {\r\n        gl.deleteBuffer(buffers[prop]);\r\n      }\r\n    }\r\n  }\r\n\r\n  _drawModel(options) {\r\n    if (!options.model) {\r\n      return;\r\n    }\r\n\r\n    const { gl, model, projectionMatrix, viewMatrix, modelMatrix } = options;\r\n    const { shaders, buffers, texture } = model;\r\n    const shader = shaders[options.shaderIndex ? options.shaderIndex : 0];\r\n\r\n    {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexPosition, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexPosition);\r\n    }\r\n\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\r\n\r\n    if (shader.attribLocations.vertexNormal) {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.normal);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexNormal, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexNormal);\r\n    }\r\n\r\n    if (shader.attribLocations.vertexTangent) {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.tangent);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexTangent, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexTangent);\r\n    }\r\n\r\n    if (shader.attribLocations.vertexBitangent) {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.bitangent);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexBitangent, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexBitangent);\r\n    }\r\n\r\n    if (shader.attribLocations.vertexTextureCoord) {\r\n      const numComponents = 2;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.textureCoord);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexTextureCoord, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexTextureCoord);\r\n    }\r\n\r\n    if (shader.attribLocations.vertexColor) {\r\n      const numComponents = 3;\r\n      const type = gl.FLOAT;\r\n      const normalize = false;\r\n      const stride = 0;\r\n      const offset = 0;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\r\n      gl.vertexAttribPointer(shader.attribLocations.vertexColor, numComponents, type, normalize, stride, offset);\r\n      gl.enableVertexAttribArray(shader.attribLocations.vertexColor);\r\n    }\r\n\r\n    gl.useProgram(shader.program);\r\n    gl.uniformMatrix4fv(shader.uniformLocations.projectionMatrix, false, projectionMatrix);\r\n    gl.uniformMatrix4fv(shader.uniformLocations.modelMatrix, false, modelMatrix);\r\n    gl.uniformMatrix4fv(shader.uniformLocations.viewMatrix, false, viewMatrix);\r\n\r\n    if (shader.uniformLocations.normalMatrix) {\r\n      const normalMatrix = mat4.create();\r\n      mat4.invert(normalMatrix, modelMatrix);\r\n      mat4.transpose(normalMatrix, normalMatrix);\r\n      gl.uniformMatrix4fv(shader.uniformLocations.normalMatrix, false, normalMatrix);\r\n    }\r\n\r\n    if (shader.uniformLocations.showDiffuseMap) {\r\n      gl.uniform1i(shader.uniformLocations.showDiffuseMap, options.showDiffuseMap);\r\n    }\r\n\r\n    if (shader.uniformLocations.showNormalMap) {\r\n      gl.uniform1i(shader.uniformLocations.showNormalMap, options.showNormalMap);\r\n    }\r\n\r\n    if (shader.uniformLocations.showAmbientOcclusionMap) {\r\n      gl.uniform1i(shader.uniformLocations.showAmbientOcclusionMap, options.showAmbientOcclusionMap);\r\n    }\r\n\r\n    if (shader.uniformLocations.perPixel) {\r\n      gl.uniform1i(shader.uniformLocations.perPixel, options.perPixel);\r\n    }\r\n\r\n    if (shader.uniformLocations.parallaxHeightScale) {\r\n      gl.uniform1f(shader.uniformLocations.parallaxHeightScale, options.parallaxHeightScale);\r\n    }\r\n\r\n    if (shader.uniformLocations.parallaxSteps) {\r\n      gl.uniform1i(shader.uniformLocations.parallaxSteps, options.parallaxSteps);\r\n    }\r\n\r\n    if (shader.uniformLocations.parallaxOcclusionMapping) {\r\n      gl.uniform1i(shader.uniformLocations.parallaxOcclusionMapping, options.parallaxOcclusionMapping);\r\n    }\r\n\r\n    if (shader.uniformLocations.ambientLight) {\r\n      gl.uniform3fv(shader.uniformLocations.ambientLight, options.ambientLight);\r\n    }\r\n\r\n    if (shader.uniformLocations.directionalLight) {\r\n      const direction = vec3.clone(options.directionalLight.direction);\r\n      vec3.normalize(direction, direction);\r\n      gl.uniform3fv(shader.uniformLocations.directionalLight.color, options.directionalLight.color);\r\n      gl.uniform3fv(shader.uniformLocations.directionalLight.direction, direction);\r\n    }\r\n\r\n    if (shader.uniformLocations.pointLight) {\r\n      gl.uniform3fv(shader.uniformLocations.pointLight.color, options.pointLight.color);\r\n      gl.uniform3fv(shader.uniformLocations.pointLight.position, options.pointLight.position);\r\n    }\r\n\r\n    if (options.lights) {\r\n      const lights = options.lights;\r\n      for (let i = 0; i < lights.length; i++) {\r\n        const light = lights[i];\r\n        gl.uniform3fv(shader.uniformLocations.lights[i].position, light.position);\r\n        gl.uniform3fv(shader.uniformLocations.lights[i].ambient, light.ambient);\r\n        gl.uniform3fv(shader.uniformLocations.lights[i].diffuse, light.diffuse);\r\n        gl.uniform3fv(shader.uniformLocations.lights[i].specular, light.specular);\r\n      }\r\n    }\r\n\r\n    if (options.material) {\r\n      const material = options.material;\r\n      gl.uniform3fv(shader.uniformLocations.material.ambient, material.ambient);\r\n      gl.uniform3fv(shader.uniformLocations.material.diffuse, material.diffuse);\r\n      gl.uniform3fv(shader.uniformLocations.material.specular, material.specular);\r\n      gl.uniform1f(shader.uniformLocations.material.shininess, material.shininess);\r\n    }\r\n\r\n    if (shader.uniformLocations.cameraPosition) {\r\n      gl.uniform3fv(shader.uniformLocations.cameraPosition, options.cameraPosition);\r\n    }\r\n\r\n    if (shader.uniformLocations.textureDiffuse) {\r\n      gl.activeTexture(gl.TEXTURE0);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.diffuse);\r\n      gl.uniform1i(shader.uniformLocations.textureDiffuse, 0);\r\n    }\r\n\r\n    if (shader.uniformLocations.textureNormal) {\r\n      gl.activeTexture(gl.TEXTURE1);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.normal);\r\n      gl.uniform1i(shader.uniformLocations.textureNormal, 1);\r\n    }\r\n\r\n    if (shader.uniformLocations.textureHeight) {\r\n      gl.activeTexture(gl.TEXTURE2);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.height);\r\n      gl.uniform1i(shader.uniformLocations.textureHeight, 2);\r\n    }\r\n\r\n    if (shader.uniformLocations.textureOcclusion) {\r\n      gl.activeTexture(gl.TEXTURE3);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture.occlusion);\r\n      gl.uniform1i(shader.uniformLocations.textureOcclusion, 3);\r\n    }\r\n\r\n    {\r\n      const vertexCount = buffers.vertexCount;\r\n      const type = gl.UNSIGNED_SHORT;\r\n      const offset = 0;\r\n      gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Model;\r\n","import Model from './Model';\r\nimport { getShape } from '../lib/utility';\r\n\r\nclass ColoredModel extends Model {\r\n  constructor(gl, shapeName, colors) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: ({ addFaces }) => {\r\n        const shape = getShape(shapeName);\r\n        addFaces(shape.vertices, shape.faces, { colors });\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/colored/vertex.glsl',\r\n        fragment: 'shaders/colored/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix, lights, material) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix,\r\n      lights,\r\n      material\r\n    });\r\n  }\r\n}\r\n\r\nexport default ColoredModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen } from '../lib/utility'\r\nimport ColoredModel from '../models/ColoredModel';\r\n\r\nclass ColoredCubeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const colors1 = [\r\n      [0.0, 0.0, 1.0],    // Bottom face: blue\r\n      [0.0, 1.0, 0.0],    // Top face: green\r\n      [1.0, 0.0, 1.0],    // Left face: purple\r\n      [1.0, 1.0, 0.0],    // Right face: yellow\r\n      [1.0, 1.0, 1.0],    // Front face: white\r\n      [1.0, 0.0, 0.0]     // Back face: red\r\n    ];\r\n    const model6 = new ColoredModel(gl, 'cube', colors1);\r\n    const colors2 = [\r\n      [1.0, 0.0, 0.0],\r\n      [0.0, 0.0, 1.0],\r\n      [0.0, 1.0, 0.0],\r\n      [1.0, 1.0, 0.0],\r\n      [0.0, 1.0, 1.0],\r\n      [1.0, 0.0, 1.0],\r\n      [1.0, 0.5, 0.0],\r\n      [0.0, 1.0, 0.5],\r\n      [1.0, 0.0, 0.5],\r\n      [0.5, 1.0, 0.0],\r\n      [0.0, 0.5, 1.0],\r\n      [0.5, 0.0, 1.0]\r\n    ];\r\n    const model12 = new ColoredModel(gl, 'dodecahedron', colors2);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model: model6,\r\n          location: [-1.6, 0.0, -6.0],\r\n          scale: [3.0, 3.0, 3.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 1.0\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.7\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model12,\r\n          location: [1.6, 0.0, -6.0],\r\n          scale: [2.8, 2.8, 2.8],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 1.0\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.7\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    if (actor.scale) {\r\n      mat4.scale(modelMatrix, modelMatrix, actor.scale);\r\n    }\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      mat4.rotate(modelMatrix, modelMatrix, rotation.angle, rotation.axis);\r\n    }\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      rotation.angle += deltaTime * rotation.speed;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ColoredCubeScene;\r\n","import Model from './Model';\r\n\r\nclass TexturedCubeModel extends Model {\r\n  constructor(gl) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: this._geometry,\r\n      texture: {\r\n        diffuse: 'images/cubetexture.png'\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/texturedcube/vertex.glsl',\r\n        fragment: 'shaders/texturedcube/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix\r\n    });\r\n  }\r\n\r\n  _geometry({ addSquare }) {\r\n    const f0 = [-1, -1, 1];\r\n    const f1 = [1, -1, 1];\r\n    const f2 = [1, 1, 1];\r\n    const f3 = [-1, 1, 1];\r\n    const b0 = [-1, -1, -1];\r\n    const b1 = [1, -1, -1];\r\n    const b2 = [1, 1, -1];\r\n    const b3 = [-1, 1, -1];\r\n    addSquare(f0, f1, f2, f3);  // front\r\n    addSquare(b1, b0, b3, b2);  // back\r\n    addSquare(b0, f0, f3, b3);  // left\r\n    addSquare(f1, b1, b2, f2);  // right\r\n    addSquare(b0, b1, f1, f0);  // bottom\r\n    addSquare(b2, b3, f3, f2);  // top\r\n  }\r\n}\r\n\r\nexport default TexturedCubeModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen } from '../lib/utility'\r\nimport TexturedCubeModel from '../models/TexturedCubeModel';\r\n\r\nclass TexturedCubeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const model = new TexturedCubeModel(gl);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [0.0, 0.0, -6.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 1.0\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.7\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      mat4.rotate(modelMatrix, modelMatrix, rotation.angle, rotation.axis);\r\n    }\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      rotation.angle += deltaTime * rotation.speed;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TexturedCubeScene;\r\n","import Model from './Model';\r\n\r\nclass LightedCubeModel extends Model {\r\n  constructor(gl) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: this._geometry,\r\n      texture: {\r\n        diffuse: 'images/cubetexture.png'\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/lightedcube/vertex.glsl',\r\n        fragment: 'shaders/lightedcube/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix, perPixel) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix,\r\n      ambientLight: [0.3, 0.3, 0.3],\r\n      directionalLight: {\r\n        color: [0.5, 0.5, 0.5],\r\n        direction: [0.0, 1.0, 0.0]\r\n      },\r\n      pointLight: {\r\n        color: [0.7, 0.7, 0.7],\r\n        position: [0.0, 0.0, 0.0]\r\n      },\r\n      cameraPosition: [0.0, 0.0, 0.0],\r\n      perPixel\r\n    });\r\n  }\r\n\r\n  _geometry({ addSquare }) {\r\n    const f0 = [-1, -1, 1];\r\n    const f1 = [1, -1, 1];\r\n    const f2 = [1, 1, 1];\r\n    const f3 = [-1, 1, 1];\r\n    const b0 = [-1, -1, -1];\r\n    const b1 = [1, -1, -1];\r\n    const b2 = [1, 1, -1];\r\n    const b3 = [-1, 1, -1];\r\n    addSquare(f0, f1, f2, f3);  // front\r\n    addSquare(b1, b0, b3, b2);  // back\r\n    addSquare(b0, f0, f3, b3);  // left\r\n    addSquare(f1, b1, b2, f2);  // right\r\n    addSquare(b0, b1, f1, f0);  // bottom\r\n    addSquare(b2, b3, f3, f2);  // top\r\n  }\r\n}\r\n\r\nexport default LightedCubeModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen } from '../lib/utility'\r\nimport LightedCubeModel from '../models/LightedCubeModel';\r\n\r\nclass LightedCubeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const model = new LightedCubeModel(gl);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [-2.0, 0.0, -5.5],\r\n          rotation: 0.0,\r\n          rotationSpeed: 1.0,\r\n          perPixel: false\r\n        },\r\n        {\r\n          model,\r\n          location: [2.0, 0.0, -5.5],\r\n          rotation: 0.0,\r\n          rotationSpeed: 1.0,\r\n          perPixel: true\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0],\r\n      cameraDir: [0.0, 0.0, 2.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n\r\n    if (scene.camera[2] > 16.0) {\r\n      scene.camera[2] = 16.0;\r\n      scene.cameraDir[2] = -2.0;\r\n    } else if (scene.camera[2] < 0.0) {\r\n      scene.camera[2] = 0.0;\r\n      scene.cameraDir[2] = 2.0;\r\n    }\r\n\r\n    scene.camera[0] += scene.cameraDir[0] * deltaTime;\r\n    scene.camera[1] += scene.cameraDir[1] * deltaTime;\r\n    scene.camera[2] += scene.cameraDir[2] * deltaTime;\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation, [0, 0, 1]);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation * 0.7, [0, 1, 0]);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation * 0.3, [1, 0, 0]);\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix, actor.perPixel);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    actor.rotation += deltaTime * actor.rotationSpeed;\r\n  }\r\n}\r\n\r\nexport default LightedCubeScene;\r\n","import Model from './Model';\r\n\r\nclass MazeModel extends Model {\r\n  constructor(gl, maze) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this.update = this.update.bind(this);\r\n    this.geometry = this.geometry.bind(this);\r\n    this.maze = maze;\r\n    this._initModel({\r\n      gl,\r\n      geometry: this.geometry,\r\n      shaders: [\r\n        {\r\n          vertex: 'shaders/colored/vertex.glsl',\r\n          fragment: 'shaders/colored/fragment.glsl'\r\n        },\r\n        {\r\n          vertex: 'shaders/material/vertex.glsl',\r\n          fragment: 'shaders/material/fragment.glsl'\r\n        }\r\n      ]\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix, shaderIndex, lights, material) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix,\r\n      shaderIndex,\r\n      lights,\r\n      material\r\n    });\r\n  }\r\n\r\n  update(maze) {\r\n    const gl = this.gl;\r\n    this._deleteBuffers(gl, this.model.buffers);\r\n    this.maze = maze;\r\n    this.model.buffers = this._initBuffers(gl, this.model.shaders, this.geometry);\r\n  }\r\n\r\n  geometry({ addSquare }) {\r\n    const maze = this.maze;\r\n\r\n    const floorColor = [.2, .2, .2];\r\n    const ceilingColor = [.7, .7, .7];\r\n    const wallColor_Back = [.5, 0, .5];\r\n    const wallColor_Front = [0, .5, 0];\r\n    const wallColor_Left = [.5, 0, 0];\r\n    const wallColor_Right = [0, .0, .5];\r\n\r\n    const ofs_x = -maze.width / 2;\r\n    const ofs_y = -maze.height / 2;\r\n    for (let y = 0; y < maze.height; y++) {\r\n      for (let x = 0; x < maze.width; x++) {\r\n        const left = x + ofs_x;\r\n        const right = left + 1;\r\n        const back = y + ofs_y;\r\n        const front = back + 1;\r\n        const top = 1;\r\n        const bottom = 0;\r\n\r\n        const f0 = [left, top, front];\r\n        const f1 = [right, top, front];\r\n        const f2 = [right, bottom, front];\r\n        const f3 = [left, bottom, front];\r\n        const b0 = [left, top, back];\r\n        const b1 = [right, top, back];\r\n        const b2 = [right, bottom, back];\r\n        const b3 = [left, bottom, back];\r\n\r\n        if (maze.data[y][x] === 0) {\r\n          addSquare(b2, b3, f3, f2, { color: floorColor });\r\n        } else {\r\n          addSquare(b1, b0, f0, f1, { color: ceilingColor });\r\n\r\n          if (y === 0 || maze.data[y - 1][x] === 0) {\r\n            addSquare(b0, b1, b2, b3, { color: wallColor_Back });\r\n          }\r\n\r\n          if (x === 0 || maze.data[y][x - 1] === 0) {\r\n            addSquare(f0, b0, b3, f3, { color: wallColor_Left });\r\n          }\r\n\r\n          if (y === maze.height - 1 || maze.data[y + 1][x] === 0) {\r\n            addSquare(f1, f0, f3, f2, { color: wallColor_Front });\r\n          }\r\n\r\n          if (x === maze.width - 1 || maze.data[y][x + 1] === 0) {\r\n            addSquare(b1, f1, f2, b2, { color: wallColor_Right });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default MazeModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen, degreesToRadians, generateMaze, getMaterialList, getMaterial } from '../lib/utility'\r\nimport MazeModel from '../models/MazeModel';\r\n\r\nclass MazeScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n    this.totalDelta = 0.0;\r\n  }\r\n\r\n  initScene(gl) {\r\n    const { size, maze, material } = this._generateMaze();\r\n    const model = new MazeModel(gl, maze);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [0.0, 0.0, -2.0 * size],\r\n          rotation: { angle: 0.0, axis: [0, 1, 0], speed: 0.5 },\r\n          material\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0]\r\n    };\r\n  }\r\n\r\n  _generateMaze() {\r\n    const size = Math.floor(Math.random() * 35) * 2 + 11;\r\n    const maze = generateMaze(size, size);\r\n    let material = undefined;\r\n    if (Math.random() < 0.8) {\r\n      const materials = getMaterialList();\r\n      material = getMaterial(materials[Math.floor(Math.random() * materials.length)]);\r\n    }\r\n    return { size, maze, material };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 500.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    mat4.rotate(modelMatrix, modelMatrix, degreesToRadians(45), [1, 0, 0]);\r\n    mat4.rotate(modelMatrix, modelMatrix, actor.rotation.angle, actor.rotation.axis);\r\n\r\n    if (actor.material) {\r\n      const lights = [\r\n        {\r\n          position: [10.0, -10.0, 0.0],\r\n          ambient: [0.2, 0.2, 0.2],\r\n          diffuse: [0.5, 0.5, 0.5],\r\n          specular: [0.9, 0.9, 0.9]\r\n        },\r\n        {\r\n          position: [-10.0, 10.0, 0.0],\r\n          ambient: [0.2, 0.2, 0.2],\r\n          diffuse: [0.5, 0.5, 0.5],\r\n          specular: [0.9, 0.9, 0.9]\r\n        }\r\n      ];\r\n\r\n      model.draw(projectionMatrix, viewMatrix, modelMatrix, 1, lights, actor.material);\r\n    } else {\r\n      model.draw(projectionMatrix, viewMatrix, modelMatrix);\r\n    }\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    actor.rotation.angle += deltaTime * actor.rotation.speed;\r\n    this.totalDelta += deltaTime;\r\n    if (this.totalDelta >= 3.0) {\r\n      this.totalDelta -= 3.0;\r\n      const { size, maze, material } = this._generateMaze();\r\n      actor.material = material;\r\n      actor.location[2] = -2.0 * size;\r\n      actor.model.update(maze);\r\n    }\r\n  }\r\n}\r\n\r\nexport default MazeScene;\r\n","import Model from './Model';\r\n\r\nclass BrickWallModel extends Model {\r\n  constructor(gl) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: this._geometry,\r\n      texture: {\r\n        diffuse: 'images/Brick_Wall_017_basecolor.jpg',\r\n        normal: 'images/Brick_Wall_017_normal.jpg',\r\n        height: 'images/Brick_Wall_017_height.png',\r\n        occlusion: 'images/Brick_Wall_017_ambientOcclusion.jpg'\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/brickwall/vertex.glsl',\r\n        fragment: 'shaders/brickwall/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix,\r\n      showDiffuseMap: 1,\r\n      showNormalMap: 1,\r\n      showAmbientOcclusionMap: 1,\r\n      parallaxHeightScale: 0.04,\r\n      parallaxSteps: 32,\r\n      parallaxOcclusionMapping: 1,\r\n      ambientLight: [0.3, 0.3, 0.3],\r\n      directionalLight: {\r\n        color: [0.4, 0.4, 0.4],\r\n        direction: [0.0, -1.0, 1.0]\r\n      },\r\n      pointLight: {\r\n        color: [1.0, 1.0, 1.0],\r\n        position: [0.0, 0.0, 0.0]\r\n      },\r\n      cameraPosition: [0.0, 0.0, 0.0]\r\n    });\r\n  }\r\n\r\n  _geometry({ addSquare }) {\r\n    const f0 = [-1, -1, 1];\r\n    const f1 = [1, -1, 1];\r\n    const f2 = [1, 1, 1];\r\n    const f3 = [-1, 1, 1];\r\n    const b0 = [-1, -1, -1];\r\n    const b1 = [1, -1, -1];\r\n    const b2 = [1, 1, -1];\r\n    const b3 = [-1, 1, -1];\r\n    addSquare(f0, f1, f2, f3);  // front\r\n    addSquare(b1, b0, b3, b2);  // back\r\n    addSquare(b0, f0, f3, b3);  // left\r\n    addSquare(f1, b1, b2, f2);  // right\r\n    addSquare(b0, b1, f1, f0);  // top\r\n    addSquare(b2, b3, f3, f2);  // bottom\r\n  }\r\n}\r\n\r\nexport default BrickWallModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen } from '../lib/utility'\r\nimport BrickWallModel from '../models/BrickWallModel';\r\n\r\nclass BrickWallScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const model = new BrickWallModel(gl);\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model,\r\n          location: [0.0, 0.0, -5.5],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.4\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.2\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      mat4.rotate(modelMatrix, modelMatrix, rotation.angle, rotation.axis);\r\n    }\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      rotation.angle += deltaTime * rotation.speed;\r\n    }\r\n  }\r\n}\r\n\r\nexport default BrickWallScene;\r\n","import Model from './Model';\r\nimport { getShape } from '../lib/utility';\r\n\r\nclass MaterialModel extends Model {\r\n  constructor(gl, shapeName) {\r\n    super(gl);\r\n    this.gl = gl;\r\n    this.draw = this.draw.bind(this);\r\n    this._initModel({\r\n      gl,\r\n      geometry: ({ addFaces }) => {\r\n        const shape = getShape(shapeName);\r\n        addFaces(shape.vertices, shape.faces);\r\n      },\r\n      shader: {\r\n        vertex: 'shaders/material/vertex.glsl',\r\n        fragment: 'shaders/material/fragment.glsl'\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(projectionMatrix, viewMatrix, modelMatrix, lights, material) {\r\n    this._drawModel({\r\n      gl: this.gl,\r\n      model: this.model,\r\n      projectionMatrix,\r\n      viewMatrix,\r\n      modelMatrix,\r\n      lights,\r\n      material\r\n    });\r\n  }\r\n}\r\n\r\nexport default MaterialModel;\r\n","import * as mat4 from 'gl-matrix/mat4';\r\nimport { clearScreen, getMaterial } from '../lib/utility'\r\nimport MaterialModel from '../models/MaterialModel';\r\n\r\nclass MaterialScene {\r\n  constructor() {\r\n    this.initScene = this.initScene.bind(this);\r\n    this.drawScene = this.drawScene.bind(this);\r\n  }\r\n\r\n  initScene(gl) {\r\n    const model4 = new MaterialModel(gl, 'tetrahedron');\r\n    const model6 = new MaterialModel(gl, 'cube');\r\n    const model8 = new MaterialModel(gl, 'octahedron');\r\n    const model10 = new MaterialModel(gl, 'pentagonaltrapezohedron');\r\n    const model12 = new MaterialModel(gl, 'dodecahedron');\r\n    const model20 = new MaterialModel(gl, 'icosahedron');\r\n\r\n    this.scene = {\r\n      actors: [\r\n        {\r\n          model: model4,\r\n          material: getMaterial('gold'),\r\n          location: [-3.75, 0.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model6,\r\n          material: getMaterial('gold'),\r\n          location: [-2.25, 0.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model8,\r\n          material: getMaterial('gold'),\r\n          location: [-0.75, 0.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model10,\r\n          material: getMaterial('gold'),\r\n          location: [0.75, 0.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model12,\r\n          material: getMaterial('gold'),\r\n          location: [2.25, 0.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model20,\r\n          material: getMaterial('gold'),\r\n          location: [3.75, 0.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model4,\r\n          material: getMaterial('chrome'),\r\n          location: [-3.75, 2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model6,\r\n          material: getMaterial('chrome'),\r\n          location: [-2.25, 2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model8,\r\n          material: getMaterial('chrome'),\r\n          location: [-0.75, 2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model10,\r\n          material: getMaterial('chrome'),\r\n          location: [0.75, 2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model12,\r\n          material: getMaterial('chrome'),\r\n          location: [2.25, 2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model20,\r\n          material: getMaterial('chrome'),\r\n          location: [3.75, 2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model4,\r\n          material: getMaterial('obsidian'),\r\n          location: [-3.75, -2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model6,\r\n          material: getMaterial('obsidian'),\r\n          location: [-2.25, -2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model8,\r\n          material: getMaterial('obsidian'),\r\n          location: [-0.75, -2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model10,\r\n          material: getMaterial('obsidian'),\r\n          location: [0.75, -2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model12,\r\n          material: getMaterial('obsidian'),\r\n          location: [2.25, -2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          model: model20,\r\n          material: getMaterial('obsidian'),\r\n          location: [3.75, -2.0, -8.0],\r\n          rotations: [\r\n            {\r\n              angle: 0.0,\r\n              axis: [0, 1, 0],\r\n              speed: 0.8\r\n            },\r\n            {\r\n              angle: 0.0,\r\n              axis: [1, 0, 0],\r\n              speed: 0.4\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      camera: [0.0, 0.0, 0.0]\r\n    };\r\n  }\r\n\r\n  drawScene(gl, deltaTime) {\r\n    const scene = this.scene;\r\n\r\n    clearScreen(gl);\r\n\r\n    const fieldOfView = 45 * Math.PI / 180;\r\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const zNear = 0.1;\r\n    const zFar = 100.0;\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n    const viewMatrix = mat4.create();\r\n    mat4.translate(viewMatrix, viewMatrix, scene.camera);\r\n    mat4.invert(viewMatrix, viewMatrix)\r\n\r\n    for (let i = 0; i < scene.actors.length; i++) {\r\n      const actor = scene.actors[i];\r\n      this._renderActor(projectionMatrix, viewMatrix, actor);\r\n      this._animateActor(deltaTime, actor);\r\n    }\r\n  }\r\n\r\n  _renderActor(projectionMatrix, viewMatrix, actor) {\r\n    const model = actor.model;\r\n\r\n    const modelMatrix = mat4.create();\r\n    mat4.translate(modelMatrix, modelMatrix, actor.location);\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      mat4.rotate(modelMatrix, modelMatrix, rotation.angle, rotation.axis);\r\n    }\r\n\r\n    const lights = [\r\n      {\r\n        position: [10.0, -10.0, 0.0],\r\n        ambient: [0.2, 0.2, 0.2],\r\n        diffuse: [0.5, 0.5, 0.5],\r\n        specular: [0.9, 0.9, 0.9]\r\n      },\r\n      {\r\n        position: [-10.0, 10.0, 0.0],\r\n        ambient: [0.2, 0.2, 0.2],\r\n        diffuse: [0.5, 0.5, 0.5],\r\n        specular: [0.9, 0.9, 0.9]\r\n      }\r\n    ];\r\n\r\n    model.draw(projectionMatrix, viewMatrix, modelMatrix, lights, actor.material);\r\n  }\r\n\r\n  _animateActor(deltaTime, actor) {\r\n    for (let i = 0; i < actor.rotations.length; i++) {\r\n      const rotation = actor.rotations[i];\r\n      rotation.angle += deltaTime * rotation.speed;\r\n    }\r\n  }\r\n}\r\n\r\nexport default MaterialScene;\r\n","import ColoredSquareScene from '../scenes/ColoredSquareScene';\r\nimport ColoredCubeScene from '../scenes/ColoredCubeScene';\r\nimport TexturedCubeScene from '../scenes/TexturedCubeScene';\r\nimport LightedCubeScene from '../scenes/LightedCubeScene';\r\nimport MazeScene from '../scenes/MazeScene';\r\nimport BrickWallScene from '../scenes/BrickWallScene';\r\nimport MaterialScene from '../scenes/MaterialScene';\r\n\r\nclass SceneManager {\r\n  constructor(canvas) {\r\n    this.canvas = canvas;\r\n\r\n    this.resizeViewport = this.resizeViewport.bind(this);\r\n    this.previousScene = this.previousScene.bind(this);\r\n    this.nextScene = this.nextScene.bind(this);\r\n    this.renderScene = this.renderScene.bind(this);\r\n\r\n    this.scenes = [\r\n      { init: false, render: new ColoredSquareScene() },\r\n      { init: false, render: new ColoredCubeScene() },\r\n      { init: false, render: new TexturedCubeScene() },\r\n      { init: false, render: new LightedCubeScene() },\r\n      { init: false, render: new MazeScene() },\r\n      { init: false, render: new BrickWallScene() },\r\n      { init: false, render: new MaterialScene() }\r\n    ];\r\n    this.sceneIndex = this.scenes.length - 1;\r\n\r\n    this.gl = canvas.getContext('webgl');\r\n    if (this.gl === null) {\r\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n    } else {\r\n      this.resizeViewport();\r\n      this.gl.enable(this.gl.CULL_FACE);\r\n      this.gl.cullFace(this.gl.BACK);\r\n      const scene = this.scenes[this.sceneIndex];\r\n      if (!scene.init) {\r\n        scene.init = true;\r\n        scene.render.initScene(this.gl);\r\n      }\r\n    }\r\n  }\r\n\r\n  resizeViewport() {\r\n    const canvas = this.canvas;\r\n    const rect = canvas.getBoundingClientRect()\r\n    canvas.width = rect.width;\r\n    canvas.height = rect.height;\r\n    this.gl.viewport(0, 0, canvas.width, canvas.height);\r\n  }\r\n\r\n  previousScene() {\r\n    this.sceneIndex = (this.sceneIndex - 1) % this.scenes.length;\r\n    if (this.sceneIndex < 0) {\r\n      this.sceneIndex = this.scenes.length - 1;\r\n    }\r\n    const scene = this.scenes[this.sceneIndex];\r\n    if (!scene.init) {\r\n      scene.init = true;\r\n      scene.render.initScene(this.gl);\r\n    }\r\n  }\r\n\r\n  nextScene() {\r\n    this.sceneIndex = (this.sceneIndex + 1) % this.scenes.length;\r\n    const scene = this.scenes[this.sceneIndex];\r\n    if (!scene.init) {\r\n      scene.init = true;\r\n      scene.render.initScene(this.gl);\r\n    }\r\n  }\r\n\r\n  renderScene(timeStamp) {\r\n    timeStamp *= 0.001;\r\n    if (!this.timeStamp) {\r\n      this.timeStamp = timeStamp;\r\n    }\r\n    const deltaTime = timeStamp - this.timeStamp;\r\n    this.timeStamp = timeStamp;\r\n    const scene = this.scenes[this.sceneIndex];\r\n    scene.render.drawScene(this.gl, deltaTime);\r\n  }\r\n}\r\n\r\nexport default SceneManager;\r\n","import React from 'react';\r\nimport Message from './Message';\r\nimport Controls from './Controls';\r\nimport SceneManager from './SceneManager';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onResize = this.onResize.bind(this);\r\n    this.onKeyDown = this.onKeyDown.bind(this);\r\n    this.onKeyUp = this.onKeyUp.bind(this);\r\n    this.onClickPrevious = this.onClickPrevious.bind(this);\r\n    this.onClickNext = this.onClickNext.bind(this);\r\n    this.onAnimationFrame = this.onAnimationFrame.bind(this);\r\n    this.state = {\r\n      showControls: false,\r\n      keys: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.sceneManager = new SceneManager(this.canvas);\r\n    this.frame = window.requestAnimationFrame(this.onAnimationFrame);\r\n    window.addEventListener('resize', this.onResize);\r\n    window.addEventListener('keydown', this.onKeyDown);\r\n    window.addEventListener('keyup', this.onKeyUp);\r\n    this.showMessage(['Press Escape to toggle menu', 'Press Page Up for previous screen', 'Press Page Down for next screen']);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.cancelAnimationFrame(this.frame);\r\n    window.removeEventListener('resize', this.onResize);\r\n    window.removeEventListener('keydown', this.onKeyDown);\r\n    window.removeEventListener('keyup', this.onKeyUp);\r\n  }\r\n\r\n  onResize() {\r\n    this.sceneManager.resizeViewport();\r\n  }\r\n\r\n  onKeyDown(event) {\r\n    event.preventDefault();\r\n    if (this.state.keys.indexOf(event.key) === -1) {\r\n      this.onKeyPress(event.key);\r\n      this.setState({ keys: [event.key, ...this.state.keys] });\r\n    }\r\n  }\r\n\r\n  onKeyUp(event) {\r\n    event.preventDefault();\r\n    this.setState({ keys: this.state.keys.filter((v) => v !== event.key) });\r\n  }\r\n\r\n  onKeyPress(key) {\r\n    if (key === 'Escape') {\r\n      if (this.messageTimer) {\r\n        this.cancelMessage();\r\n      } else {\r\n        this.setState({ showControls: !this.state.showControls });\r\n      }\r\n    } else if (key === 'PageUp') {\r\n      this.sceneManager.previousScene();\r\n    } else if (key === 'PageDown') {\r\n      this.sceneManager.nextScene();\r\n    }\r\n  }\r\n\r\n  onClickPrevious(event) {\r\n    event.preventDefault();\r\n    this.sceneManager.previousScene();\r\n  }\r\n\r\n  onClickNext(event) {\r\n    event.preventDefault();\r\n    this.sceneManager.nextScene();\r\n  }\r\n\r\n  showMessage(message) {\r\n    this.setState({ message });\r\n    this.messageTimer = setTimeout(this.clearMessage.bind(this), 10000);\r\n  }\r\n\r\n  clearMessage() {\r\n    this.setState({ message: undefined });\r\n    this.messageTimer = undefined;\r\n  }\r\n\r\n  cancelMessage() {\r\n    clearTimeout(this.messageTimer);\r\n    this.clearMessage();\r\n  }\r\n\r\n  onAnimationFrame(timeStamp) {\r\n    this.sceneManager.renderScene(timeStamp);\r\n    this.frame = window.requestAnimationFrame(this.onAnimationFrame);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"screen\">\r\n        <canvas id=\"canvas\" ref={elem => this.canvas = elem}></canvas>\r\n        <Message message={this.state.message} />\r\n        <Controls show={this.state.showControls}>\r\n          <span className=\"left\" onClick={this.onClickPrevious}>❮ PREV</span>\r\n          <span className=\"right\" onClick={this.onClickNext}>NEXT ❯</span>\r\n        </Controls>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}